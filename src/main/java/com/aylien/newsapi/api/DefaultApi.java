/*
 * AYLIEN News API
 * The AYLIEN News API is the most powerful way of sourcing, searching and syndicating analyzed and enriched news content. It is accessed by sending HTTP requests to our server, which returns information to your client. 
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@aylien.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.aylien.newsapi.api;

import com.aylien.newsapi.ApiCallback;
import com.aylien.newsapi.ApiClient;
import com.aylien.newsapi.ApiException;
import com.aylien.newsapi.ApiResponse;
import com.aylien.newsapi.Configuration;
import com.aylien.newsapi.Pair;
import com.aylien.newsapi.ProgressRequestBody;
import com.aylien.newsapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.aylien.newsapi.models.Autocompletes;
import com.aylien.newsapi.models.Clusters;
import com.aylien.newsapi.models.Coverages;
import com.aylien.newsapi.models.Errors;
import com.aylien.newsapi.models.Histograms;
import org.threeten.bp.OffsetDateTime;
import com.aylien.newsapi.models.RelatedStories;
import com.aylien.newsapi.models.Stories;
import com.aylien.newsapi.models.TimeSeriesList;
import com.aylien.newsapi.models.Trends;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    private okhttp3.Call listAutocompletesCall(String type, String term, String language, Integer perPage, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/autocompletes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (term != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("term", term));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "app_id", "app_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAutocompletesValidateBeforeCall(String type, String term, String language, Integer perPage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling listAutocompletes(Async)");
        }
        
        // verify the required parameter 'term' is set
        if (term == null) {
            throw new ApiException("Missing the required parameter 'term' when calling listAutocompletes(Async)");
        }
        

        okhttp3.Call localVarCall = listAutocompletesCall(type, term, language, perPage, _callback);
        return localVarCall;

    }


    private ApiResponse<Autocompletes> listAutocompletesWithHttpInfo(String type, String term, String language, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = listAutocompletesValidateBeforeCall(type, term, language, perPage, null);
        Type localVarReturnType = new TypeToken<Autocompletes>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAutocompletesAsync(String type, String term, String language, Integer perPage, final ApiCallback<Autocompletes> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAutocompletesValidateBeforeCall(type, term, language, perPage, _callback);
        Type localVarReturnType = new TypeToken<Autocompletes>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistAutocompletesRequest {
        private final String type;
        private final String term;
        private String language;
        private Integer perPage;

        private APIlistAutocompletesRequest(String type, String term) {
            this.type = type;
            this.term = term;
        }

        /**
         * Set language
         * @param language This parameter is used for autocompletes whose language is the specified value. It supports [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language codes.  (optional, default to en)
         * @return APIlistAutocompletesRequest
         */
        public APIlistAutocompletesRequest language(String language) {
            this.language = language;
            return this;
        }

        /**
         * Set perPage
         * @param perPage This parameter is used for specifying number of items in each page.  (optional, default to 3)
         * @return APIlistAutocompletesRequest
         */
        public APIlistAutocompletesRequest perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }

        /**
         * Build call for listAutocompletes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An object including an array of autocompletes </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAutocompletesCall(type, term, language, perPage, _callback);
        }

        /**
         * Execute listAutocompletes request
         * @return Autocompletes
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An object including an array of autocompletes </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public Autocompletes execute() throws ApiException {
            ApiResponse<Autocompletes> localVarResp = listAutocompletesWithHttpInfo(type, term, language, perPage);
            return localVarResp.getData();
        }

        /**
         * Execute listAutocompletes request with HTTP info returned
         * @return ApiResponse&lt;Autocompletes&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An object including an array of autocompletes </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Autocompletes> executeWithHttpInfo() throws ApiException {
            return listAutocompletesWithHttpInfo(type, term, language, perPage);
        }

        /**
         * Execute listAutocompletes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An object including an array of autocompletes </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Autocompletes> _callback) throws ApiException {
            return listAutocompletesAsync(type, term, language, perPage, _callback);
        }
    }

    /**
     * List autocompletes
     * The autocompletes endpoint a string of characters provided to it, and then returns suggested terms that are the most likely full words or strings. The terms returned by the News API are based on parameters the type parameters you can see below. For example, if you provide the autocompletes endpoint with the term &#x60;New York C&#x60; and select the type &#x60;dbpedia_resources&#x60;, the API will return links to the DBpedia resources &#x60;New_York_City&#x60;, &#x60;New_York_City_Subway&#x60;, &#x60;New_York_City_Police_Department&#x60;, and so on. 
     * @param type This parameter is used for defining the type of autocompletes.  (required)
     * @param term This parameter is used for finding autocomplete objects that contain the specified value.  (required)
     * @return APIlistAutocompletesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object including an array of autocompletes </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public APIlistAutocompletesRequest listAutocompletes(String type, String term) {
        return new APIlistAutocompletesRequest(type, term);
    }
    private okhttp3.Call listClustersCall(List<Long> id, List<Long> notId, Integer storyCountMin, Integer storyCountMax, String timeStart, String timeEnd, String earliestStoryStart, String earliestStoryEnd, String latestStoryStart, String latestStoryEnd, List<String> locationCountry, List<String> notLocationCountry, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/clusters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id[]", id));
        }

        if (notId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!id[]", notId));
        }

        if (storyCountMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("story_count.min", storyCountMin));
        }

        if (storyCountMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("story_count.max", storyCountMax));
        }

        if (timeStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time.start", timeStart));
        }

        if (timeEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time.end", timeEnd));
        }

        if (earliestStoryStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("earliest_story.start", earliestStoryStart));
        }

        if (earliestStoryEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("earliest_story.end", earliestStoryEnd));
        }

        if (latestStoryStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latest_story.start", latestStoryStart));
        }

        if (latestStoryEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latest_story.end", latestStoryEnd));
        }

        if (locationCountry != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location.country", locationCountry));
        }

        if (notLocationCountry != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!location.country", notLocationCountry));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "app_id", "app_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listClustersValidateBeforeCall(List<Long> id, List<Long> notId, Integer storyCountMin, Integer storyCountMax, String timeStart, String timeEnd, String earliestStoryStart, String earliestStoryEnd, String latestStoryStart, String latestStoryEnd, List<String> locationCountry, List<String> notLocationCountry, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listClustersCall(id, notId, storyCountMin, storyCountMax, timeStart, timeEnd, earliestStoryStart, earliestStoryEnd, latestStoryStart, latestStoryEnd, locationCountry, notLocationCountry, _callback);
        return localVarCall;

    }


    private ApiResponse<Clusters> listClustersWithHttpInfo(List<Long> id, List<Long> notId, Integer storyCountMin, Integer storyCountMax, String timeStart, String timeEnd, String earliestStoryStart, String earliestStoryEnd, String latestStoryStart, String latestStoryEnd, List<String> locationCountry, List<String> notLocationCountry) throws ApiException {
        okhttp3.Call localVarCall = listClustersValidateBeforeCall(id, notId, storyCountMin, storyCountMax, timeStart, timeEnd, earliestStoryStart, earliestStoryEnd, latestStoryStart, latestStoryEnd, locationCountry, notLocationCountry, null);
        Type localVarReturnType = new TypeToken<Clusters>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listClustersAsync(List<Long> id, List<Long> notId, Integer storyCountMin, Integer storyCountMax, String timeStart, String timeEnd, String earliestStoryStart, String earliestStoryEnd, String latestStoryStart, String latestStoryEnd, List<String> locationCountry, List<String> notLocationCountry, final ApiCallback<Clusters> _callback) throws ApiException {

        okhttp3.Call localVarCall = listClustersValidateBeforeCall(id, notId, storyCountMin, storyCountMax, timeStart, timeEnd, earliestStoryStart, earliestStoryEnd, latestStoryStart, latestStoryEnd, locationCountry, notLocationCountry, _callback);
        Type localVarReturnType = new TypeToken<Clusters>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistClustersRequest {
        private List<Long> id;
        private List<Long> notId;
        private Integer storyCountMin;
        private Integer storyCountMax;
        private String timeStart;
        private String timeEnd;
        private String earliestStoryStart;
        private String earliestStoryEnd;
        private String latestStoryStart;
        private String latestStoryEnd;
        private List<String> locationCountry;
        private List<String> notLocationCountry;

        private APIlistClustersRequest() {
        }

        /**
         * Set id
         * @param id This parameter is used for finding clusters by cluster id.  (optional)
         * @return APIlistClustersRequest
         */
        public APIlistClustersRequest id(List<Long> id) {
            this.id = id;
            return this;
        }

        /**
         * Set notId
         * @param notId This parameter is used for excluding clusters by cluster id.  (optional)
         * @return APIlistClustersRequest
         */
        public APIlistClustersRequest notId(List<Long> notId) {
            this.notId = notId;
            return this;
        }

        /**
         * Set storyCountMin
         * @param storyCountMin This parameter is used for finding clusters with more than or equal to a specific amount of stories associated with them.  (optional)
         * @return APIlistClustersRequest
         */
        public APIlistClustersRequest storyCountMin(Integer storyCountMin) {
            this.storyCountMin = storyCountMin;
            return this;
        }

        /**
         * Set storyCountMax
         * @param storyCountMax This parameter is used for finding clusters with less than or equal to a specific amount of stories associated with them.  (optional)
         * @return APIlistClustersRequest
         */
        public APIlistClustersRequest storyCountMax(Integer storyCountMax) {
            this.storyCountMax = storyCountMax;
            return this;
        }

        /**
         * Set timeStart
         * @param timeStart This parameter is used for finding clusters whose creation time is greater than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates).  (optional)
         * @return APIlistClustersRequest
         */
        public APIlistClustersRequest timeStart(String timeStart) {
            this.timeStart = timeStart;
            return this;
        }

        /**
         * Set timeEnd
         * @param timeEnd This parameter is used for finding clusters whose creation time is less than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates).  (optional)
         * @return APIlistClustersRequest
         */
        public APIlistClustersRequest timeEnd(String timeEnd) {
            this.timeEnd = timeEnd;
            return this;
        }

        /**
         * Set earliestStoryStart
         * @param earliestStoryStart This parameter is used for finding clusters whose publication date of its earliest story is greater than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates).  (optional)
         * @return APIlistClustersRequest
         */
        public APIlistClustersRequest earliestStoryStart(String earliestStoryStart) {
            this.earliestStoryStart = earliestStoryStart;
            return this;
        }

        /**
         * Set earliestStoryEnd
         * @param earliestStoryEnd This parameter is used for finding clusters whose publication date of its earliest story is less than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates).  (optional)
         * @return APIlistClustersRequest
         */
        public APIlistClustersRequest earliestStoryEnd(String earliestStoryEnd) {
            this.earliestStoryEnd = earliestStoryEnd;
            return this;
        }

        /**
         * Set latestStoryStart
         * @param latestStoryStart This parameter is used for finding clusters whose publication date of its latest story is greater than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates).  (optional)
         * @return APIlistClustersRequest
         */
        public APIlistClustersRequest latestStoryStart(String latestStoryStart) {
            this.latestStoryStart = latestStoryStart;
            return this;
        }

        /**
         * Set latestStoryEnd
         * @param latestStoryEnd This parameter is used for finding clusters whose publication date of its latest story is less than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates).  (optional)
         * @return APIlistClustersRequest
         */
        public APIlistClustersRequest latestStoryEnd(String latestStoryEnd) {
            this.latestStoryEnd = latestStoryEnd;
            return this;
        }

        /**
         * Set locationCountry
         * @param locationCountry This parameter is used for finding clusters belonging to a specific country. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistClustersRequest
         */
        public APIlistClustersRequest locationCountry(List<String> locationCountry) {
            this.locationCountry = locationCountry;
            return this;
        }

        /**
         * Set notLocationCountry
         * @param notLocationCountry This parameter is used for excluding clusters belonging to a specific country. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistClustersRequest
         */
        public APIlistClustersRequest notLocationCountry(List<String> notLocationCountry) {
            this.notLocationCountry = notLocationCountry;
            return this;
        }

        /**
         * Build call for listClusters
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An object including an array of clusters </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listClustersCall(id, notId, storyCountMin, storyCountMax, timeStart, timeEnd, earliestStoryStart, earliestStoryEnd, latestStoryStart, latestStoryEnd, locationCountry, notLocationCountry, _callback);
        }

        /**
         * Execute listClusters request
         * @return Clusters
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An object including an array of clusters </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public Clusters execute() throws ApiException {
            ApiResponse<Clusters> localVarResp = listClustersWithHttpInfo(id, notId, storyCountMin, storyCountMax, timeStart, timeEnd, earliestStoryStart, earliestStoryEnd, latestStoryStart, latestStoryEnd, locationCountry, notLocationCountry);
            return localVarResp.getData();
        }

        /**
         * Execute listClusters request with HTTP info returned
         * @return ApiResponse&lt;Clusters&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An object including an array of clusters </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Clusters> executeWithHttpInfo() throws ApiException {
            return listClustersWithHttpInfo(id, notId, storyCountMin, storyCountMax, timeStart, timeEnd, earliestStoryStart, earliestStoryEnd, latestStoryStart, latestStoryEnd, locationCountry, notLocationCountry);
        }

        /**
         * Execute listClusters request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An object including an array of clusters </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Clusters> _callback) throws ApiException {
            return listClustersAsync(id, notId, storyCountMin, storyCountMax, timeStart, timeEnd, earliestStoryStart, earliestStoryEnd, latestStoryStart, latestStoryEnd, locationCountry, notLocationCountry, _callback);
        }
    }

    /**
     * List Clusters
     * The clusters endpoint is used to return clusters based on parameters you set in your query. 
     * @return APIlistClustersRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object including an array of clusters </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public APIlistClustersRequest listClusters() {
        return new APIlistClustersRequest();
    }
    private okhttp3.Call listCoveragesCall(List<Long> id, List<Long> notId, String title, String body, String text, String translationsEnTitle, String translationsEnBody, String translationsEnText, List<String> language, List<String> notLanguage, String publishedAtStart, String publishedAtEnd, String categoriesTaxonomy, Boolean categoriesConfident, List<String> categoriesId, List<String> notCategoriesId, List<Integer> categoriesLevel, List<Integer> notCategoriesLevel, List<String> entitiesTitleText, List<String> notEntitiesTitleText, List<String> entitiesTitleType, List<String> notEntitiesTitleType, List<String> entitiesTitleLinksDbpedia, List<String> notEntitiesTitleLinksDbpedia, List<String> entitiesBodyText, List<String> notEntitiesBodyText, List<String> entitiesBodyType, List<String> notEntitiesBodyType, List<String> entitiesBodyLinksDbpedia, List<String> notEntitiesBodyLinksDbpedia, String sentimentTitlePolarity, String notSentimentTitlePolarity, String sentimentBodyPolarity, String notSentimentBodyPolarity, Integer mediaImagesCountMin, Integer mediaImagesCountMax, Integer mediaImagesWidthMin, Integer mediaImagesWidthMax, Integer mediaImagesHeightMin, Integer mediaImagesHeightMax, Integer mediaImagesContentLengthMin, Integer mediaImagesContentLengthMax, List<String> mediaImagesFormat, List<String> notMediaImagesFormat, Integer mediaVideosCountMin, Integer mediaVideosCountMax, List<Integer> authorId, List<Integer> notAuthorId, String authorName, String notAuthorName, List<Integer> sourceId, List<Integer> notSourceId, List<String> sourceName, List<String> notSourceName, List<String> sourceDomain, List<String> notSourceDomain, List<String> sourceLocationsCountry, List<String> notSourceLocationsCountry, List<String> sourceLocationsState, List<String> notSourceLocationsState, List<String> sourceLocationsCity, List<String> notSourceLocationsCity, List<String> sourceScopesCountry, List<String> notSourceScopesCountry, List<String> sourceScopesState, List<String> notSourceScopesState, List<String> sourceScopesCity, List<String> notSourceScopesCity, List<String> sourceScopesLevel, List<String> notSourceScopesLevel, Integer sourceLinksInCountMin, Integer sourceLinksInCountMax, Integer sourceRankingsAlexaRankMin, Integer sourceRankingsAlexaRankMax, List<String> sourceRankingsAlexaCountry, Integer socialSharesCountFacebookMin, Integer socialSharesCountFacebookMax, Integer socialSharesCountGooglePlusMin, Integer socialSharesCountGooglePlusMax, Integer socialSharesCountLinkedinMin, Integer socialSharesCountLinkedinMax, Integer socialSharesCountRedditMin, Integer socialSharesCountRedditMax, List<String> clusters, List<String> _return, Long storyId, String storyUrl, String storyTitle, String storyBody, OffsetDateTime storyPublishedAt, String storyLanguage, Integer perPage, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/coverages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id[]", id));
        }

        if (notId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!id[]", notId));
        }

        if (title != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title", title));
        }

        if (body != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("body", body));
        }

        if (text != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text", text));
        }

        if (translationsEnTitle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("translations.en.title", translationsEnTitle));
        }

        if (translationsEnBody != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("translations.en.body", translationsEnBody));
        }

        if (translationsEnText != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("translations.en.text", translationsEnText));
        }

        if (language != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "language[]", language));
        }

        if (notLanguage != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!language[]", notLanguage));
        }

        if (publishedAtStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("published_at.start", publishedAtStart));
        }

        if (publishedAtEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("published_at.end", publishedAtEnd));
        }

        if (categoriesTaxonomy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("categories.taxonomy", categoriesTaxonomy));
        }

        if (categoriesConfident != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("categories.confident", categoriesConfident));
        }

        if (categoriesId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "categories.id[]", categoriesId));
        }

        if (notCategoriesId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!categories.id[]", notCategoriesId));
        }

        if (categoriesLevel != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "categories.level[]", categoriesLevel));
        }

        if (notCategoriesLevel != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!categories.level[]", notCategoriesLevel));
        }

        if (entitiesTitleText != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "entities.title.text[]", entitiesTitleText));
        }

        if (notEntitiesTitleText != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!entities.title.text[]", notEntitiesTitleText));
        }

        if (entitiesTitleType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "entities.title.type[]", entitiesTitleType));
        }

        if (notEntitiesTitleType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!entities.title.type[]", notEntitiesTitleType));
        }

        if (entitiesTitleLinksDbpedia != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "entities.title.links.dbpedia[]", entitiesTitleLinksDbpedia));
        }

        if (notEntitiesTitleLinksDbpedia != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!entities.title.links.dbpedia[]", notEntitiesTitleLinksDbpedia));
        }

        if (entitiesBodyText != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "entities.body.text[]", entitiesBodyText));
        }

        if (notEntitiesBodyText != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!entities.body.text[]", notEntitiesBodyText));
        }

        if (entitiesBodyType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "entities.body.type[]", entitiesBodyType));
        }

        if (notEntitiesBodyType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!entities.body.type[]", notEntitiesBodyType));
        }

        if (entitiesBodyLinksDbpedia != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "entities.body.links.dbpedia[]", entitiesBodyLinksDbpedia));
        }

        if (notEntitiesBodyLinksDbpedia != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!entities.body.links.dbpedia[]", notEntitiesBodyLinksDbpedia));
        }

        if (sentimentTitlePolarity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sentiment.title.polarity", sentimentTitlePolarity));
        }

        if (notSentimentTitlePolarity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("!sentiment.title.polarity", notSentimentTitlePolarity));
        }

        if (sentimentBodyPolarity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sentiment.body.polarity", sentimentBodyPolarity));
        }

        if (notSentimentBodyPolarity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("!sentiment.body.polarity", notSentimentBodyPolarity));
        }

        if (mediaImagesCountMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.images.count.min", mediaImagesCountMin));
        }

        if (mediaImagesCountMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.images.count.max", mediaImagesCountMax));
        }

        if (mediaImagesWidthMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.images.width.min", mediaImagesWidthMin));
        }

        if (mediaImagesWidthMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.images.width.max", mediaImagesWidthMax));
        }

        if (mediaImagesHeightMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.images.height.min", mediaImagesHeightMin));
        }

        if (mediaImagesHeightMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.images.height.max", mediaImagesHeightMax));
        }

        if (mediaImagesContentLengthMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.images.content_length.min", mediaImagesContentLengthMin));
        }

        if (mediaImagesContentLengthMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.images.content_length.max", mediaImagesContentLengthMax));
        }

        if (mediaImagesFormat != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "media.images.format[]", mediaImagesFormat));
        }

        if (notMediaImagesFormat != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!media.images.format[]", notMediaImagesFormat));
        }

        if (mediaVideosCountMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.videos.count.min", mediaVideosCountMin));
        }

        if (mediaVideosCountMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.videos.count.max", mediaVideosCountMax));
        }

        if (authorId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "author.id[]", authorId));
        }

        if (notAuthorId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!author.id[]", notAuthorId));
        }

        if (authorName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("author.name", authorName));
        }

        if (notAuthorName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("!author.name", notAuthorName));
        }

        if (sourceId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.id[]", sourceId));
        }

        if (notSourceId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.id[]", notSourceId));
        }

        if (sourceName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.name[]", sourceName));
        }

        if (notSourceName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.name[]", notSourceName));
        }

        if (sourceDomain != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.domain[]", sourceDomain));
        }

        if (notSourceDomain != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.domain[]", notSourceDomain));
        }

        if (sourceLocationsCountry != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.locations.country[]", sourceLocationsCountry));
        }

        if (notSourceLocationsCountry != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.locations.country[]", notSourceLocationsCountry));
        }

        if (sourceLocationsState != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.locations.state[]", sourceLocationsState));
        }

        if (notSourceLocationsState != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.locations.state[]", notSourceLocationsState));
        }

        if (sourceLocationsCity != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.locations.city[]", sourceLocationsCity));
        }

        if (notSourceLocationsCity != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.locations.city[]", notSourceLocationsCity));
        }

        if (sourceScopesCountry != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.scopes.country[]", sourceScopesCountry));
        }

        if (notSourceScopesCountry != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.scopes.country[]", notSourceScopesCountry));
        }

        if (sourceScopesState != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.scopes.state[]", sourceScopesState));
        }

        if (notSourceScopesState != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.scopes.state[]", notSourceScopesState));
        }

        if (sourceScopesCity != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.scopes.city[]", sourceScopesCity));
        }

        if (notSourceScopesCity != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.scopes.city[]", notSourceScopesCity));
        }

        if (sourceScopesLevel != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.scopes.level[]", sourceScopesLevel));
        }

        if (notSourceScopesLevel != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.scopes.level[]", notSourceScopesLevel));
        }

        if (sourceLinksInCountMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source.links_in_count.min", sourceLinksInCountMin));
        }

        if (sourceLinksInCountMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source.links_in_count.max", sourceLinksInCountMax));
        }

        if (sourceRankingsAlexaRankMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source.rankings.alexa.rank.min", sourceRankingsAlexaRankMin));
        }

        if (sourceRankingsAlexaRankMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source.rankings.alexa.rank.max", sourceRankingsAlexaRankMax));
        }

        if (sourceRankingsAlexaCountry != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.rankings.alexa.country[]", sourceRankingsAlexaCountry));
        }

        if (socialSharesCountFacebookMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("social_shares_count.facebook.min", socialSharesCountFacebookMin));
        }

        if (socialSharesCountFacebookMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("social_shares_count.facebook.max", socialSharesCountFacebookMax));
        }

        if (socialSharesCountGooglePlusMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("social_shares_count.google_plus.min", socialSharesCountGooglePlusMin));
        }

        if (socialSharesCountGooglePlusMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("social_shares_count.google_plus.max", socialSharesCountGooglePlusMax));
        }

        if (socialSharesCountLinkedinMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("social_shares_count.linkedin.min", socialSharesCountLinkedinMin));
        }

        if (socialSharesCountLinkedinMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("social_shares_count.linkedin.max", socialSharesCountLinkedinMax));
        }

        if (socialSharesCountRedditMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("social_shares_count.reddit.min", socialSharesCountRedditMin));
        }

        if (socialSharesCountRedditMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("social_shares_count.reddit.max", socialSharesCountRedditMax));
        }

        if (clusters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "clusters[]", clusters));
        }

        if (_return != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "return[]", _return));
        }

        if (storyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("story_id", storyId));
        }

        if (storyUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("story_url", storyUrl));
        }

        if (storyTitle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("story_title", storyTitle));
        }

        if (storyBody != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("story_body", storyBody));
        }

        if (storyPublishedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("story_published_at", storyPublishedAt));
        }

        if (storyLanguage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("story_language", storyLanguage));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "app_id", "app_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCoveragesValidateBeforeCall(List<Long> id, List<Long> notId, String title, String body, String text, String translationsEnTitle, String translationsEnBody, String translationsEnText, List<String> language, List<String> notLanguage, String publishedAtStart, String publishedAtEnd, String categoriesTaxonomy, Boolean categoriesConfident, List<String> categoriesId, List<String> notCategoriesId, List<Integer> categoriesLevel, List<Integer> notCategoriesLevel, List<String> entitiesTitleText, List<String> notEntitiesTitleText, List<String> entitiesTitleType, List<String> notEntitiesTitleType, List<String> entitiesTitleLinksDbpedia, List<String> notEntitiesTitleLinksDbpedia, List<String> entitiesBodyText, List<String> notEntitiesBodyText, List<String> entitiesBodyType, List<String> notEntitiesBodyType, List<String> entitiesBodyLinksDbpedia, List<String> notEntitiesBodyLinksDbpedia, String sentimentTitlePolarity, String notSentimentTitlePolarity, String sentimentBodyPolarity, String notSentimentBodyPolarity, Integer mediaImagesCountMin, Integer mediaImagesCountMax, Integer mediaImagesWidthMin, Integer mediaImagesWidthMax, Integer mediaImagesHeightMin, Integer mediaImagesHeightMax, Integer mediaImagesContentLengthMin, Integer mediaImagesContentLengthMax, List<String> mediaImagesFormat, List<String> notMediaImagesFormat, Integer mediaVideosCountMin, Integer mediaVideosCountMax, List<Integer> authorId, List<Integer> notAuthorId, String authorName, String notAuthorName, List<Integer> sourceId, List<Integer> notSourceId, List<String> sourceName, List<String> notSourceName, List<String> sourceDomain, List<String> notSourceDomain, List<String> sourceLocationsCountry, List<String> notSourceLocationsCountry, List<String> sourceLocationsState, List<String> notSourceLocationsState, List<String> sourceLocationsCity, List<String> notSourceLocationsCity, List<String> sourceScopesCountry, List<String> notSourceScopesCountry, List<String> sourceScopesState, List<String> notSourceScopesState, List<String> sourceScopesCity, List<String> notSourceScopesCity, List<String> sourceScopesLevel, List<String> notSourceScopesLevel, Integer sourceLinksInCountMin, Integer sourceLinksInCountMax, Integer sourceRankingsAlexaRankMin, Integer sourceRankingsAlexaRankMax, List<String> sourceRankingsAlexaCountry, Integer socialSharesCountFacebookMin, Integer socialSharesCountFacebookMax, Integer socialSharesCountGooglePlusMin, Integer socialSharesCountGooglePlusMax, Integer socialSharesCountLinkedinMin, Integer socialSharesCountLinkedinMax, Integer socialSharesCountRedditMin, Integer socialSharesCountRedditMax, List<String> clusters, List<String> _return, Long storyId, String storyUrl, String storyTitle, String storyBody, OffsetDateTime storyPublishedAt, String storyLanguage, Integer perPage, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listCoveragesCall(id, notId, title, body, text, translationsEnTitle, translationsEnBody, translationsEnText, language, notLanguage, publishedAtStart, publishedAtEnd, categoriesTaxonomy, categoriesConfident, categoriesId, notCategoriesId, categoriesLevel, notCategoriesLevel, entitiesTitleText, notEntitiesTitleText, entitiesTitleType, notEntitiesTitleType, entitiesTitleLinksDbpedia, notEntitiesTitleLinksDbpedia, entitiesBodyText, notEntitiesBodyText, entitiesBodyType, notEntitiesBodyType, entitiesBodyLinksDbpedia, notEntitiesBodyLinksDbpedia, sentimentTitlePolarity, notSentimentTitlePolarity, sentimentBodyPolarity, notSentimentBodyPolarity, mediaImagesCountMin, mediaImagesCountMax, mediaImagesWidthMin, mediaImagesWidthMax, mediaImagesHeightMin, mediaImagesHeightMax, mediaImagesContentLengthMin, mediaImagesContentLengthMax, mediaImagesFormat, notMediaImagesFormat, mediaVideosCountMin, mediaVideosCountMax, authorId, notAuthorId, authorName, notAuthorName, sourceId, notSourceId, sourceName, notSourceName, sourceDomain, notSourceDomain, sourceLocationsCountry, notSourceLocationsCountry, sourceLocationsState, notSourceLocationsState, sourceLocationsCity, notSourceLocationsCity, sourceScopesCountry, notSourceScopesCountry, sourceScopesState, notSourceScopesState, sourceScopesCity, notSourceScopesCity, sourceScopesLevel, notSourceScopesLevel, sourceLinksInCountMin, sourceLinksInCountMax, sourceRankingsAlexaRankMin, sourceRankingsAlexaRankMax, sourceRankingsAlexaCountry, socialSharesCountFacebookMin, socialSharesCountFacebookMax, socialSharesCountGooglePlusMin, socialSharesCountGooglePlusMax, socialSharesCountLinkedinMin, socialSharesCountLinkedinMax, socialSharesCountRedditMin, socialSharesCountRedditMax, clusters, _return, storyId, storyUrl, storyTitle, storyBody, storyPublishedAt, storyLanguage, perPage, _callback);
        return localVarCall;

    }


    private ApiResponse<Coverages> listCoveragesWithHttpInfo(List<Long> id, List<Long> notId, String title, String body, String text, String translationsEnTitle, String translationsEnBody, String translationsEnText, List<String> language, List<String> notLanguage, String publishedAtStart, String publishedAtEnd, String categoriesTaxonomy, Boolean categoriesConfident, List<String> categoriesId, List<String> notCategoriesId, List<Integer> categoriesLevel, List<Integer> notCategoriesLevel, List<String> entitiesTitleText, List<String> notEntitiesTitleText, List<String> entitiesTitleType, List<String> notEntitiesTitleType, List<String> entitiesTitleLinksDbpedia, List<String> notEntitiesTitleLinksDbpedia, List<String> entitiesBodyText, List<String> notEntitiesBodyText, List<String> entitiesBodyType, List<String> notEntitiesBodyType, List<String> entitiesBodyLinksDbpedia, List<String> notEntitiesBodyLinksDbpedia, String sentimentTitlePolarity, String notSentimentTitlePolarity, String sentimentBodyPolarity, String notSentimentBodyPolarity, Integer mediaImagesCountMin, Integer mediaImagesCountMax, Integer mediaImagesWidthMin, Integer mediaImagesWidthMax, Integer mediaImagesHeightMin, Integer mediaImagesHeightMax, Integer mediaImagesContentLengthMin, Integer mediaImagesContentLengthMax, List<String> mediaImagesFormat, List<String> notMediaImagesFormat, Integer mediaVideosCountMin, Integer mediaVideosCountMax, List<Integer> authorId, List<Integer> notAuthorId, String authorName, String notAuthorName, List<Integer> sourceId, List<Integer> notSourceId, List<String> sourceName, List<String> notSourceName, List<String> sourceDomain, List<String> notSourceDomain, List<String> sourceLocationsCountry, List<String> notSourceLocationsCountry, List<String> sourceLocationsState, List<String> notSourceLocationsState, List<String> sourceLocationsCity, List<String> notSourceLocationsCity, List<String> sourceScopesCountry, List<String> notSourceScopesCountry, List<String> sourceScopesState, List<String> notSourceScopesState, List<String> sourceScopesCity, List<String> notSourceScopesCity, List<String> sourceScopesLevel, List<String> notSourceScopesLevel, Integer sourceLinksInCountMin, Integer sourceLinksInCountMax, Integer sourceRankingsAlexaRankMin, Integer sourceRankingsAlexaRankMax, List<String> sourceRankingsAlexaCountry, Integer socialSharesCountFacebookMin, Integer socialSharesCountFacebookMax, Integer socialSharesCountGooglePlusMin, Integer socialSharesCountGooglePlusMax, Integer socialSharesCountLinkedinMin, Integer socialSharesCountLinkedinMax, Integer socialSharesCountRedditMin, Integer socialSharesCountRedditMax, List<String> clusters, List<String> _return, Long storyId, String storyUrl, String storyTitle, String storyBody, OffsetDateTime storyPublishedAt, String storyLanguage, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = listCoveragesValidateBeforeCall(id, notId, title, body, text, translationsEnTitle, translationsEnBody, translationsEnText, language, notLanguage, publishedAtStart, publishedAtEnd, categoriesTaxonomy, categoriesConfident, categoriesId, notCategoriesId, categoriesLevel, notCategoriesLevel, entitiesTitleText, notEntitiesTitleText, entitiesTitleType, notEntitiesTitleType, entitiesTitleLinksDbpedia, notEntitiesTitleLinksDbpedia, entitiesBodyText, notEntitiesBodyText, entitiesBodyType, notEntitiesBodyType, entitiesBodyLinksDbpedia, notEntitiesBodyLinksDbpedia, sentimentTitlePolarity, notSentimentTitlePolarity, sentimentBodyPolarity, notSentimentBodyPolarity, mediaImagesCountMin, mediaImagesCountMax, mediaImagesWidthMin, mediaImagesWidthMax, mediaImagesHeightMin, mediaImagesHeightMax, mediaImagesContentLengthMin, mediaImagesContentLengthMax, mediaImagesFormat, notMediaImagesFormat, mediaVideosCountMin, mediaVideosCountMax, authorId, notAuthorId, authorName, notAuthorName, sourceId, notSourceId, sourceName, notSourceName, sourceDomain, notSourceDomain, sourceLocationsCountry, notSourceLocationsCountry, sourceLocationsState, notSourceLocationsState, sourceLocationsCity, notSourceLocationsCity, sourceScopesCountry, notSourceScopesCountry, sourceScopesState, notSourceScopesState, sourceScopesCity, notSourceScopesCity, sourceScopesLevel, notSourceScopesLevel, sourceLinksInCountMin, sourceLinksInCountMax, sourceRankingsAlexaRankMin, sourceRankingsAlexaRankMax, sourceRankingsAlexaCountry, socialSharesCountFacebookMin, socialSharesCountFacebookMax, socialSharesCountGooglePlusMin, socialSharesCountGooglePlusMax, socialSharesCountLinkedinMin, socialSharesCountLinkedinMax, socialSharesCountRedditMin, socialSharesCountRedditMax, clusters, _return, storyId, storyUrl, storyTitle, storyBody, storyPublishedAt, storyLanguage, perPage, null);
        Type localVarReturnType = new TypeToken<Coverages>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCoveragesAsync(List<Long> id, List<Long> notId, String title, String body, String text, String translationsEnTitle, String translationsEnBody, String translationsEnText, List<String> language, List<String> notLanguage, String publishedAtStart, String publishedAtEnd, String categoriesTaxonomy, Boolean categoriesConfident, List<String> categoriesId, List<String> notCategoriesId, List<Integer> categoriesLevel, List<Integer> notCategoriesLevel, List<String> entitiesTitleText, List<String> notEntitiesTitleText, List<String> entitiesTitleType, List<String> notEntitiesTitleType, List<String> entitiesTitleLinksDbpedia, List<String> notEntitiesTitleLinksDbpedia, List<String> entitiesBodyText, List<String> notEntitiesBodyText, List<String> entitiesBodyType, List<String> notEntitiesBodyType, List<String> entitiesBodyLinksDbpedia, List<String> notEntitiesBodyLinksDbpedia, String sentimentTitlePolarity, String notSentimentTitlePolarity, String sentimentBodyPolarity, String notSentimentBodyPolarity, Integer mediaImagesCountMin, Integer mediaImagesCountMax, Integer mediaImagesWidthMin, Integer mediaImagesWidthMax, Integer mediaImagesHeightMin, Integer mediaImagesHeightMax, Integer mediaImagesContentLengthMin, Integer mediaImagesContentLengthMax, List<String> mediaImagesFormat, List<String> notMediaImagesFormat, Integer mediaVideosCountMin, Integer mediaVideosCountMax, List<Integer> authorId, List<Integer> notAuthorId, String authorName, String notAuthorName, List<Integer> sourceId, List<Integer> notSourceId, List<String> sourceName, List<String> notSourceName, List<String> sourceDomain, List<String> notSourceDomain, List<String> sourceLocationsCountry, List<String> notSourceLocationsCountry, List<String> sourceLocationsState, List<String> notSourceLocationsState, List<String> sourceLocationsCity, List<String> notSourceLocationsCity, List<String> sourceScopesCountry, List<String> notSourceScopesCountry, List<String> sourceScopesState, List<String> notSourceScopesState, List<String> sourceScopesCity, List<String> notSourceScopesCity, List<String> sourceScopesLevel, List<String> notSourceScopesLevel, Integer sourceLinksInCountMin, Integer sourceLinksInCountMax, Integer sourceRankingsAlexaRankMin, Integer sourceRankingsAlexaRankMax, List<String> sourceRankingsAlexaCountry, Integer socialSharesCountFacebookMin, Integer socialSharesCountFacebookMax, Integer socialSharesCountGooglePlusMin, Integer socialSharesCountGooglePlusMax, Integer socialSharesCountLinkedinMin, Integer socialSharesCountLinkedinMax, Integer socialSharesCountRedditMin, Integer socialSharesCountRedditMax, List<String> clusters, List<String> _return, Long storyId, String storyUrl, String storyTitle, String storyBody, OffsetDateTime storyPublishedAt, String storyLanguage, Integer perPage, final ApiCallback<Coverages> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCoveragesValidateBeforeCall(id, notId, title, body, text, translationsEnTitle, translationsEnBody, translationsEnText, language, notLanguage, publishedAtStart, publishedAtEnd, categoriesTaxonomy, categoriesConfident, categoriesId, notCategoriesId, categoriesLevel, notCategoriesLevel, entitiesTitleText, notEntitiesTitleText, entitiesTitleType, notEntitiesTitleType, entitiesTitleLinksDbpedia, notEntitiesTitleLinksDbpedia, entitiesBodyText, notEntitiesBodyText, entitiesBodyType, notEntitiesBodyType, entitiesBodyLinksDbpedia, notEntitiesBodyLinksDbpedia, sentimentTitlePolarity, notSentimentTitlePolarity, sentimentBodyPolarity, notSentimentBodyPolarity, mediaImagesCountMin, mediaImagesCountMax, mediaImagesWidthMin, mediaImagesWidthMax, mediaImagesHeightMin, mediaImagesHeightMax, mediaImagesContentLengthMin, mediaImagesContentLengthMax, mediaImagesFormat, notMediaImagesFormat, mediaVideosCountMin, mediaVideosCountMax, authorId, notAuthorId, authorName, notAuthorName, sourceId, notSourceId, sourceName, notSourceName, sourceDomain, notSourceDomain, sourceLocationsCountry, notSourceLocationsCountry, sourceLocationsState, notSourceLocationsState, sourceLocationsCity, notSourceLocationsCity, sourceScopesCountry, notSourceScopesCountry, sourceScopesState, notSourceScopesState, sourceScopesCity, notSourceScopesCity, sourceScopesLevel, notSourceScopesLevel, sourceLinksInCountMin, sourceLinksInCountMax, sourceRankingsAlexaRankMin, sourceRankingsAlexaRankMax, sourceRankingsAlexaCountry, socialSharesCountFacebookMin, socialSharesCountFacebookMax, socialSharesCountGooglePlusMin, socialSharesCountGooglePlusMax, socialSharesCountLinkedinMin, socialSharesCountLinkedinMax, socialSharesCountRedditMin, socialSharesCountRedditMax, clusters, _return, storyId, storyUrl, storyTitle, storyBody, storyPublishedAt, storyLanguage, perPage, _callback);
        Type localVarReturnType = new TypeToken<Coverages>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistCoveragesRequest {
        private List<Long> id;
        private List<Long> notId;
        private String title;
        private String body;
        private String text;
        private String translationsEnTitle;
        private String translationsEnBody;
        private String translationsEnText;
        private List<String> language;
        private List<String> notLanguage;
        private String publishedAtStart;
        private String publishedAtEnd;
        private String categoriesTaxonomy;
        private Boolean categoriesConfident;
        private List<String> categoriesId;
        private List<String> notCategoriesId;
        private List<Integer> categoriesLevel;
        private List<Integer> notCategoriesLevel;
        private List<String> entitiesTitleText;
        private List<String> notEntitiesTitleText;
        private List<String> entitiesTitleType;
        private List<String> notEntitiesTitleType;
        private List<String> entitiesTitleLinksDbpedia;
        private List<String> notEntitiesTitleLinksDbpedia;
        private List<String> entitiesBodyText;
        private List<String> notEntitiesBodyText;
        private List<String> entitiesBodyType;
        private List<String> notEntitiesBodyType;
        private List<String> entitiesBodyLinksDbpedia;
        private List<String> notEntitiesBodyLinksDbpedia;
        private String sentimentTitlePolarity;
        private String notSentimentTitlePolarity;
        private String sentimentBodyPolarity;
        private String notSentimentBodyPolarity;
        private Integer mediaImagesCountMin;
        private Integer mediaImagesCountMax;
        private Integer mediaImagesWidthMin;
        private Integer mediaImagesWidthMax;
        private Integer mediaImagesHeightMin;
        private Integer mediaImagesHeightMax;
        private Integer mediaImagesContentLengthMin;
        private Integer mediaImagesContentLengthMax;
        private List<String> mediaImagesFormat;
        private List<String> notMediaImagesFormat;
        private Integer mediaVideosCountMin;
        private Integer mediaVideosCountMax;
        private List<Integer> authorId;
        private List<Integer> notAuthorId;
        private String authorName;
        private String notAuthorName;
        private List<Integer> sourceId;
        private List<Integer> notSourceId;
        private List<String> sourceName;
        private List<String> notSourceName;
        private List<String> sourceDomain;
        private List<String> notSourceDomain;
        private List<String> sourceLocationsCountry;
        private List<String> notSourceLocationsCountry;
        private List<String> sourceLocationsState;
        private List<String> notSourceLocationsState;
        private List<String> sourceLocationsCity;
        private List<String> notSourceLocationsCity;
        private List<String> sourceScopesCountry;
        private List<String> notSourceScopesCountry;
        private List<String> sourceScopesState;
        private List<String> notSourceScopesState;
        private List<String> sourceScopesCity;
        private List<String> notSourceScopesCity;
        private List<String> sourceScopesLevel;
        private List<String> notSourceScopesLevel;
        private Integer sourceLinksInCountMin;
        private Integer sourceLinksInCountMax;
        private Integer sourceRankingsAlexaRankMin;
        private Integer sourceRankingsAlexaRankMax;
        private List<String> sourceRankingsAlexaCountry;
        private Integer socialSharesCountFacebookMin;
        private Integer socialSharesCountFacebookMax;
        private Integer socialSharesCountGooglePlusMin;
        private Integer socialSharesCountGooglePlusMax;
        private Integer socialSharesCountLinkedinMin;
        private Integer socialSharesCountLinkedinMax;
        private Integer socialSharesCountRedditMin;
        private Integer socialSharesCountRedditMax;
        private List<String> clusters;
        private List<String> _return;
        private Long storyId;
        private String storyUrl;
        private String storyTitle;
        private String storyBody;
        private OffsetDateTime storyPublishedAt;
        private String storyLanguage;
        private Integer perPage;

        private APIlistCoveragesRequest() {
        }

        /**
         * Set id
         * @param id This parameter is used for finding stories by story id.  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest id(List<Long> id) {
            this.id = id;
            return this;
        }

        /**
         * Set notId
         * @param notId This parameter is used for excluding stories by story id.  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest notId(List<Long> notId) {
            this.notId = notId;
            return this;
        }

        /**
         * Set title
         * @param title This parameter is used for finding stories whose title contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators).  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest title(String title) {
            this.title = title;
            return this;
        }

        /**
         * Set body
         * @param body This parameter is used for finding stories whose body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators).  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest body(String body) {
            this.body = body;
            return this;
        }

        /**
         * Set text
         * @param text This parameter is used for finding stories whose title or body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators).  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest text(String text) {
            this.text = text;
            return this;
        }

        /**
         * Set translationsEnTitle
         * @param translationsEnTitle This parameter is used for finding stories whose translation title contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators).  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest translationsEnTitle(String translationsEnTitle) {
            this.translationsEnTitle = translationsEnTitle;
            return this;
        }

        /**
         * Set translationsEnBody
         * @param translationsEnBody This parameter is used for finding stories whose translation body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators).  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest translationsEnBody(String translationsEnBody) {
            this.translationsEnBody = translationsEnBody;
            return this;
        }

        /**
         * Set translationsEnText
         * @param translationsEnText This parameter is used for finding stories whose translation title or body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators).  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest translationsEnText(String translationsEnText) {
            this.translationsEnText = translationsEnText;
            return this;
        }

        /**
         * Set language
         * @param language This parameter is used for finding stories whose language is the specified value. It supports [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language codes.  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest language(List<String> language) {
            this.language = language;
            return this;
        }

        /**
         * Set notLanguage
         * @param notLanguage This parameter is used for excluding stories whose language is the specified value. It supports [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language codes.  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest notLanguage(List<String> notLanguage) {
            this.notLanguage = notLanguage;
            return this;
        }

        /**
         * Set publishedAtStart
         * @param publishedAtStart This parameter is used for finding stories whose published at time is greater than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates).  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest publishedAtStart(String publishedAtStart) {
            this.publishedAtStart = publishedAtStart;
            return this;
        }

        /**
         * Set publishedAtEnd
         * @param publishedAtEnd This parameter is used for finding stories whose published at time is less than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates).  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest publishedAtEnd(String publishedAtEnd) {
            this.publishedAtEnd = publishedAtEnd;
            return this;
        }

        /**
         * Set categoriesTaxonomy
         * @param categoriesTaxonomy This parameter is used for defining the type of the taxonomy for the rest of the categories queries. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories).  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest categoriesTaxonomy(String categoriesTaxonomy) {
            this.categoriesTaxonomy = categoriesTaxonomy;
            return this;
        }

        /**
         * Set categoriesConfident
         * @param categoriesConfident This parameter is used for finding stories whose categories are confident. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories).  (optional, default to true)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest categoriesConfident(Boolean categoriesConfident) {
            this.categoriesConfident = categoriesConfident;
            return this;
        }

        /**
         * Set categoriesId
         * @param categoriesId This parameter is used for finding stories by categories id. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories).  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest categoriesId(List<String> categoriesId) {
            this.categoriesId = categoriesId;
            return this;
        }

        /**
         * Set notCategoriesId
         * @param notCategoriesId This parameter is used for excluding stories by categories id. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories).  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest notCategoriesId(List<String> notCategoriesId) {
            this.notCategoriesId = notCategoriesId;
            return this;
        }

        /**
         * Set categoriesLevel
         * @param categoriesLevel This parameter is used for finding stories by categories level. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories).  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest categoriesLevel(List<Integer> categoriesLevel) {
            this.categoriesLevel = categoriesLevel;
            return this;
        }

        /**
         * Set notCategoriesLevel
         * @param notCategoriesLevel This parameter is used for excluding stories by categories level. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories).  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest notCategoriesLevel(List<Integer> notCategoriesLevel) {
            this.notCategoriesLevel = notCategoriesLevel;
            return this;
        }

        /**
         * Set entitiesTitleText
         * @param entitiesTitleText This parameter is used to find stories based on the specified entities &#x60;text&#x60; in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest entitiesTitleText(List<String> entitiesTitleText) {
            this.entitiesTitleText = entitiesTitleText;
            return this;
        }

        /**
         * Set notEntitiesTitleText
         * @param notEntitiesTitleText This parameter is used to exclude stories based on the specified entities &#x60;text&#x60; in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest notEntitiesTitleText(List<String> notEntitiesTitleText) {
            this.notEntitiesTitleText = notEntitiesTitleText;
            return this;
        }

        /**
         * Set entitiesTitleType
         * @param entitiesTitleType This parameter is used to find stories based on the specified entities &#x60;type&#x60; in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest entitiesTitleType(List<String> entitiesTitleType) {
            this.entitiesTitleType = entitiesTitleType;
            return this;
        }

        /**
         * Set notEntitiesTitleType
         * @param notEntitiesTitleType This parameter is used to exclude stories based on the specified entities &#x60;type&#x60; in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest notEntitiesTitleType(List<String> notEntitiesTitleType) {
            this.notEntitiesTitleType = notEntitiesTitleType;
            return this;
        }

        /**
         * Set entitiesTitleLinksDbpedia
         * @param entitiesTitleLinksDbpedia This parameter is used to find stories based on the specified entities dbpedia URL in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest entitiesTitleLinksDbpedia(List<String> entitiesTitleLinksDbpedia) {
            this.entitiesTitleLinksDbpedia = entitiesTitleLinksDbpedia;
            return this;
        }

        /**
         * Set notEntitiesTitleLinksDbpedia
         * @param notEntitiesTitleLinksDbpedia This parameter is used to exclude stories based on the specified entities dbpedia URL in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest notEntitiesTitleLinksDbpedia(List<String> notEntitiesTitleLinksDbpedia) {
            this.notEntitiesTitleLinksDbpedia = notEntitiesTitleLinksDbpedia;
            return this;
        }

        /**
         * Set entitiesBodyText
         * @param entitiesBodyText This parameter is used to find stories based on the specified entities &#x60;text&#x60; in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest entitiesBodyText(List<String> entitiesBodyText) {
            this.entitiesBodyText = entitiesBodyText;
            return this;
        }

        /**
         * Set notEntitiesBodyText
         * @param notEntitiesBodyText This parameter is used to exclude stories based on the specified entities &#x60;text&#x60; in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest notEntitiesBodyText(List<String> notEntitiesBodyText) {
            this.notEntitiesBodyText = notEntitiesBodyText;
            return this;
        }

        /**
         * Set entitiesBodyType
         * @param entitiesBodyType This parameter is used to find stories based on the specified entities &#x60;type&#x60; in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest entitiesBodyType(List<String> entitiesBodyType) {
            this.entitiesBodyType = entitiesBodyType;
            return this;
        }

        /**
         * Set notEntitiesBodyType
         * @param notEntitiesBodyType This parameter is used to exclude stories based on the specified entities &#x60;type&#x60; in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest notEntitiesBodyType(List<String> notEntitiesBodyType) {
            this.notEntitiesBodyType = notEntitiesBodyType;
            return this;
        }

        /**
         * Set entitiesBodyLinksDbpedia
         * @param entitiesBodyLinksDbpedia This parameter is used to find stories based on the specified entities dbpedia URL in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest entitiesBodyLinksDbpedia(List<String> entitiesBodyLinksDbpedia) {
            this.entitiesBodyLinksDbpedia = entitiesBodyLinksDbpedia;
            return this;
        }

        /**
         * Set notEntitiesBodyLinksDbpedia
         * @param notEntitiesBodyLinksDbpedia This parameter is used to exclude stories based on the specified entities dbpedia URL in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest notEntitiesBodyLinksDbpedia(List<String> notEntitiesBodyLinksDbpedia) {
            this.notEntitiesBodyLinksDbpedia = notEntitiesBodyLinksDbpedia;
            return this;
        }

        /**
         * Set sentimentTitlePolarity
         * @param sentimentTitlePolarity This parameter is used for finding stories whose title sentiment is the specified value.  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest sentimentTitlePolarity(String sentimentTitlePolarity) {
            this.sentimentTitlePolarity = sentimentTitlePolarity;
            return this;
        }

        /**
         * Set notSentimentTitlePolarity
         * @param notSentimentTitlePolarity This parameter is used for excluding stories whose title sentiment is the specified value.  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest notSentimentTitlePolarity(String notSentimentTitlePolarity) {
            this.notSentimentTitlePolarity = notSentimentTitlePolarity;
            return this;
        }

        /**
         * Set sentimentBodyPolarity
         * @param sentimentBodyPolarity This parameter is used for finding stories whose body sentiment is the specified value.  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest sentimentBodyPolarity(String sentimentBodyPolarity) {
            this.sentimentBodyPolarity = sentimentBodyPolarity;
            return this;
        }

        /**
         * Set notSentimentBodyPolarity
         * @param notSentimentBodyPolarity This parameter is used for excluding stories whose body sentiment is the specified value.  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest notSentimentBodyPolarity(String notSentimentBodyPolarity) {
            this.notSentimentBodyPolarity = notSentimentBodyPolarity;
            return this;
        }

        /**
         * Set mediaImagesCountMin
         * @param mediaImagesCountMin This parameter is used for finding stories whose number of images is greater than or equal to the specified value.  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest mediaImagesCountMin(Integer mediaImagesCountMin) {
            this.mediaImagesCountMin = mediaImagesCountMin;
            return this;
        }

        /**
         * Set mediaImagesCountMax
         * @param mediaImagesCountMax This parameter is used for finding stories whose number of images is less than or equal to the specified value.  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest mediaImagesCountMax(Integer mediaImagesCountMax) {
            this.mediaImagesCountMax = mediaImagesCountMax;
            return this;
        }

        /**
         * Set mediaImagesWidthMin
         * @param mediaImagesWidthMin This parameter is used for finding stories whose width of images are greater than or equal to the specified value.  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest mediaImagesWidthMin(Integer mediaImagesWidthMin) {
            this.mediaImagesWidthMin = mediaImagesWidthMin;
            return this;
        }

        /**
         * Set mediaImagesWidthMax
         * @param mediaImagesWidthMax This parameter is used for finding stories whose width of images are less than or equal to the specified value.  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest mediaImagesWidthMax(Integer mediaImagesWidthMax) {
            this.mediaImagesWidthMax = mediaImagesWidthMax;
            return this;
        }

        /**
         * Set mediaImagesHeightMin
         * @param mediaImagesHeightMin This parameter is used for finding stories whose height of images are greater than or equal to the specified value.  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest mediaImagesHeightMin(Integer mediaImagesHeightMin) {
            this.mediaImagesHeightMin = mediaImagesHeightMin;
            return this;
        }

        /**
         * Set mediaImagesHeightMax
         * @param mediaImagesHeightMax This parameter is used for finding stories whose height of images are less than or equal to the specified value.  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest mediaImagesHeightMax(Integer mediaImagesHeightMax) {
            this.mediaImagesHeightMax = mediaImagesHeightMax;
            return this;
        }

        /**
         * Set mediaImagesContentLengthMin
         * @param mediaImagesContentLengthMin This parameter is used for finding stories whose images content length are greater than or equal to the specified value.  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest mediaImagesContentLengthMin(Integer mediaImagesContentLengthMin) {
            this.mediaImagesContentLengthMin = mediaImagesContentLengthMin;
            return this;
        }

        /**
         * Set mediaImagesContentLengthMax
         * @param mediaImagesContentLengthMax This parameter is used for finding stories whose images content length are less than or equal to the specified value.  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest mediaImagesContentLengthMax(Integer mediaImagesContentLengthMax) {
            this.mediaImagesContentLengthMax = mediaImagesContentLengthMax;
            return this;
        }

        /**
         * Set mediaImagesFormat
         * @param mediaImagesFormat This parameter is used for finding stories whose images format are the specified value.  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest mediaImagesFormat(List<String> mediaImagesFormat) {
            this.mediaImagesFormat = mediaImagesFormat;
            return this;
        }

        /**
         * Set notMediaImagesFormat
         * @param notMediaImagesFormat This parameter is used for excluding stories whose images format are the specified value.  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest notMediaImagesFormat(List<String> notMediaImagesFormat) {
            this.notMediaImagesFormat = notMediaImagesFormat;
            return this;
        }

        /**
         * Set mediaVideosCountMin
         * @param mediaVideosCountMin This parameter is used for finding stories whose number of videos is greater than or equal to the specified value.  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest mediaVideosCountMin(Integer mediaVideosCountMin) {
            this.mediaVideosCountMin = mediaVideosCountMin;
            return this;
        }

        /**
         * Set mediaVideosCountMax
         * @param mediaVideosCountMax This parameter is used for finding stories whose number of videos is less than or equal to the specified value.  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest mediaVideosCountMax(Integer mediaVideosCountMax) {
            this.mediaVideosCountMax = mediaVideosCountMax;
            return this;
        }

        /**
         * Set authorId
         * @param authorId This parameter is used for finding stories whose author id is the specified value.  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest authorId(List<Integer> authorId) {
            this.authorId = authorId;
            return this;
        }

        /**
         * Set notAuthorId
         * @param notAuthorId This parameter is used for excluding stories whose author id is the specified value.  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest notAuthorId(List<Integer> notAuthorId) {
            this.notAuthorId = notAuthorId;
            return this;
        }

        /**
         * Set authorName
         * @param authorName This parameter is used for finding stories whose author full name contains the specified value.  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest authorName(String authorName) {
            this.authorName = authorName;
            return this;
        }

        /**
         * Set notAuthorName
         * @param notAuthorName This parameter is used for excluding stories whose author full name contains the specified value.  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest notAuthorName(String notAuthorName) {
            this.notAuthorName = notAuthorName;
            return this;
        }

        /**
         * Set sourceId
         * @param sourceId This parameter is used for finding stories whose source id is the specified value.  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest sourceId(List<Integer> sourceId) {
            this.sourceId = sourceId;
            return this;
        }

        /**
         * Set notSourceId
         * @param notSourceId This parameter is used for excluding stories whose source id is the specified value.  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest notSourceId(List<Integer> notSourceId) {
            this.notSourceId = notSourceId;
            return this;
        }

        /**
         * Set sourceName
         * @param sourceName This parameter is used for finding stories whose source name contains the specified value.  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest sourceName(List<String> sourceName) {
            this.sourceName = sourceName;
            return this;
        }

        /**
         * Set notSourceName
         * @param notSourceName This parameter is used for excluding stories whose source name contains the specified value.  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest notSourceName(List<String> notSourceName) {
            this.notSourceName = notSourceName;
            return this;
        }

        /**
         * Set sourceDomain
         * @param sourceDomain This parameter is used for finding stories whose source domain is the specified value.  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest sourceDomain(List<String> sourceDomain) {
            this.sourceDomain = sourceDomain;
            return this;
        }

        /**
         * Set notSourceDomain
         * @param notSourceDomain This parameter is used for excluding stories whose source domain is the specified value.  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest notSourceDomain(List<String> notSourceDomain) {
            this.notSourceDomain = notSourceDomain;
            return this;
        }

        /**
         * Set sourceLocationsCountry
         * @param sourceLocationsCountry This parameter is used for finding stories whose source country is the specified value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest sourceLocationsCountry(List<String> sourceLocationsCountry) {
            this.sourceLocationsCountry = sourceLocationsCountry;
            return this;
        }

        /**
         * Set notSourceLocationsCountry
         * @param notSourceLocationsCountry This parameter is used for excluding stories whose source country is the specified value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest notSourceLocationsCountry(List<String> notSourceLocationsCountry) {
            this.notSourceLocationsCountry = notSourceLocationsCountry;
            return this;
        }

        /**
         * Set sourceLocationsState
         * @param sourceLocationsState This parameter is used for finding stories whose source state/province is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest sourceLocationsState(List<String> sourceLocationsState) {
            this.sourceLocationsState = sourceLocationsState;
            return this;
        }

        /**
         * Set notSourceLocationsState
         * @param notSourceLocationsState This parameter is used for excluding stories whose source state/province is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest notSourceLocationsState(List<String> notSourceLocationsState) {
            this.notSourceLocationsState = notSourceLocationsState;
            return this;
        }

        /**
         * Set sourceLocationsCity
         * @param sourceLocationsCity This parameter is used for finding stories whose source city is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest sourceLocationsCity(List<String> sourceLocationsCity) {
            this.sourceLocationsCity = sourceLocationsCity;
            return this;
        }

        /**
         * Set notSourceLocationsCity
         * @param notSourceLocationsCity This parameter is used for excluding stories whose source city is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest notSourceLocationsCity(List<String> notSourceLocationsCity) {
            this.notSourceLocationsCity = notSourceLocationsCity;
            return this;
        }

        /**
         * Set sourceScopesCountry
         * @param sourceScopesCountry This parameter is used for finding stories whose source scopes is the specified country value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest sourceScopesCountry(List<String> sourceScopesCountry) {
            this.sourceScopesCountry = sourceScopesCountry;
            return this;
        }

        /**
         * Set notSourceScopesCountry
         * @param notSourceScopesCountry This parameter is used for excluding stories whose source scopes is the specified country value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest notSourceScopesCountry(List<String> notSourceScopesCountry) {
            this.notSourceScopesCountry = notSourceScopesCountry;
            return this;
        }

        /**
         * Set sourceScopesState
         * @param sourceScopesState This parameter is used for finding stories whose source scopes is the specified state/province value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest sourceScopesState(List<String> sourceScopesState) {
            this.sourceScopesState = sourceScopesState;
            return this;
        }

        /**
         * Set notSourceScopesState
         * @param notSourceScopesState This parameter is used for excluding stories whose source scopes is the specified state/province value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest notSourceScopesState(List<String> notSourceScopesState) {
            this.notSourceScopesState = notSourceScopesState;
            return this;
        }

        /**
         * Set sourceScopesCity
         * @param sourceScopesCity This parameter is used for finding stories whose source scopes is the specified city value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest sourceScopesCity(List<String> sourceScopesCity) {
            this.sourceScopesCity = sourceScopesCity;
            return this;
        }

        /**
         * Set notSourceScopesCity
         * @param notSourceScopesCity This parameter is used for excluding stories whose source scopes is the specified city value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest notSourceScopesCity(List<String> notSourceScopesCity) {
            this.notSourceScopesCity = notSourceScopesCity;
            return this;
        }

        /**
         * Set sourceScopesLevel
         * @param sourceScopesLevel This parameter is used for finding stories whose source scopes is the specified level value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest sourceScopesLevel(List<String> sourceScopesLevel) {
            this.sourceScopesLevel = sourceScopesLevel;
            return this;
        }

        /**
         * Set notSourceScopesLevel
         * @param notSourceScopesLevel This parameter is used for excluding stories whose source scopes is the specified level value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest notSourceScopesLevel(List<String> notSourceScopesLevel) {
            this.notSourceScopesLevel = notSourceScopesLevel;
            return this;
        }

        /**
         * Set sourceLinksInCountMin
         * @param sourceLinksInCountMin This parameter is used for finding stories from sources whose Links in count is greater than or equal to the specified value. You can read more about working with Links in count [here](https://newsapi.aylien.com/docs/working-with-links-in-count).  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest sourceLinksInCountMin(Integer sourceLinksInCountMin) {
            this.sourceLinksInCountMin = sourceLinksInCountMin;
            return this;
        }

        /**
         * Set sourceLinksInCountMax
         * @param sourceLinksInCountMax This parameter is used for finding stories from sources whose Links in count is less than or equal to the specified value. You can read more about working with Links in count [here](https://newsapi.aylien.com/docs/working-with-links-in-count).  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest sourceLinksInCountMax(Integer sourceLinksInCountMax) {
            this.sourceLinksInCountMax = sourceLinksInCountMax;
            return this;
        }

        /**
         * Set sourceRankingsAlexaRankMin
         * @param sourceRankingsAlexaRankMin This parameter is used for finding stories from sources whose Alexa rank is greater than or equal to the specified value. You can read more about working with Alexa ranks [here](https://newsapi.aylien.com/docs/working-with-alexa-ranks).  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest sourceRankingsAlexaRankMin(Integer sourceRankingsAlexaRankMin) {
            this.sourceRankingsAlexaRankMin = sourceRankingsAlexaRankMin;
            return this;
        }

        /**
         * Set sourceRankingsAlexaRankMax
         * @param sourceRankingsAlexaRankMax This parameter is used for finding stories from sources whose Alexa rank is less than or equal to the specified value. You can read more about working with Alexa ranks [here](https://newsapi.aylien.com/docs/working-with-alexa-ranks).  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest sourceRankingsAlexaRankMax(Integer sourceRankingsAlexaRankMax) {
            this.sourceRankingsAlexaRankMax = sourceRankingsAlexaRankMax;
            return this;
        }

        /**
         * Set sourceRankingsAlexaCountry
         * @param sourceRankingsAlexaCountry This parameter is used for finding stories from sources whose Alexa rank is in the specified country value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. You can read more about working with Alexa ranks [here](https://newsapi.aylien.com/docs/working-with-alexa-ranks).  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest sourceRankingsAlexaCountry(List<String> sourceRankingsAlexaCountry) {
            this.sourceRankingsAlexaCountry = sourceRankingsAlexaCountry;
            return this;
        }

        /**
         * Set socialSharesCountFacebookMin
         * @param socialSharesCountFacebookMin This parameter is used for finding stories whose Facebook social shares count is greater than or equal to the specified value.  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest socialSharesCountFacebookMin(Integer socialSharesCountFacebookMin) {
            this.socialSharesCountFacebookMin = socialSharesCountFacebookMin;
            return this;
        }

        /**
         * Set socialSharesCountFacebookMax
         * @param socialSharesCountFacebookMax This parameter is used for finding stories whose Facebook social shares count is less than or equal to the specified value.  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest socialSharesCountFacebookMax(Integer socialSharesCountFacebookMax) {
            this.socialSharesCountFacebookMax = socialSharesCountFacebookMax;
            return this;
        }

        /**
         * Set socialSharesCountGooglePlusMin
         * @param socialSharesCountGooglePlusMin This parameter is used for finding stories whose Google+ social shares count is greater than or equal to the specified value.  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest socialSharesCountGooglePlusMin(Integer socialSharesCountGooglePlusMin) {
            this.socialSharesCountGooglePlusMin = socialSharesCountGooglePlusMin;
            return this;
        }

        /**
         * Set socialSharesCountGooglePlusMax
         * @param socialSharesCountGooglePlusMax This parameter is used for finding stories whose Google+ social shares count is less than or equal to the specified value.  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest socialSharesCountGooglePlusMax(Integer socialSharesCountGooglePlusMax) {
            this.socialSharesCountGooglePlusMax = socialSharesCountGooglePlusMax;
            return this;
        }

        /**
         * Set socialSharesCountLinkedinMin
         * @param socialSharesCountLinkedinMin This parameter is used for finding stories whose LinkedIn social shares count is greater than or equal to the specified value.  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest socialSharesCountLinkedinMin(Integer socialSharesCountLinkedinMin) {
            this.socialSharesCountLinkedinMin = socialSharesCountLinkedinMin;
            return this;
        }

        /**
         * Set socialSharesCountLinkedinMax
         * @param socialSharesCountLinkedinMax This parameter is used for finding stories whose LinkedIn social shares count is less than or equal to the specified value.  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest socialSharesCountLinkedinMax(Integer socialSharesCountLinkedinMax) {
            this.socialSharesCountLinkedinMax = socialSharesCountLinkedinMax;
            return this;
        }

        /**
         * Set socialSharesCountRedditMin
         * @param socialSharesCountRedditMin This parameter is used for finding stories whose Reddit social shares count is greater than or equal to the specified value.  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest socialSharesCountRedditMin(Integer socialSharesCountRedditMin) {
            this.socialSharesCountRedditMin = socialSharesCountRedditMin;
            return this;
        }

        /**
         * Set socialSharesCountRedditMax
         * @param socialSharesCountRedditMax This parameter is used for finding stories whose Reddit social shares count is less than or equal to the specified value.  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest socialSharesCountRedditMax(Integer socialSharesCountRedditMax) {
            this.socialSharesCountRedditMax = socialSharesCountRedditMax;
            return this;
        }

        /**
         * Set clusters
         * @param clusters This parameter is used for finding stories with belonging to one of clusters in a specific set of clusters You can read more about working with clustering [here](https://newsapi.aylien.com/docs/working-with-clustering).  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest clusters(List<String> clusters) {
            this.clusters = clusters;
            return this;
        }

        /**
         * Set _return
         * @param _return This parameter is used for specifying return fields. (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest _return(List<String> _return) {
            this._return = _return;
            return this;
        }

        /**
         * Set storyId
         * @param storyId A story id (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest storyId(Long storyId) {
            this.storyId = storyId;
            return this;
        }

        /**
         * Set storyUrl
         * @param storyUrl An article or webpage (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest storyUrl(String storyUrl) {
            this.storyUrl = storyUrl;
            return this;
        }

        /**
         * Set storyTitle
         * @param storyTitle Title of the article (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest storyTitle(String storyTitle) {
            this.storyTitle = storyTitle;
            return this;
        }

        /**
         * Set storyBody
         * @param storyBody Body of the article (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest storyBody(String storyBody) {
            this.storyBody = storyBody;
            return this;
        }

        /**
         * Set storyPublishedAt
         * @param storyPublishedAt Publish date of the article. If you use a url or title and body of an article for getting coverages, this parameter is required. The format used is a restricted form of the canonical representation of dateTime in the [XML Schema specification (ISO 8601)](https://www.w3.org/TR/xmlschema-2/#dateTime).  (optional)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest storyPublishedAt(OffsetDateTime storyPublishedAt) {
            this.storyPublishedAt = storyPublishedAt;
            return this;
        }

        /**
         * Set storyLanguage
         * @param storyLanguage This parameter is used for setting the language of the story. It supports [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language codes.  (optional, default to auto)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest storyLanguage(String storyLanguage) {
            this.storyLanguage = storyLanguage;
            return this;
        }

        /**
         * Set perPage
         * @param perPage This parameter is used for specifying number of items in each page.  (optional, default to 3)
         * @return APIlistCoveragesRequest
         */
        public APIlistCoveragesRequest perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }

        /**
         * Build call for listCoverages
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An object including an array of coverages </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCoveragesCall(id, notId, title, body, text, translationsEnTitle, translationsEnBody, translationsEnText, language, notLanguage, publishedAtStart, publishedAtEnd, categoriesTaxonomy, categoriesConfident, categoriesId, notCategoriesId, categoriesLevel, notCategoriesLevel, entitiesTitleText, notEntitiesTitleText, entitiesTitleType, notEntitiesTitleType, entitiesTitleLinksDbpedia, notEntitiesTitleLinksDbpedia, entitiesBodyText, notEntitiesBodyText, entitiesBodyType, notEntitiesBodyType, entitiesBodyLinksDbpedia, notEntitiesBodyLinksDbpedia, sentimentTitlePolarity, notSentimentTitlePolarity, sentimentBodyPolarity, notSentimentBodyPolarity, mediaImagesCountMin, mediaImagesCountMax, mediaImagesWidthMin, mediaImagesWidthMax, mediaImagesHeightMin, mediaImagesHeightMax, mediaImagesContentLengthMin, mediaImagesContentLengthMax, mediaImagesFormat, notMediaImagesFormat, mediaVideosCountMin, mediaVideosCountMax, authorId, notAuthorId, authorName, notAuthorName, sourceId, notSourceId, sourceName, notSourceName, sourceDomain, notSourceDomain, sourceLocationsCountry, notSourceLocationsCountry, sourceLocationsState, notSourceLocationsState, sourceLocationsCity, notSourceLocationsCity, sourceScopesCountry, notSourceScopesCountry, sourceScopesState, notSourceScopesState, sourceScopesCity, notSourceScopesCity, sourceScopesLevel, notSourceScopesLevel, sourceLinksInCountMin, sourceLinksInCountMax, sourceRankingsAlexaRankMin, sourceRankingsAlexaRankMax, sourceRankingsAlexaCountry, socialSharesCountFacebookMin, socialSharesCountFacebookMax, socialSharesCountGooglePlusMin, socialSharesCountGooglePlusMax, socialSharesCountLinkedinMin, socialSharesCountLinkedinMax, socialSharesCountRedditMin, socialSharesCountRedditMax, clusters, _return, storyId, storyUrl, storyTitle, storyBody, storyPublishedAt, storyLanguage, perPage, _callback);
        }

        /**
         * Execute listCoverages request
         * @return Coverages
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An object including an array of coverages </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public Coverages execute() throws ApiException {
            ApiResponse<Coverages> localVarResp = listCoveragesWithHttpInfo(id, notId, title, body, text, translationsEnTitle, translationsEnBody, translationsEnText, language, notLanguage, publishedAtStart, publishedAtEnd, categoriesTaxonomy, categoriesConfident, categoriesId, notCategoriesId, categoriesLevel, notCategoriesLevel, entitiesTitleText, notEntitiesTitleText, entitiesTitleType, notEntitiesTitleType, entitiesTitleLinksDbpedia, notEntitiesTitleLinksDbpedia, entitiesBodyText, notEntitiesBodyText, entitiesBodyType, notEntitiesBodyType, entitiesBodyLinksDbpedia, notEntitiesBodyLinksDbpedia, sentimentTitlePolarity, notSentimentTitlePolarity, sentimentBodyPolarity, notSentimentBodyPolarity, mediaImagesCountMin, mediaImagesCountMax, mediaImagesWidthMin, mediaImagesWidthMax, mediaImagesHeightMin, mediaImagesHeightMax, mediaImagesContentLengthMin, mediaImagesContentLengthMax, mediaImagesFormat, notMediaImagesFormat, mediaVideosCountMin, mediaVideosCountMax, authorId, notAuthorId, authorName, notAuthorName, sourceId, notSourceId, sourceName, notSourceName, sourceDomain, notSourceDomain, sourceLocationsCountry, notSourceLocationsCountry, sourceLocationsState, notSourceLocationsState, sourceLocationsCity, notSourceLocationsCity, sourceScopesCountry, notSourceScopesCountry, sourceScopesState, notSourceScopesState, sourceScopesCity, notSourceScopesCity, sourceScopesLevel, notSourceScopesLevel, sourceLinksInCountMin, sourceLinksInCountMax, sourceRankingsAlexaRankMin, sourceRankingsAlexaRankMax, sourceRankingsAlexaCountry, socialSharesCountFacebookMin, socialSharesCountFacebookMax, socialSharesCountGooglePlusMin, socialSharesCountGooglePlusMax, socialSharesCountLinkedinMin, socialSharesCountLinkedinMax, socialSharesCountRedditMin, socialSharesCountRedditMax, clusters, _return, storyId, storyUrl, storyTitle, storyBody, storyPublishedAt, storyLanguage, perPage);
            return localVarResp.getData();
        }

        /**
         * Execute listCoverages request with HTTP info returned
         * @return ApiResponse&lt;Coverages&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An object including an array of coverages </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Coverages> executeWithHttpInfo() throws ApiException {
            return listCoveragesWithHttpInfo(id, notId, title, body, text, translationsEnTitle, translationsEnBody, translationsEnText, language, notLanguage, publishedAtStart, publishedAtEnd, categoriesTaxonomy, categoriesConfident, categoriesId, notCategoriesId, categoriesLevel, notCategoriesLevel, entitiesTitleText, notEntitiesTitleText, entitiesTitleType, notEntitiesTitleType, entitiesTitleLinksDbpedia, notEntitiesTitleLinksDbpedia, entitiesBodyText, notEntitiesBodyText, entitiesBodyType, notEntitiesBodyType, entitiesBodyLinksDbpedia, notEntitiesBodyLinksDbpedia, sentimentTitlePolarity, notSentimentTitlePolarity, sentimentBodyPolarity, notSentimentBodyPolarity, mediaImagesCountMin, mediaImagesCountMax, mediaImagesWidthMin, mediaImagesWidthMax, mediaImagesHeightMin, mediaImagesHeightMax, mediaImagesContentLengthMin, mediaImagesContentLengthMax, mediaImagesFormat, notMediaImagesFormat, mediaVideosCountMin, mediaVideosCountMax, authorId, notAuthorId, authorName, notAuthorName, sourceId, notSourceId, sourceName, notSourceName, sourceDomain, notSourceDomain, sourceLocationsCountry, notSourceLocationsCountry, sourceLocationsState, notSourceLocationsState, sourceLocationsCity, notSourceLocationsCity, sourceScopesCountry, notSourceScopesCountry, sourceScopesState, notSourceScopesState, sourceScopesCity, notSourceScopesCity, sourceScopesLevel, notSourceScopesLevel, sourceLinksInCountMin, sourceLinksInCountMax, sourceRankingsAlexaRankMin, sourceRankingsAlexaRankMax, sourceRankingsAlexaCountry, socialSharesCountFacebookMin, socialSharesCountFacebookMax, socialSharesCountGooglePlusMin, socialSharesCountGooglePlusMax, socialSharesCountLinkedinMin, socialSharesCountLinkedinMax, socialSharesCountRedditMin, socialSharesCountRedditMax, clusters, _return, storyId, storyUrl, storyTitle, storyBody, storyPublishedAt, storyLanguage, perPage);
        }

        /**
         * Execute listCoverages request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An object including an array of coverages </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Coverages> _callback) throws ApiException {
            return listCoveragesAsync(id, notId, title, body, text, translationsEnTitle, translationsEnBody, translationsEnText, language, notLanguage, publishedAtStart, publishedAtEnd, categoriesTaxonomy, categoriesConfident, categoriesId, notCategoriesId, categoriesLevel, notCategoriesLevel, entitiesTitleText, notEntitiesTitleText, entitiesTitleType, notEntitiesTitleType, entitiesTitleLinksDbpedia, notEntitiesTitleLinksDbpedia, entitiesBodyText, notEntitiesBodyText, entitiesBodyType, notEntitiesBodyType, entitiesBodyLinksDbpedia, notEntitiesBodyLinksDbpedia, sentimentTitlePolarity, notSentimentTitlePolarity, sentimentBodyPolarity, notSentimentBodyPolarity, mediaImagesCountMin, mediaImagesCountMax, mediaImagesWidthMin, mediaImagesWidthMax, mediaImagesHeightMin, mediaImagesHeightMax, mediaImagesContentLengthMin, mediaImagesContentLengthMax, mediaImagesFormat, notMediaImagesFormat, mediaVideosCountMin, mediaVideosCountMax, authorId, notAuthorId, authorName, notAuthorName, sourceId, notSourceId, sourceName, notSourceName, sourceDomain, notSourceDomain, sourceLocationsCountry, notSourceLocationsCountry, sourceLocationsState, notSourceLocationsState, sourceLocationsCity, notSourceLocationsCity, sourceScopesCountry, notSourceScopesCountry, sourceScopesState, notSourceScopesState, sourceScopesCity, notSourceScopesCity, sourceScopesLevel, notSourceScopesLevel, sourceLinksInCountMin, sourceLinksInCountMax, sourceRankingsAlexaRankMin, sourceRankingsAlexaRankMax, sourceRankingsAlexaCountry, socialSharesCountFacebookMin, socialSharesCountFacebookMax, socialSharesCountGooglePlusMin, socialSharesCountGooglePlusMax, socialSharesCountLinkedinMin, socialSharesCountLinkedinMax, socialSharesCountRedditMin, socialSharesCountRedditMax, clusters, _return, storyId, storyUrl, storyTitle, storyBody, storyPublishedAt, storyLanguage, perPage, _callback);
        }
    }

    /**
     * List coverages
     * The coverages endpoint allows you to understand the reach a document has had. For example, you can track the coverage of a press release or a Tweet based on how many times it has been mentioned in stories. 
     * @return APIlistCoveragesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object including an array of coverages </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public APIlistCoveragesRequest listCoverages() {
        return new APIlistCoveragesRequest();
    }
    private okhttp3.Call listHistogramsCall(List<Long> id, List<Long> notId, String title, String body, String text, String translationsEnTitle, String translationsEnBody, String translationsEnText, List<String> language, List<String> notLanguage, String publishedAtStart, String publishedAtEnd, String categoriesTaxonomy, Boolean categoriesConfident, List<String> categoriesId, List<String> notCategoriesId, List<Integer> categoriesLevel, List<Integer> notCategoriesLevel, List<String> entitiesTitleText, List<String> notEntitiesTitleText, List<String> entitiesTitleType, List<String> notEntitiesTitleType, List<String> entitiesTitleLinksDbpedia, List<String> notEntitiesTitleLinksDbpedia, List<String> entitiesBodyText, List<String> notEntitiesBodyText, List<String> entitiesBodyType, List<String> notEntitiesBodyType, List<String> entitiesBodyLinksDbpedia, List<String> notEntitiesBodyLinksDbpedia, String sentimentTitlePolarity, String notSentimentTitlePolarity, String sentimentBodyPolarity, String notSentimentBodyPolarity, Integer mediaImagesCountMin, Integer mediaImagesCountMax, Integer mediaImagesWidthMin, Integer mediaImagesWidthMax, Integer mediaImagesHeightMin, Integer mediaImagesHeightMax, Integer mediaImagesContentLengthMin, Integer mediaImagesContentLengthMax, List<String> mediaImagesFormat, List<String> notMediaImagesFormat, Integer mediaVideosCountMin, Integer mediaVideosCountMax, List<Integer> authorId, List<Integer> notAuthorId, String authorName, String notAuthorName, List<Integer> sourceId, List<Integer> notSourceId, List<String> sourceName, List<String> notSourceName, List<String> sourceDomain, List<String> notSourceDomain, List<String> sourceLocationsCountry, List<String> notSourceLocationsCountry, List<String> sourceLocationsState, List<String> notSourceLocationsState, List<String> sourceLocationsCity, List<String> notSourceLocationsCity, List<String> sourceScopesCountry, List<String> notSourceScopesCountry, List<String> sourceScopesState, List<String> notSourceScopesState, List<String> sourceScopesCity, List<String> notSourceScopesCity, List<String> sourceScopesLevel, List<String> notSourceScopesLevel, Integer sourceLinksInCountMin, Integer sourceLinksInCountMax, Integer sourceRankingsAlexaRankMin, Integer sourceRankingsAlexaRankMax, List<String> sourceRankingsAlexaCountry, Integer socialSharesCountFacebookMin, Integer socialSharesCountFacebookMax, Integer socialSharesCountGooglePlusMin, Integer socialSharesCountGooglePlusMax, Integer socialSharesCountLinkedinMin, Integer socialSharesCountLinkedinMax, Integer socialSharesCountRedditMin, Integer socialSharesCountRedditMax, Integer intervalStart, Integer intervalEnd, Integer intervalWidth, String field, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/histograms";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id[]", id));
        }

        if (notId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!id[]", notId));
        }

        if (title != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title", title));
        }

        if (body != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("body", body));
        }

        if (text != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text", text));
        }

        if (translationsEnTitle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("translations.en.title", translationsEnTitle));
        }

        if (translationsEnBody != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("translations.en.body", translationsEnBody));
        }

        if (translationsEnText != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("translations.en.text", translationsEnText));
        }

        if (language != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "language[]", language));
        }

        if (notLanguage != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!language[]", notLanguage));
        }

        if (publishedAtStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("published_at.start", publishedAtStart));
        }

        if (publishedAtEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("published_at.end", publishedAtEnd));
        }

        if (categoriesTaxonomy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("categories.taxonomy", categoriesTaxonomy));
        }

        if (categoriesConfident != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("categories.confident", categoriesConfident));
        }

        if (categoriesId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "categories.id[]", categoriesId));
        }

        if (notCategoriesId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!categories.id[]", notCategoriesId));
        }

        if (categoriesLevel != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "categories.level[]", categoriesLevel));
        }

        if (notCategoriesLevel != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!categories.level[]", notCategoriesLevel));
        }

        if (entitiesTitleText != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "entities.title.text[]", entitiesTitleText));
        }

        if (notEntitiesTitleText != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!entities.title.text[]", notEntitiesTitleText));
        }

        if (entitiesTitleType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "entities.title.type[]", entitiesTitleType));
        }

        if (notEntitiesTitleType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!entities.title.type[]", notEntitiesTitleType));
        }

        if (entitiesTitleLinksDbpedia != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "entities.title.links.dbpedia[]", entitiesTitleLinksDbpedia));
        }

        if (notEntitiesTitleLinksDbpedia != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!entities.title.links.dbpedia[]", notEntitiesTitleLinksDbpedia));
        }

        if (entitiesBodyText != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "entities.body.text[]", entitiesBodyText));
        }

        if (notEntitiesBodyText != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!entities.body.text[]", notEntitiesBodyText));
        }

        if (entitiesBodyType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "entities.body.type[]", entitiesBodyType));
        }

        if (notEntitiesBodyType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!entities.body.type[]", notEntitiesBodyType));
        }

        if (entitiesBodyLinksDbpedia != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "entities.body.links.dbpedia[]", entitiesBodyLinksDbpedia));
        }

        if (notEntitiesBodyLinksDbpedia != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!entities.body.links.dbpedia[]", notEntitiesBodyLinksDbpedia));
        }

        if (sentimentTitlePolarity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sentiment.title.polarity", sentimentTitlePolarity));
        }

        if (notSentimentTitlePolarity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("!sentiment.title.polarity", notSentimentTitlePolarity));
        }

        if (sentimentBodyPolarity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sentiment.body.polarity", sentimentBodyPolarity));
        }

        if (notSentimentBodyPolarity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("!sentiment.body.polarity", notSentimentBodyPolarity));
        }

        if (mediaImagesCountMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.images.count.min", mediaImagesCountMin));
        }

        if (mediaImagesCountMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.images.count.max", mediaImagesCountMax));
        }

        if (mediaImagesWidthMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.images.width.min", mediaImagesWidthMin));
        }

        if (mediaImagesWidthMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.images.width.max", mediaImagesWidthMax));
        }

        if (mediaImagesHeightMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.images.height.min", mediaImagesHeightMin));
        }

        if (mediaImagesHeightMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.images.height.max", mediaImagesHeightMax));
        }

        if (mediaImagesContentLengthMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.images.content_length.min", mediaImagesContentLengthMin));
        }

        if (mediaImagesContentLengthMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.images.content_length.max", mediaImagesContentLengthMax));
        }

        if (mediaImagesFormat != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "media.images.format[]", mediaImagesFormat));
        }

        if (notMediaImagesFormat != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!media.images.format[]", notMediaImagesFormat));
        }

        if (mediaVideosCountMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.videos.count.min", mediaVideosCountMin));
        }

        if (mediaVideosCountMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.videos.count.max", mediaVideosCountMax));
        }

        if (authorId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "author.id[]", authorId));
        }

        if (notAuthorId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!author.id[]", notAuthorId));
        }

        if (authorName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("author.name", authorName));
        }

        if (notAuthorName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("!author.name", notAuthorName));
        }

        if (sourceId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.id[]", sourceId));
        }

        if (notSourceId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.id[]", notSourceId));
        }

        if (sourceName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.name[]", sourceName));
        }

        if (notSourceName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.name[]", notSourceName));
        }

        if (sourceDomain != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.domain[]", sourceDomain));
        }

        if (notSourceDomain != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.domain[]", notSourceDomain));
        }

        if (sourceLocationsCountry != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.locations.country[]", sourceLocationsCountry));
        }

        if (notSourceLocationsCountry != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.locations.country[]", notSourceLocationsCountry));
        }

        if (sourceLocationsState != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.locations.state[]", sourceLocationsState));
        }

        if (notSourceLocationsState != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.locations.state[]", notSourceLocationsState));
        }

        if (sourceLocationsCity != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.locations.city[]", sourceLocationsCity));
        }

        if (notSourceLocationsCity != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.locations.city[]", notSourceLocationsCity));
        }

        if (sourceScopesCountry != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.scopes.country[]", sourceScopesCountry));
        }

        if (notSourceScopesCountry != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.scopes.country[]", notSourceScopesCountry));
        }

        if (sourceScopesState != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.scopes.state[]", sourceScopesState));
        }

        if (notSourceScopesState != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.scopes.state[]", notSourceScopesState));
        }

        if (sourceScopesCity != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.scopes.city[]", sourceScopesCity));
        }

        if (notSourceScopesCity != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.scopes.city[]", notSourceScopesCity));
        }

        if (sourceScopesLevel != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.scopes.level[]", sourceScopesLevel));
        }

        if (notSourceScopesLevel != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.scopes.level[]", notSourceScopesLevel));
        }

        if (sourceLinksInCountMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source.links_in_count.min", sourceLinksInCountMin));
        }

        if (sourceLinksInCountMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source.links_in_count.max", sourceLinksInCountMax));
        }

        if (sourceRankingsAlexaRankMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source.rankings.alexa.rank.min", sourceRankingsAlexaRankMin));
        }

        if (sourceRankingsAlexaRankMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source.rankings.alexa.rank.max", sourceRankingsAlexaRankMax));
        }

        if (sourceRankingsAlexaCountry != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.rankings.alexa.country[]", sourceRankingsAlexaCountry));
        }

        if (socialSharesCountFacebookMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("social_shares_count.facebook.min", socialSharesCountFacebookMin));
        }

        if (socialSharesCountFacebookMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("social_shares_count.facebook.max", socialSharesCountFacebookMax));
        }

        if (socialSharesCountGooglePlusMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("social_shares_count.google_plus.min", socialSharesCountGooglePlusMin));
        }

        if (socialSharesCountGooglePlusMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("social_shares_count.google_plus.max", socialSharesCountGooglePlusMax));
        }

        if (socialSharesCountLinkedinMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("social_shares_count.linkedin.min", socialSharesCountLinkedinMin));
        }

        if (socialSharesCountLinkedinMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("social_shares_count.linkedin.max", socialSharesCountLinkedinMax));
        }

        if (socialSharesCountRedditMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("social_shares_count.reddit.min", socialSharesCountRedditMin));
        }

        if (socialSharesCountRedditMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("social_shares_count.reddit.max", socialSharesCountRedditMax));
        }

        if (intervalStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval.start", intervalStart));
        }

        if (intervalEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval.end", intervalEnd));
        }

        if (intervalWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval.width", intervalWidth));
        }

        if (field != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("field", field));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "app_id", "app_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listHistogramsValidateBeforeCall(List<Long> id, List<Long> notId, String title, String body, String text, String translationsEnTitle, String translationsEnBody, String translationsEnText, List<String> language, List<String> notLanguage, String publishedAtStart, String publishedAtEnd, String categoriesTaxonomy, Boolean categoriesConfident, List<String> categoriesId, List<String> notCategoriesId, List<Integer> categoriesLevel, List<Integer> notCategoriesLevel, List<String> entitiesTitleText, List<String> notEntitiesTitleText, List<String> entitiesTitleType, List<String> notEntitiesTitleType, List<String> entitiesTitleLinksDbpedia, List<String> notEntitiesTitleLinksDbpedia, List<String> entitiesBodyText, List<String> notEntitiesBodyText, List<String> entitiesBodyType, List<String> notEntitiesBodyType, List<String> entitiesBodyLinksDbpedia, List<String> notEntitiesBodyLinksDbpedia, String sentimentTitlePolarity, String notSentimentTitlePolarity, String sentimentBodyPolarity, String notSentimentBodyPolarity, Integer mediaImagesCountMin, Integer mediaImagesCountMax, Integer mediaImagesWidthMin, Integer mediaImagesWidthMax, Integer mediaImagesHeightMin, Integer mediaImagesHeightMax, Integer mediaImagesContentLengthMin, Integer mediaImagesContentLengthMax, List<String> mediaImagesFormat, List<String> notMediaImagesFormat, Integer mediaVideosCountMin, Integer mediaVideosCountMax, List<Integer> authorId, List<Integer> notAuthorId, String authorName, String notAuthorName, List<Integer> sourceId, List<Integer> notSourceId, List<String> sourceName, List<String> notSourceName, List<String> sourceDomain, List<String> notSourceDomain, List<String> sourceLocationsCountry, List<String> notSourceLocationsCountry, List<String> sourceLocationsState, List<String> notSourceLocationsState, List<String> sourceLocationsCity, List<String> notSourceLocationsCity, List<String> sourceScopesCountry, List<String> notSourceScopesCountry, List<String> sourceScopesState, List<String> notSourceScopesState, List<String> sourceScopesCity, List<String> notSourceScopesCity, List<String> sourceScopesLevel, List<String> notSourceScopesLevel, Integer sourceLinksInCountMin, Integer sourceLinksInCountMax, Integer sourceRankingsAlexaRankMin, Integer sourceRankingsAlexaRankMax, List<String> sourceRankingsAlexaCountry, Integer socialSharesCountFacebookMin, Integer socialSharesCountFacebookMax, Integer socialSharesCountGooglePlusMin, Integer socialSharesCountGooglePlusMax, Integer socialSharesCountLinkedinMin, Integer socialSharesCountLinkedinMax, Integer socialSharesCountRedditMin, Integer socialSharesCountRedditMax, Integer intervalStart, Integer intervalEnd, Integer intervalWidth, String field, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listHistogramsCall(id, notId, title, body, text, translationsEnTitle, translationsEnBody, translationsEnText, language, notLanguage, publishedAtStart, publishedAtEnd, categoriesTaxonomy, categoriesConfident, categoriesId, notCategoriesId, categoriesLevel, notCategoriesLevel, entitiesTitleText, notEntitiesTitleText, entitiesTitleType, notEntitiesTitleType, entitiesTitleLinksDbpedia, notEntitiesTitleLinksDbpedia, entitiesBodyText, notEntitiesBodyText, entitiesBodyType, notEntitiesBodyType, entitiesBodyLinksDbpedia, notEntitiesBodyLinksDbpedia, sentimentTitlePolarity, notSentimentTitlePolarity, sentimentBodyPolarity, notSentimentBodyPolarity, mediaImagesCountMin, mediaImagesCountMax, mediaImagesWidthMin, mediaImagesWidthMax, mediaImagesHeightMin, mediaImagesHeightMax, mediaImagesContentLengthMin, mediaImagesContentLengthMax, mediaImagesFormat, notMediaImagesFormat, mediaVideosCountMin, mediaVideosCountMax, authorId, notAuthorId, authorName, notAuthorName, sourceId, notSourceId, sourceName, notSourceName, sourceDomain, notSourceDomain, sourceLocationsCountry, notSourceLocationsCountry, sourceLocationsState, notSourceLocationsState, sourceLocationsCity, notSourceLocationsCity, sourceScopesCountry, notSourceScopesCountry, sourceScopesState, notSourceScopesState, sourceScopesCity, notSourceScopesCity, sourceScopesLevel, notSourceScopesLevel, sourceLinksInCountMin, sourceLinksInCountMax, sourceRankingsAlexaRankMin, sourceRankingsAlexaRankMax, sourceRankingsAlexaCountry, socialSharesCountFacebookMin, socialSharesCountFacebookMax, socialSharesCountGooglePlusMin, socialSharesCountGooglePlusMax, socialSharesCountLinkedinMin, socialSharesCountLinkedinMax, socialSharesCountRedditMin, socialSharesCountRedditMax, intervalStart, intervalEnd, intervalWidth, field, _callback);
        return localVarCall;

    }


    private ApiResponse<Histograms> listHistogramsWithHttpInfo(List<Long> id, List<Long> notId, String title, String body, String text, String translationsEnTitle, String translationsEnBody, String translationsEnText, List<String> language, List<String> notLanguage, String publishedAtStart, String publishedAtEnd, String categoriesTaxonomy, Boolean categoriesConfident, List<String> categoriesId, List<String> notCategoriesId, List<Integer> categoriesLevel, List<Integer> notCategoriesLevel, List<String> entitiesTitleText, List<String> notEntitiesTitleText, List<String> entitiesTitleType, List<String> notEntitiesTitleType, List<String> entitiesTitleLinksDbpedia, List<String> notEntitiesTitleLinksDbpedia, List<String> entitiesBodyText, List<String> notEntitiesBodyText, List<String> entitiesBodyType, List<String> notEntitiesBodyType, List<String> entitiesBodyLinksDbpedia, List<String> notEntitiesBodyLinksDbpedia, String sentimentTitlePolarity, String notSentimentTitlePolarity, String sentimentBodyPolarity, String notSentimentBodyPolarity, Integer mediaImagesCountMin, Integer mediaImagesCountMax, Integer mediaImagesWidthMin, Integer mediaImagesWidthMax, Integer mediaImagesHeightMin, Integer mediaImagesHeightMax, Integer mediaImagesContentLengthMin, Integer mediaImagesContentLengthMax, List<String> mediaImagesFormat, List<String> notMediaImagesFormat, Integer mediaVideosCountMin, Integer mediaVideosCountMax, List<Integer> authorId, List<Integer> notAuthorId, String authorName, String notAuthorName, List<Integer> sourceId, List<Integer> notSourceId, List<String> sourceName, List<String> notSourceName, List<String> sourceDomain, List<String> notSourceDomain, List<String> sourceLocationsCountry, List<String> notSourceLocationsCountry, List<String> sourceLocationsState, List<String> notSourceLocationsState, List<String> sourceLocationsCity, List<String> notSourceLocationsCity, List<String> sourceScopesCountry, List<String> notSourceScopesCountry, List<String> sourceScopesState, List<String> notSourceScopesState, List<String> sourceScopesCity, List<String> notSourceScopesCity, List<String> sourceScopesLevel, List<String> notSourceScopesLevel, Integer sourceLinksInCountMin, Integer sourceLinksInCountMax, Integer sourceRankingsAlexaRankMin, Integer sourceRankingsAlexaRankMax, List<String> sourceRankingsAlexaCountry, Integer socialSharesCountFacebookMin, Integer socialSharesCountFacebookMax, Integer socialSharesCountGooglePlusMin, Integer socialSharesCountGooglePlusMax, Integer socialSharesCountLinkedinMin, Integer socialSharesCountLinkedinMax, Integer socialSharesCountRedditMin, Integer socialSharesCountRedditMax, Integer intervalStart, Integer intervalEnd, Integer intervalWidth, String field) throws ApiException {
        okhttp3.Call localVarCall = listHistogramsValidateBeforeCall(id, notId, title, body, text, translationsEnTitle, translationsEnBody, translationsEnText, language, notLanguage, publishedAtStart, publishedAtEnd, categoriesTaxonomy, categoriesConfident, categoriesId, notCategoriesId, categoriesLevel, notCategoriesLevel, entitiesTitleText, notEntitiesTitleText, entitiesTitleType, notEntitiesTitleType, entitiesTitleLinksDbpedia, notEntitiesTitleLinksDbpedia, entitiesBodyText, notEntitiesBodyText, entitiesBodyType, notEntitiesBodyType, entitiesBodyLinksDbpedia, notEntitiesBodyLinksDbpedia, sentimentTitlePolarity, notSentimentTitlePolarity, sentimentBodyPolarity, notSentimentBodyPolarity, mediaImagesCountMin, mediaImagesCountMax, mediaImagesWidthMin, mediaImagesWidthMax, mediaImagesHeightMin, mediaImagesHeightMax, mediaImagesContentLengthMin, mediaImagesContentLengthMax, mediaImagesFormat, notMediaImagesFormat, mediaVideosCountMin, mediaVideosCountMax, authorId, notAuthorId, authorName, notAuthorName, sourceId, notSourceId, sourceName, notSourceName, sourceDomain, notSourceDomain, sourceLocationsCountry, notSourceLocationsCountry, sourceLocationsState, notSourceLocationsState, sourceLocationsCity, notSourceLocationsCity, sourceScopesCountry, notSourceScopesCountry, sourceScopesState, notSourceScopesState, sourceScopesCity, notSourceScopesCity, sourceScopesLevel, notSourceScopesLevel, sourceLinksInCountMin, sourceLinksInCountMax, sourceRankingsAlexaRankMin, sourceRankingsAlexaRankMax, sourceRankingsAlexaCountry, socialSharesCountFacebookMin, socialSharesCountFacebookMax, socialSharesCountGooglePlusMin, socialSharesCountGooglePlusMax, socialSharesCountLinkedinMin, socialSharesCountLinkedinMax, socialSharesCountRedditMin, socialSharesCountRedditMax, intervalStart, intervalEnd, intervalWidth, field, null);
        Type localVarReturnType = new TypeToken<Histograms>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listHistogramsAsync(List<Long> id, List<Long> notId, String title, String body, String text, String translationsEnTitle, String translationsEnBody, String translationsEnText, List<String> language, List<String> notLanguage, String publishedAtStart, String publishedAtEnd, String categoriesTaxonomy, Boolean categoriesConfident, List<String> categoriesId, List<String> notCategoriesId, List<Integer> categoriesLevel, List<Integer> notCategoriesLevel, List<String> entitiesTitleText, List<String> notEntitiesTitleText, List<String> entitiesTitleType, List<String> notEntitiesTitleType, List<String> entitiesTitleLinksDbpedia, List<String> notEntitiesTitleLinksDbpedia, List<String> entitiesBodyText, List<String> notEntitiesBodyText, List<String> entitiesBodyType, List<String> notEntitiesBodyType, List<String> entitiesBodyLinksDbpedia, List<String> notEntitiesBodyLinksDbpedia, String sentimentTitlePolarity, String notSentimentTitlePolarity, String sentimentBodyPolarity, String notSentimentBodyPolarity, Integer mediaImagesCountMin, Integer mediaImagesCountMax, Integer mediaImagesWidthMin, Integer mediaImagesWidthMax, Integer mediaImagesHeightMin, Integer mediaImagesHeightMax, Integer mediaImagesContentLengthMin, Integer mediaImagesContentLengthMax, List<String> mediaImagesFormat, List<String> notMediaImagesFormat, Integer mediaVideosCountMin, Integer mediaVideosCountMax, List<Integer> authorId, List<Integer> notAuthorId, String authorName, String notAuthorName, List<Integer> sourceId, List<Integer> notSourceId, List<String> sourceName, List<String> notSourceName, List<String> sourceDomain, List<String> notSourceDomain, List<String> sourceLocationsCountry, List<String> notSourceLocationsCountry, List<String> sourceLocationsState, List<String> notSourceLocationsState, List<String> sourceLocationsCity, List<String> notSourceLocationsCity, List<String> sourceScopesCountry, List<String> notSourceScopesCountry, List<String> sourceScopesState, List<String> notSourceScopesState, List<String> sourceScopesCity, List<String> notSourceScopesCity, List<String> sourceScopesLevel, List<String> notSourceScopesLevel, Integer sourceLinksInCountMin, Integer sourceLinksInCountMax, Integer sourceRankingsAlexaRankMin, Integer sourceRankingsAlexaRankMax, List<String> sourceRankingsAlexaCountry, Integer socialSharesCountFacebookMin, Integer socialSharesCountFacebookMax, Integer socialSharesCountGooglePlusMin, Integer socialSharesCountGooglePlusMax, Integer socialSharesCountLinkedinMin, Integer socialSharesCountLinkedinMax, Integer socialSharesCountRedditMin, Integer socialSharesCountRedditMax, Integer intervalStart, Integer intervalEnd, Integer intervalWidth, String field, final ApiCallback<Histograms> _callback) throws ApiException {

        okhttp3.Call localVarCall = listHistogramsValidateBeforeCall(id, notId, title, body, text, translationsEnTitle, translationsEnBody, translationsEnText, language, notLanguage, publishedAtStart, publishedAtEnd, categoriesTaxonomy, categoriesConfident, categoriesId, notCategoriesId, categoriesLevel, notCategoriesLevel, entitiesTitleText, notEntitiesTitleText, entitiesTitleType, notEntitiesTitleType, entitiesTitleLinksDbpedia, notEntitiesTitleLinksDbpedia, entitiesBodyText, notEntitiesBodyText, entitiesBodyType, notEntitiesBodyType, entitiesBodyLinksDbpedia, notEntitiesBodyLinksDbpedia, sentimentTitlePolarity, notSentimentTitlePolarity, sentimentBodyPolarity, notSentimentBodyPolarity, mediaImagesCountMin, mediaImagesCountMax, mediaImagesWidthMin, mediaImagesWidthMax, mediaImagesHeightMin, mediaImagesHeightMax, mediaImagesContentLengthMin, mediaImagesContentLengthMax, mediaImagesFormat, notMediaImagesFormat, mediaVideosCountMin, mediaVideosCountMax, authorId, notAuthorId, authorName, notAuthorName, sourceId, notSourceId, sourceName, notSourceName, sourceDomain, notSourceDomain, sourceLocationsCountry, notSourceLocationsCountry, sourceLocationsState, notSourceLocationsState, sourceLocationsCity, notSourceLocationsCity, sourceScopesCountry, notSourceScopesCountry, sourceScopesState, notSourceScopesState, sourceScopesCity, notSourceScopesCity, sourceScopesLevel, notSourceScopesLevel, sourceLinksInCountMin, sourceLinksInCountMax, sourceRankingsAlexaRankMin, sourceRankingsAlexaRankMax, sourceRankingsAlexaCountry, socialSharesCountFacebookMin, socialSharesCountFacebookMax, socialSharesCountGooglePlusMin, socialSharesCountGooglePlusMax, socialSharesCountLinkedinMin, socialSharesCountLinkedinMax, socialSharesCountRedditMin, socialSharesCountRedditMax, intervalStart, intervalEnd, intervalWidth, field, _callback);
        Type localVarReturnType = new TypeToken<Histograms>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistHistogramsRequest {
        private List<Long> id;
        private List<Long> notId;
        private String title;
        private String body;
        private String text;
        private String translationsEnTitle;
        private String translationsEnBody;
        private String translationsEnText;
        private List<String> language;
        private List<String> notLanguage;
        private String publishedAtStart;
        private String publishedAtEnd;
        private String categoriesTaxonomy;
        private Boolean categoriesConfident;
        private List<String> categoriesId;
        private List<String> notCategoriesId;
        private List<Integer> categoriesLevel;
        private List<Integer> notCategoriesLevel;
        private List<String> entitiesTitleText;
        private List<String> notEntitiesTitleText;
        private List<String> entitiesTitleType;
        private List<String> notEntitiesTitleType;
        private List<String> entitiesTitleLinksDbpedia;
        private List<String> notEntitiesTitleLinksDbpedia;
        private List<String> entitiesBodyText;
        private List<String> notEntitiesBodyText;
        private List<String> entitiesBodyType;
        private List<String> notEntitiesBodyType;
        private List<String> entitiesBodyLinksDbpedia;
        private List<String> notEntitiesBodyLinksDbpedia;
        private String sentimentTitlePolarity;
        private String notSentimentTitlePolarity;
        private String sentimentBodyPolarity;
        private String notSentimentBodyPolarity;
        private Integer mediaImagesCountMin;
        private Integer mediaImagesCountMax;
        private Integer mediaImagesWidthMin;
        private Integer mediaImagesWidthMax;
        private Integer mediaImagesHeightMin;
        private Integer mediaImagesHeightMax;
        private Integer mediaImagesContentLengthMin;
        private Integer mediaImagesContentLengthMax;
        private List<String> mediaImagesFormat;
        private List<String> notMediaImagesFormat;
        private Integer mediaVideosCountMin;
        private Integer mediaVideosCountMax;
        private List<Integer> authorId;
        private List<Integer> notAuthorId;
        private String authorName;
        private String notAuthorName;
        private List<Integer> sourceId;
        private List<Integer> notSourceId;
        private List<String> sourceName;
        private List<String> notSourceName;
        private List<String> sourceDomain;
        private List<String> notSourceDomain;
        private List<String> sourceLocationsCountry;
        private List<String> notSourceLocationsCountry;
        private List<String> sourceLocationsState;
        private List<String> notSourceLocationsState;
        private List<String> sourceLocationsCity;
        private List<String> notSourceLocationsCity;
        private List<String> sourceScopesCountry;
        private List<String> notSourceScopesCountry;
        private List<String> sourceScopesState;
        private List<String> notSourceScopesState;
        private List<String> sourceScopesCity;
        private List<String> notSourceScopesCity;
        private List<String> sourceScopesLevel;
        private List<String> notSourceScopesLevel;
        private Integer sourceLinksInCountMin;
        private Integer sourceLinksInCountMax;
        private Integer sourceRankingsAlexaRankMin;
        private Integer sourceRankingsAlexaRankMax;
        private List<String> sourceRankingsAlexaCountry;
        private Integer socialSharesCountFacebookMin;
        private Integer socialSharesCountFacebookMax;
        private Integer socialSharesCountGooglePlusMin;
        private Integer socialSharesCountGooglePlusMax;
        private Integer socialSharesCountLinkedinMin;
        private Integer socialSharesCountLinkedinMax;
        private Integer socialSharesCountRedditMin;
        private Integer socialSharesCountRedditMax;
        private Integer intervalStart;
        private Integer intervalEnd;
        private Integer intervalWidth;
        private String field;

        private APIlistHistogramsRequest() {
        }

        /**
         * Set id
         * @param id This parameter is used for finding stories by story id.  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest id(List<Long> id) {
            this.id = id;
            return this;
        }

        /**
         * Set notId
         * @param notId This parameter is used for excluding stories by story id.  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest notId(List<Long> notId) {
            this.notId = notId;
            return this;
        }

        /**
         * Set title
         * @param title This parameter is used for finding stories whose title contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators).  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest title(String title) {
            this.title = title;
            return this;
        }

        /**
         * Set body
         * @param body This parameter is used for finding stories whose body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators).  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest body(String body) {
            this.body = body;
            return this;
        }

        /**
         * Set text
         * @param text This parameter is used for finding stories whose title or body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators).  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest text(String text) {
            this.text = text;
            return this;
        }

        /**
         * Set translationsEnTitle
         * @param translationsEnTitle This parameter is used for finding stories whose translation title contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators).  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest translationsEnTitle(String translationsEnTitle) {
            this.translationsEnTitle = translationsEnTitle;
            return this;
        }

        /**
         * Set translationsEnBody
         * @param translationsEnBody This parameter is used for finding stories whose translation body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators).  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest translationsEnBody(String translationsEnBody) {
            this.translationsEnBody = translationsEnBody;
            return this;
        }

        /**
         * Set translationsEnText
         * @param translationsEnText This parameter is used for finding stories whose translation title or body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators).  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest translationsEnText(String translationsEnText) {
            this.translationsEnText = translationsEnText;
            return this;
        }

        /**
         * Set language
         * @param language This parameter is used for finding stories whose language is the specified value. It supports [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language codes.  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest language(List<String> language) {
            this.language = language;
            return this;
        }

        /**
         * Set notLanguage
         * @param notLanguage This parameter is used for excluding stories whose language is the specified value. It supports [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language codes.  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest notLanguage(List<String> notLanguage) {
            this.notLanguage = notLanguage;
            return this;
        }

        /**
         * Set publishedAtStart
         * @param publishedAtStart This parameter is used for finding stories whose published at time is greater than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates).  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest publishedAtStart(String publishedAtStart) {
            this.publishedAtStart = publishedAtStart;
            return this;
        }

        /**
         * Set publishedAtEnd
         * @param publishedAtEnd This parameter is used for finding stories whose published at time is less than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates).  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest publishedAtEnd(String publishedAtEnd) {
            this.publishedAtEnd = publishedAtEnd;
            return this;
        }

        /**
         * Set categoriesTaxonomy
         * @param categoriesTaxonomy This parameter is used for defining the type of the taxonomy for the rest of the categories queries. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories).  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest categoriesTaxonomy(String categoriesTaxonomy) {
            this.categoriesTaxonomy = categoriesTaxonomy;
            return this;
        }

        /**
         * Set categoriesConfident
         * @param categoriesConfident This parameter is used for finding stories whose categories are confident. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories).  (optional, default to true)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest categoriesConfident(Boolean categoriesConfident) {
            this.categoriesConfident = categoriesConfident;
            return this;
        }

        /**
         * Set categoriesId
         * @param categoriesId This parameter is used for finding stories by categories id. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories).  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest categoriesId(List<String> categoriesId) {
            this.categoriesId = categoriesId;
            return this;
        }

        /**
         * Set notCategoriesId
         * @param notCategoriesId This parameter is used for excluding stories by categories id. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories).  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest notCategoriesId(List<String> notCategoriesId) {
            this.notCategoriesId = notCategoriesId;
            return this;
        }

        /**
         * Set categoriesLevel
         * @param categoriesLevel This parameter is used for finding stories by categories level. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories).  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest categoriesLevel(List<Integer> categoriesLevel) {
            this.categoriesLevel = categoriesLevel;
            return this;
        }

        /**
         * Set notCategoriesLevel
         * @param notCategoriesLevel This parameter is used for excluding stories by categories level. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories).  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest notCategoriesLevel(List<Integer> notCategoriesLevel) {
            this.notCategoriesLevel = notCategoriesLevel;
            return this;
        }

        /**
         * Set entitiesTitleText
         * @param entitiesTitleText This parameter is used to find stories based on the specified entities &#x60;text&#x60; in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest entitiesTitleText(List<String> entitiesTitleText) {
            this.entitiesTitleText = entitiesTitleText;
            return this;
        }

        /**
         * Set notEntitiesTitleText
         * @param notEntitiesTitleText This parameter is used to exclude stories based on the specified entities &#x60;text&#x60; in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest notEntitiesTitleText(List<String> notEntitiesTitleText) {
            this.notEntitiesTitleText = notEntitiesTitleText;
            return this;
        }

        /**
         * Set entitiesTitleType
         * @param entitiesTitleType This parameter is used to find stories based on the specified entities &#x60;type&#x60; in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest entitiesTitleType(List<String> entitiesTitleType) {
            this.entitiesTitleType = entitiesTitleType;
            return this;
        }

        /**
         * Set notEntitiesTitleType
         * @param notEntitiesTitleType This parameter is used to exclude stories based on the specified entities &#x60;type&#x60; in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest notEntitiesTitleType(List<String> notEntitiesTitleType) {
            this.notEntitiesTitleType = notEntitiesTitleType;
            return this;
        }

        /**
         * Set entitiesTitleLinksDbpedia
         * @param entitiesTitleLinksDbpedia This parameter is used to find stories based on the specified entities dbpedia URL in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest entitiesTitleLinksDbpedia(List<String> entitiesTitleLinksDbpedia) {
            this.entitiesTitleLinksDbpedia = entitiesTitleLinksDbpedia;
            return this;
        }

        /**
         * Set notEntitiesTitleLinksDbpedia
         * @param notEntitiesTitleLinksDbpedia This parameter is used to exclude stories based on the specified entities dbpedia URL in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest notEntitiesTitleLinksDbpedia(List<String> notEntitiesTitleLinksDbpedia) {
            this.notEntitiesTitleLinksDbpedia = notEntitiesTitleLinksDbpedia;
            return this;
        }

        /**
         * Set entitiesBodyText
         * @param entitiesBodyText This parameter is used to find stories based on the specified entities &#x60;text&#x60; in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest entitiesBodyText(List<String> entitiesBodyText) {
            this.entitiesBodyText = entitiesBodyText;
            return this;
        }

        /**
         * Set notEntitiesBodyText
         * @param notEntitiesBodyText This parameter is used to exclude stories based on the specified entities &#x60;text&#x60; in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest notEntitiesBodyText(List<String> notEntitiesBodyText) {
            this.notEntitiesBodyText = notEntitiesBodyText;
            return this;
        }

        /**
         * Set entitiesBodyType
         * @param entitiesBodyType This parameter is used to find stories based on the specified entities &#x60;type&#x60; in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest entitiesBodyType(List<String> entitiesBodyType) {
            this.entitiesBodyType = entitiesBodyType;
            return this;
        }

        /**
         * Set notEntitiesBodyType
         * @param notEntitiesBodyType This parameter is used to exclude stories based on the specified entities &#x60;type&#x60; in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest notEntitiesBodyType(List<String> notEntitiesBodyType) {
            this.notEntitiesBodyType = notEntitiesBodyType;
            return this;
        }

        /**
         * Set entitiesBodyLinksDbpedia
         * @param entitiesBodyLinksDbpedia This parameter is used to find stories based on the specified entities dbpedia URL in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest entitiesBodyLinksDbpedia(List<String> entitiesBodyLinksDbpedia) {
            this.entitiesBodyLinksDbpedia = entitiesBodyLinksDbpedia;
            return this;
        }

        /**
         * Set notEntitiesBodyLinksDbpedia
         * @param notEntitiesBodyLinksDbpedia This parameter is used to exclude stories based on the specified entities dbpedia URL in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest notEntitiesBodyLinksDbpedia(List<String> notEntitiesBodyLinksDbpedia) {
            this.notEntitiesBodyLinksDbpedia = notEntitiesBodyLinksDbpedia;
            return this;
        }

        /**
         * Set sentimentTitlePolarity
         * @param sentimentTitlePolarity This parameter is used for finding stories whose title sentiment is the specified value.  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest sentimentTitlePolarity(String sentimentTitlePolarity) {
            this.sentimentTitlePolarity = sentimentTitlePolarity;
            return this;
        }

        /**
         * Set notSentimentTitlePolarity
         * @param notSentimentTitlePolarity This parameter is used for excluding stories whose title sentiment is the specified value.  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest notSentimentTitlePolarity(String notSentimentTitlePolarity) {
            this.notSentimentTitlePolarity = notSentimentTitlePolarity;
            return this;
        }

        /**
         * Set sentimentBodyPolarity
         * @param sentimentBodyPolarity This parameter is used for finding stories whose body sentiment is the specified value.  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest sentimentBodyPolarity(String sentimentBodyPolarity) {
            this.sentimentBodyPolarity = sentimentBodyPolarity;
            return this;
        }

        /**
         * Set notSentimentBodyPolarity
         * @param notSentimentBodyPolarity This parameter is used for excluding stories whose body sentiment is the specified value.  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest notSentimentBodyPolarity(String notSentimentBodyPolarity) {
            this.notSentimentBodyPolarity = notSentimentBodyPolarity;
            return this;
        }

        /**
         * Set mediaImagesCountMin
         * @param mediaImagesCountMin This parameter is used for finding stories whose number of images is greater than or equal to the specified value.  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest mediaImagesCountMin(Integer mediaImagesCountMin) {
            this.mediaImagesCountMin = mediaImagesCountMin;
            return this;
        }

        /**
         * Set mediaImagesCountMax
         * @param mediaImagesCountMax This parameter is used for finding stories whose number of images is less than or equal to the specified value.  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest mediaImagesCountMax(Integer mediaImagesCountMax) {
            this.mediaImagesCountMax = mediaImagesCountMax;
            return this;
        }

        /**
         * Set mediaImagesWidthMin
         * @param mediaImagesWidthMin This parameter is used for finding stories whose width of images are greater than or equal to the specified value.  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest mediaImagesWidthMin(Integer mediaImagesWidthMin) {
            this.mediaImagesWidthMin = mediaImagesWidthMin;
            return this;
        }

        /**
         * Set mediaImagesWidthMax
         * @param mediaImagesWidthMax This parameter is used for finding stories whose width of images are less than or equal to the specified value.  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest mediaImagesWidthMax(Integer mediaImagesWidthMax) {
            this.mediaImagesWidthMax = mediaImagesWidthMax;
            return this;
        }

        /**
         * Set mediaImagesHeightMin
         * @param mediaImagesHeightMin This parameter is used for finding stories whose height of images are greater than or equal to the specified value.  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest mediaImagesHeightMin(Integer mediaImagesHeightMin) {
            this.mediaImagesHeightMin = mediaImagesHeightMin;
            return this;
        }

        /**
         * Set mediaImagesHeightMax
         * @param mediaImagesHeightMax This parameter is used for finding stories whose height of images are less than or equal to the specified value.  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest mediaImagesHeightMax(Integer mediaImagesHeightMax) {
            this.mediaImagesHeightMax = mediaImagesHeightMax;
            return this;
        }

        /**
         * Set mediaImagesContentLengthMin
         * @param mediaImagesContentLengthMin This parameter is used for finding stories whose images content length are greater than or equal to the specified value.  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest mediaImagesContentLengthMin(Integer mediaImagesContentLengthMin) {
            this.mediaImagesContentLengthMin = mediaImagesContentLengthMin;
            return this;
        }

        /**
         * Set mediaImagesContentLengthMax
         * @param mediaImagesContentLengthMax This parameter is used for finding stories whose images content length are less than or equal to the specified value.  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest mediaImagesContentLengthMax(Integer mediaImagesContentLengthMax) {
            this.mediaImagesContentLengthMax = mediaImagesContentLengthMax;
            return this;
        }

        /**
         * Set mediaImagesFormat
         * @param mediaImagesFormat This parameter is used for finding stories whose images format are the specified value.  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest mediaImagesFormat(List<String> mediaImagesFormat) {
            this.mediaImagesFormat = mediaImagesFormat;
            return this;
        }

        /**
         * Set notMediaImagesFormat
         * @param notMediaImagesFormat This parameter is used for excluding stories whose images format are the specified value.  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest notMediaImagesFormat(List<String> notMediaImagesFormat) {
            this.notMediaImagesFormat = notMediaImagesFormat;
            return this;
        }

        /**
         * Set mediaVideosCountMin
         * @param mediaVideosCountMin This parameter is used for finding stories whose number of videos is greater than or equal to the specified value.  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest mediaVideosCountMin(Integer mediaVideosCountMin) {
            this.mediaVideosCountMin = mediaVideosCountMin;
            return this;
        }

        /**
         * Set mediaVideosCountMax
         * @param mediaVideosCountMax This parameter is used for finding stories whose number of videos is less than or equal to the specified value.  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest mediaVideosCountMax(Integer mediaVideosCountMax) {
            this.mediaVideosCountMax = mediaVideosCountMax;
            return this;
        }

        /**
         * Set authorId
         * @param authorId This parameter is used for finding stories whose author id is the specified value.  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest authorId(List<Integer> authorId) {
            this.authorId = authorId;
            return this;
        }

        /**
         * Set notAuthorId
         * @param notAuthorId This parameter is used for excluding stories whose author id is the specified value.  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest notAuthorId(List<Integer> notAuthorId) {
            this.notAuthorId = notAuthorId;
            return this;
        }

        /**
         * Set authorName
         * @param authorName This parameter is used for finding stories whose author full name contains the specified value.  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest authorName(String authorName) {
            this.authorName = authorName;
            return this;
        }

        /**
         * Set notAuthorName
         * @param notAuthorName This parameter is used for excluding stories whose author full name contains the specified value.  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest notAuthorName(String notAuthorName) {
            this.notAuthorName = notAuthorName;
            return this;
        }

        /**
         * Set sourceId
         * @param sourceId This parameter is used for finding stories whose source id is the specified value.  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest sourceId(List<Integer> sourceId) {
            this.sourceId = sourceId;
            return this;
        }

        /**
         * Set notSourceId
         * @param notSourceId This parameter is used for excluding stories whose source id is the specified value.  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest notSourceId(List<Integer> notSourceId) {
            this.notSourceId = notSourceId;
            return this;
        }

        /**
         * Set sourceName
         * @param sourceName This parameter is used for finding stories whose source name contains the specified value.  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest sourceName(List<String> sourceName) {
            this.sourceName = sourceName;
            return this;
        }

        /**
         * Set notSourceName
         * @param notSourceName This parameter is used for excluding stories whose source name contains the specified value.  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest notSourceName(List<String> notSourceName) {
            this.notSourceName = notSourceName;
            return this;
        }

        /**
         * Set sourceDomain
         * @param sourceDomain This parameter is used for finding stories whose source domain is the specified value.  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest sourceDomain(List<String> sourceDomain) {
            this.sourceDomain = sourceDomain;
            return this;
        }

        /**
         * Set notSourceDomain
         * @param notSourceDomain This parameter is used for excluding stories whose source domain is the specified value.  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest notSourceDomain(List<String> notSourceDomain) {
            this.notSourceDomain = notSourceDomain;
            return this;
        }

        /**
         * Set sourceLocationsCountry
         * @param sourceLocationsCountry This parameter is used for finding stories whose source country is the specified value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest sourceLocationsCountry(List<String> sourceLocationsCountry) {
            this.sourceLocationsCountry = sourceLocationsCountry;
            return this;
        }

        /**
         * Set notSourceLocationsCountry
         * @param notSourceLocationsCountry This parameter is used for excluding stories whose source country is the specified value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest notSourceLocationsCountry(List<String> notSourceLocationsCountry) {
            this.notSourceLocationsCountry = notSourceLocationsCountry;
            return this;
        }

        /**
         * Set sourceLocationsState
         * @param sourceLocationsState This parameter is used for finding stories whose source state/province is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest sourceLocationsState(List<String> sourceLocationsState) {
            this.sourceLocationsState = sourceLocationsState;
            return this;
        }

        /**
         * Set notSourceLocationsState
         * @param notSourceLocationsState This parameter is used for excluding stories whose source state/province is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest notSourceLocationsState(List<String> notSourceLocationsState) {
            this.notSourceLocationsState = notSourceLocationsState;
            return this;
        }

        /**
         * Set sourceLocationsCity
         * @param sourceLocationsCity This parameter is used for finding stories whose source city is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest sourceLocationsCity(List<String> sourceLocationsCity) {
            this.sourceLocationsCity = sourceLocationsCity;
            return this;
        }

        /**
         * Set notSourceLocationsCity
         * @param notSourceLocationsCity This parameter is used for excluding stories whose source city is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest notSourceLocationsCity(List<String> notSourceLocationsCity) {
            this.notSourceLocationsCity = notSourceLocationsCity;
            return this;
        }

        /**
         * Set sourceScopesCountry
         * @param sourceScopesCountry This parameter is used for finding stories whose source scopes is the specified country value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest sourceScopesCountry(List<String> sourceScopesCountry) {
            this.sourceScopesCountry = sourceScopesCountry;
            return this;
        }

        /**
         * Set notSourceScopesCountry
         * @param notSourceScopesCountry This parameter is used for excluding stories whose source scopes is the specified country value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest notSourceScopesCountry(List<String> notSourceScopesCountry) {
            this.notSourceScopesCountry = notSourceScopesCountry;
            return this;
        }

        /**
         * Set sourceScopesState
         * @param sourceScopesState This parameter is used for finding stories whose source scopes is the specified state/province value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest sourceScopesState(List<String> sourceScopesState) {
            this.sourceScopesState = sourceScopesState;
            return this;
        }

        /**
         * Set notSourceScopesState
         * @param notSourceScopesState This parameter is used for excluding stories whose source scopes is the specified state/province value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest notSourceScopesState(List<String> notSourceScopesState) {
            this.notSourceScopesState = notSourceScopesState;
            return this;
        }

        /**
         * Set sourceScopesCity
         * @param sourceScopesCity This parameter is used for finding stories whose source scopes is the specified city value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest sourceScopesCity(List<String> sourceScopesCity) {
            this.sourceScopesCity = sourceScopesCity;
            return this;
        }

        /**
         * Set notSourceScopesCity
         * @param notSourceScopesCity This parameter is used for excluding stories whose source scopes is the specified city value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest notSourceScopesCity(List<String> notSourceScopesCity) {
            this.notSourceScopesCity = notSourceScopesCity;
            return this;
        }

        /**
         * Set sourceScopesLevel
         * @param sourceScopesLevel This parameter is used for finding stories whose source scopes is the specified level value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest sourceScopesLevel(List<String> sourceScopesLevel) {
            this.sourceScopesLevel = sourceScopesLevel;
            return this;
        }

        /**
         * Set notSourceScopesLevel
         * @param notSourceScopesLevel This parameter is used for excluding stories whose source scopes is the specified level value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest notSourceScopesLevel(List<String> notSourceScopesLevel) {
            this.notSourceScopesLevel = notSourceScopesLevel;
            return this;
        }

        /**
         * Set sourceLinksInCountMin
         * @param sourceLinksInCountMin This parameter is used for finding stories from sources whose Links in count is greater than or equal to the specified value. You can read more about working with Links in count [here](https://newsapi.aylien.com/docs/working-with-links-in-count).  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest sourceLinksInCountMin(Integer sourceLinksInCountMin) {
            this.sourceLinksInCountMin = sourceLinksInCountMin;
            return this;
        }

        /**
         * Set sourceLinksInCountMax
         * @param sourceLinksInCountMax This parameter is used for finding stories from sources whose Links in count is less than or equal to the specified value. You can read more about working with Links in count [here](https://newsapi.aylien.com/docs/working-with-links-in-count).  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest sourceLinksInCountMax(Integer sourceLinksInCountMax) {
            this.sourceLinksInCountMax = sourceLinksInCountMax;
            return this;
        }

        /**
         * Set sourceRankingsAlexaRankMin
         * @param sourceRankingsAlexaRankMin This parameter is used for finding stories from sources whose Alexa rank is greater than or equal to the specified value. You can read more about working with Alexa ranks [here](https://newsapi.aylien.com/docs/working-with-alexa-ranks).  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest sourceRankingsAlexaRankMin(Integer sourceRankingsAlexaRankMin) {
            this.sourceRankingsAlexaRankMin = sourceRankingsAlexaRankMin;
            return this;
        }

        /**
         * Set sourceRankingsAlexaRankMax
         * @param sourceRankingsAlexaRankMax This parameter is used for finding stories from sources whose Alexa rank is less than or equal to the specified value. You can read more about working with Alexa ranks [here](https://newsapi.aylien.com/docs/working-with-alexa-ranks).  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest sourceRankingsAlexaRankMax(Integer sourceRankingsAlexaRankMax) {
            this.sourceRankingsAlexaRankMax = sourceRankingsAlexaRankMax;
            return this;
        }

        /**
         * Set sourceRankingsAlexaCountry
         * @param sourceRankingsAlexaCountry This parameter is used for finding stories from sources whose Alexa rank is in the specified country value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. You can read more about working with Alexa ranks [here](https://newsapi.aylien.com/docs/working-with-alexa-ranks).  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest sourceRankingsAlexaCountry(List<String> sourceRankingsAlexaCountry) {
            this.sourceRankingsAlexaCountry = sourceRankingsAlexaCountry;
            return this;
        }

        /**
         * Set socialSharesCountFacebookMin
         * @param socialSharesCountFacebookMin This parameter is used for finding stories whose Facebook social shares count is greater than or equal to the specified value.  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest socialSharesCountFacebookMin(Integer socialSharesCountFacebookMin) {
            this.socialSharesCountFacebookMin = socialSharesCountFacebookMin;
            return this;
        }

        /**
         * Set socialSharesCountFacebookMax
         * @param socialSharesCountFacebookMax This parameter is used for finding stories whose Facebook social shares count is less than or equal to the specified value.  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest socialSharesCountFacebookMax(Integer socialSharesCountFacebookMax) {
            this.socialSharesCountFacebookMax = socialSharesCountFacebookMax;
            return this;
        }

        /**
         * Set socialSharesCountGooglePlusMin
         * @param socialSharesCountGooglePlusMin This parameter is used for finding stories whose Google+ social shares count is greater than or equal to the specified value.  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest socialSharesCountGooglePlusMin(Integer socialSharesCountGooglePlusMin) {
            this.socialSharesCountGooglePlusMin = socialSharesCountGooglePlusMin;
            return this;
        }

        /**
         * Set socialSharesCountGooglePlusMax
         * @param socialSharesCountGooglePlusMax This parameter is used for finding stories whose Google+ social shares count is less than or equal to the specified value.  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest socialSharesCountGooglePlusMax(Integer socialSharesCountGooglePlusMax) {
            this.socialSharesCountGooglePlusMax = socialSharesCountGooglePlusMax;
            return this;
        }

        /**
         * Set socialSharesCountLinkedinMin
         * @param socialSharesCountLinkedinMin This parameter is used for finding stories whose LinkedIn social shares count is greater than or equal to the specified value.  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest socialSharesCountLinkedinMin(Integer socialSharesCountLinkedinMin) {
            this.socialSharesCountLinkedinMin = socialSharesCountLinkedinMin;
            return this;
        }

        /**
         * Set socialSharesCountLinkedinMax
         * @param socialSharesCountLinkedinMax This parameter is used for finding stories whose LinkedIn social shares count is less than or equal to the specified value.  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest socialSharesCountLinkedinMax(Integer socialSharesCountLinkedinMax) {
            this.socialSharesCountLinkedinMax = socialSharesCountLinkedinMax;
            return this;
        }

        /**
         * Set socialSharesCountRedditMin
         * @param socialSharesCountRedditMin This parameter is used for finding stories whose Reddit social shares count is greater than or equal to the specified value.  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest socialSharesCountRedditMin(Integer socialSharesCountRedditMin) {
            this.socialSharesCountRedditMin = socialSharesCountRedditMin;
            return this;
        }

        /**
         * Set socialSharesCountRedditMax
         * @param socialSharesCountRedditMax This parameter is used for finding stories whose Reddit social shares count is less than or equal to the specified value.  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest socialSharesCountRedditMax(Integer socialSharesCountRedditMax) {
            this.socialSharesCountRedditMax = socialSharesCountRedditMax;
            return this;
        }

        /**
         * Set intervalStart
         * @param intervalStart This parameter is used for setting the start data point of histogram intervals.  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest intervalStart(Integer intervalStart) {
            this.intervalStart = intervalStart;
            return this;
        }

        /**
         * Set intervalEnd
         * @param intervalEnd This parameter is used for setting the end data point of histogram intervals.  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest intervalEnd(Integer intervalEnd) {
            this.intervalEnd = intervalEnd;
            return this;
        }

        /**
         * Set intervalWidth
         * @param intervalWidth This parameter is used for setting the width of histogram intervals.  (optional)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest intervalWidth(Integer intervalWidth) {
            this.intervalWidth = intervalWidth;
            return this;
        }

        /**
         * Set field
         * @param field This parameter is used for specifying the y-axis variable for the histogram.  (optional, default to social_shares_count)
         * @return APIlistHistogramsRequest
         */
        public APIlistHistogramsRequest field(String field) {
            this.field = field;
            return this;
        }

        /**
         * Build call for listHistograms
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An object including an array of the histogram intervals </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listHistogramsCall(id, notId, title, body, text, translationsEnTitle, translationsEnBody, translationsEnText, language, notLanguage, publishedAtStart, publishedAtEnd, categoriesTaxonomy, categoriesConfident, categoriesId, notCategoriesId, categoriesLevel, notCategoriesLevel, entitiesTitleText, notEntitiesTitleText, entitiesTitleType, notEntitiesTitleType, entitiesTitleLinksDbpedia, notEntitiesTitleLinksDbpedia, entitiesBodyText, notEntitiesBodyText, entitiesBodyType, notEntitiesBodyType, entitiesBodyLinksDbpedia, notEntitiesBodyLinksDbpedia, sentimentTitlePolarity, notSentimentTitlePolarity, sentimentBodyPolarity, notSentimentBodyPolarity, mediaImagesCountMin, mediaImagesCountMax, mediaImagesWidthMin, mediaImagesWidthMax, mediaImagesHeightMin, mediaImagesHeightMax, mediaImagesContentLengthMin, mediaImagesContentLengthMax, mediaImagesFormat, notMediaImagesFormat, mediaVideosCountMin, mediaVideosCountMax, authorId, notAuthorId, authorName, notAuthorName, sourceId, notSourceId, sourceName, notSourceName, sourceDomain, notSourceDomain, sourceLocationsCountry, notSourceLocationsCountry, sourceLocationsState, notSourceLocationsState, sourceLocationsCity, notSourceLocationsCity, sourceScopesCountry, notSourceScopesCountry, sourceScopesState, notSourceScopesState, sourceScopesCity, notSourceScopesCity, sourceScopesLevel, notSourceScopesLevel, sourceLinksInCountMin, sourceLinksInCountMax, sourceRankingsAlexaRankMin, sourceRankingsAlexaRankMax, sourceRankingsAlexaCountry, socialSharesCountFacebookMin, socialSharesCountFacebookMax, socialSharesCountGooglePlusMin, socialSharesCountGooglePlusMax, socialSharesCountLinkedinMin, socialSharesCountLinkedinMax, socialSharesCountRedditMin, socialSharesCountRedditMax, intervalStart, intervalEnd, intervalWidth, field, _callback);
        }

        /**
         * Execute listHistograms request
         * @return Histograms
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An object including an array of the histogram intervals </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public Histograms execute() throws ApiException {
            ApiResponse<Histograms> localVarResp = listHistogramsWithHttpInfo(id, notId, title, body, text, translationsEnTitle, translationsEnBody, translationsEnText, language, notLanguage, publishedAtStart, publishedAtEnd, categoriesTaxonomy, categoriesConfident, categoriesId, notCategoriesId, categoriesLevel, notCategoriesLevel, entitiesTitleText, notEntitiesTitleText, entitiesTitleType, notEntitiesTitleType, entitiesTitleLinksDbpedia, notEntitiesTitleLinksDbpedia, entitiesBodyText, notEntitiesBodyText, entitiesBodyType, notEntitiesBodyType, entitiesBodyLinksDbpedia, notEntitiesBodyLinksDbpedia, sentimentTitlePolarity, notSentimentTitlePolarity, sentimentBodyPolarity, notSentimentBodyPolarity, mediaImagesCountMin, mediaImagesCountMax, mediaImagesWidthMin, mediaImagesWidthMax, mediaImagesHeightMin, mediaImagesHeightMax, mediaImagesContentLengthMin, mediaImagesContentLengthMax, mediaImagesFormat, notMediaImagesFormat, mediaVideosCountMin, mediaVideosCountMax, authorId, notAuthorId, authorName, notAuthorName, sourceId, notSourceId, sourceName, notSourceName, sourceDomain, notSourceDomain, sourceLocationsCountry, notSourceLocationsCountry, sourceLocationsState, notSourceLocationsState, sourceLocationsCity, notSourceLocationsCity, sourceScopesCountry, notSourceScopesCountry, sourceScopesState, notSourceScopesState, sourceScopesCity, notSourceScopesCity, sourceScopesLevel, notSourceScopesLevel, sourceLinksInCountMin, sourceLinksInCountMax, sourceRankingsAlexaRankMin, sourceRankingsAlexaRankMax, sourceRankingsAlexaCountry, socialSharesCountFacebookMin, socialSharesCountFacebookMax, socialSharesCountGooglePlusMin, socialSharesCountGooglePlusMax, socialSharesCountLinkedinMin, socialSharesCountLinkedinMax, socialSharesCountRedditMin, socialSharesCountRedditMax, intervalStart, intervalEnd, intervalWidth, field);
            return localVarResp.getData();
        }

        /**
         * Execute listHistograms request with HTTP info returned
         * @return ApiResponse&lt;Histograms&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An object including an array of the histogram intervals </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Histograms> executeWithHttpInfo() throws ApiException {
            return listHistogramsWithHttpInfo(id, notId, title, body, text, translationsEnTitle, translationsEnBody, translationsEnText, language, notLanguage, publishedAtStart, publishedAtEnd, categoriesTaxonomy, categoriesConfident, categoriesId, notCategoriesId, categoriesLevel, notCategoriesLevel, entitiesTitleText, notEntitiesTitleText, entitiesTitleType, notEntitiesTitleType, entitiesTitleLinksDbpedia, notEntitiesTitleLinksDbpedia, entitiesBodyText, notEntitiesBodyText, entitiesBodyType, notEntitiesBodyType, entitiesBodyLinksDbpedia, notEntitiesBodyLinksDbpedia, sentimentTitlePolarity, notSentimentTitlePolarity, sentimentBodyPolarity, notSentimentBodyPolarity, mediaImagesCountMin, mediaImagesCountMax, mediaImagesWidthMin, mediaImagesWidthMax, mediaImagesHeightMin, mediaImagesHeightMax, mediaImagesContentLengthMin, mediaImagesContentLengthMax, mediaImagesFormat, notMediaImagesFormat, mediaVideosCountMin, mediaVideosCountMax, authorId, notAuthorId, authorName, notAuthorName, sourceId, notSourceId, sourceName, notSourceName, sourceDomain, notSourceDomain, sourceLocationsCountry, notSourceLocationsCountry, sourceLocationsState, notSourceLocationsState, sourceLocationsCity, notSourceLocationsCity, sourceScopesCountry, notSourceScopesCountry, sourceScopesState, notSourceScopesState, sourceScopesCity, notSourceScopesCity, sourceScopesLevel, notSourceScopesLevel, sourceLinksInCountMin, sourceLinksInCountMax, sourceRankingsAlexaRankMin, sourceRankingsAlexaRankMax, sourceRankingsAlexaCountry, socialSharesCountFacebookMin, socialSharesCountFacebookMax, socialSharesCountGooglePlusMin, socialSharesCountGooglePlusMax, socialSharesCountLinkedinMin, socialSharesCountLinkedinMax, socialSharesCountRedditMin, socialSharesCountRedditMax, intervalStart, intervalEnd, intervalWidth, field);
        }

        /**
         * Execute listHistograms request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An object including an array of the histogram intervals </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Histograms> _callback) throws ApiException {
            return listHistogramsAsync(id, notId, title, body, text, translationsEnTitle, translationsEnBody, translationsEnText, language, notLanguage, publishedAtStart, publishedAtEnd, categoriesTaxonomy, categoriesConfident, categoriesId, notCategoriesId, categoriesLevel, notCategoriesLevel, entitiesTitleText, notEntitiesTitleText, entitiesTitleType, notEntitiesTitleType, entitiesTitleLinksDbpedia, notEntitiesTitleLinksDbpedia, entitiesBodyText, notEntitiesBodyText, entitiesBodyType, notEntitiesBodyType, entitiesBodyLinksDbpedia, notEntitiesBodyLinksDbpedia, sentimentTitlePolarity, notSentimentTitlePolarity, sentimentBodyPolarity, notSentimentBodyPolarity, mediaImagesCountMin, mediaImagesCountMax, mediaImagesWidthMin, mediaImagesWidthMax, mediaImagesHeightMin, mediaImagesHeightMax, mediaImagesContentLengthMin, mediaImagesContentLengthMax, mediaImagesFormat, notMediaImagesFormat, mediaVideosCountMin, mediaVideosCountMax, authorId, notAuthorId, authorName, notAuthorName, sourceId, notSourceId, sourceName, notSourceName, sourceDomain, notSourceDomain, sourceLocationsCountry, notSourceLocationsCountry, sourceLocationsState, notSourceLocationsState, sourceLocationsCity, notSourceLocationsCity, sourceScopesCountry, notSourceScopesCountry, sourceScopesState, notSourceScopesState, sourceScopesCity, notSourceScopesCity, sourceScopesLevel, notSourceScopesLevel, sourceLinksInCountMin, sourceLinksInCountMax, sourceRankingsAlexaRankMin, sourceRankingsAlexaRankMax, sourceRankingsAlexaCountry, socialSharesCountFacebookMin, socialSharesCountFacebookMax, socialSharesCountGooglePlusMin, socialSharesCountGooglePlusMax, socialSharesCountLinkedinMin, socialSharesCountLinkedinMax, socialSharesCountRedditMin, socialSharesCountRedditMax, intervalStart, intervalEnd, intervalWidth, field, _callback);
        }
    }

    /**
     * List histograms
     * For the numerical metadata that the News API gathers (such as word counts or social shares for example), you can use the histograms endpoint to access and display this information. As this endpoint does not return actual stories, the results you are given will not count towards your story allowance provided by your subscription, so you can effectively query this endpoint free of charge. 
     * @return APIlistHistogramsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object including an array of the histogram intervals </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public APIlistHistogramsRequest listHistograms() {
        return new APIlistHistogramsRequest();
    }
    private okhttp3.Call listRelatedStoriesCall(List<Long> id, List<Long> notId, String title, String body, String text, String translationsEnTitle, String translationsEnBody, String translationsEnText, List<String> language, List<String> notLanguage, String publishedAtStart, String publishedAtEnd, String categoriesTaxonomy, Boolean categoriesConfident, List<String> categoriesId, List<String> notCategoriesId, List<Integer> categoriesLevel, List<Integer> notCategoriesLevel, List<String> entitiesTitleText, List<String> notEntitiesTitleText, List<String> entitiesTitleType, List<String> notEntitiesTitleType, List<String> entitiesTitleLinksDbpedia, List<String> notEntitiesTitleLinksDbpedia, List<String> entitiesBodyText, List<String> notEntitiesBodyText, List<String> entitiesBodyType, List<String> notEntitiesBodyType, List<String> entitiesBodyLinksDbpedia, List<String> notEntitiesBodyLinksDbpedia, String sentimentTitlePolarity, String notSentimentTitlePolarity, String sentimentBodyPolarity, String notSentimentBodyPolarity, Integer mediaImagesCountMin, Integer mediaImagesCountMax, Integer mediaImagesWidthMin, Integer mediaImagesWidthMax, Integer mediaImagesHeightMin, Integer mediaImagesHeightMax, Integer mediaImagesContentLengthMin, Integer mediaImagesContentLengthMax, List<String> mediaImagesFormat, List<String> notMediaImagesFormat, Integer mediaVideosCountMin, Integer mediaVideosCountMax, List<Integer> authorId, List<Integer> notAuthorId, String authorName, String notAuthorName, List<Integer> sourceId, List<Integer> notSourceId, List<String> sourceName, List<String> notSourceName, List<String> sourceDomain, List<String> notSourceDomain, List<String> sourceLocationsCountry, List<String> notSourceLocationsCountry, List<String> sourceLocationsState, List<String> notSourceLocationsState, List<String> sourceLocationsCity, List<String> notSourceLocationsCity, List<String> sourceScopesCountry, List<String> notSourceScopesCountry, List<String> sourceScopesState, List<String> notSourceScopesState, List<String> sourceScopesCity, List<String> notSourceScopesCity, List<String> sourceScopesLevel, List<String> notSourceScopesLevel, Integer sourceLinksInCountMin, Integer sourceLinksInCountMax, Integer sourceRankingsAlexaRankMin, Integer sourceRankingsAlexaRankMax, List<String> sourceRankingsAlexaCountry, Integer socialSharesCountFacebookMin, Integer socialSharesCountFacebookMax, Integer socialSharesCountGooglePlusMin, Integer socialSharesCountGooglePlusMax, Integer socialSharesCountLinkedinMin, Integer socialSharesCountLinkedinMax, Integer socialSharesCountRedditMin, Integer socialSharesCountRedditMax, List<String> clusters, List<String> _return, Long storyId, String storyUrl, String storyTitle, String storyBody, String boostBy, String storyLanguage, Integer perPage, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/related_stories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id[]", id));
        }

        if (notId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!id[]", notId));
        }

        if (title != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title", title));
        }

        if (body != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("body", body));
        }

        if (text != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text", text));
        }

        if (translationsEnTitle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("translations.en.title", translationsEnTitle));
        }

        if (translationsEnBody != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("translations.en.body", translationsEnBody));
        }

        if (translationsEnText != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("translations.en.text", translationsEnText));
        }

        if (language != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "language[]", language));
        }

        if (notLanguage != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!language[]", notLanguage));
        }

        if (publishedAtStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("published_at.start", publishedAtStart));
        }

        if (publishedAtEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("published_at.end", publishedAtEnd));
        }

        if (categoriesTaxonomy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("categories.taxonomy", categoriesTaxonomy));
        }

        if (categoriesConfident != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("categories.confident", categoriesConfident));
        }

        if (categoriesId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "categories.id[]", categoriesId));
        }

        if (notCategoriesId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!categories.id[]", notCategoriesId));
        }

        if (categoriesLevel != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "categories.level[]", categoriesLevel));
        }

        if (notCategoriesLevel != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!categories.level[]", notCategoriesLevel));
        }

        if (entitiesTitleText != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "entities.title.text[]", entitiesTitleText));
        }

        if (notEntitiesTitleText != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!entities.title.text[]", notEntitiesTitleText));
        }

        if (entitiesTitleType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "entities.title.type[]", entitiesTitleType));
        }

        if (notEntitiesTitleType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!entities.title.type[]", notEntitiesTitleType));
        }

        if (entitiesTitleLinksDbpedia != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "entities.title.links.dbpedia[]", entitiesTitleLinksDbpedia));
        }

        if (notEntitiesTitleLinksDbpedia != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!entities.title.links.dbpedia[]", notEntitiesTitleLinksDbpedia));
        }

        if (entitiesBodyText != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "entities.body.text[]", entitiesBodyText));
        }

        if (notEntitiesBodyText != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!entities.body.text[]", notEntitiesBodyText));
        }

        if (entitiesBodyType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "entities.body.type[]", entitiesBodyType));
        }

        if (notEntitiesBodyType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!entities.body.type[]", notEntitiesBodyType));
        }

        if (entitiesBodyLinksDbpedia != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "entities.body.links.dbpedia[]", entitiesBodyLinksDbpedia));
        }

        if (notEntitiesBodyLinksDbpedia != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!entities.body.links.dbpedia[]", notEntitiesBodyLinksDbpedia));
        }

        if (sentimentTitlePolarity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sentiment.title.polarity", sentimentTitlePolarity));
        }

        if (notSentimentTitlePolarity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("!sentiment.title.polarity", notSentimentTitlePolarity));
        }

        if (sentimentBodyPolarity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sentiment.body.polarity", sentimentBodyPolarity));
        }

        if (notSentimentBodyPolarity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("!sentiment.body.polarity", notSentimentBodyPolarity));
        }

        if (mediaImagesCountMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.images.count.min", mediaImagesCountMin));
        }

        if (mediaImagesCountMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.images.count.max", mediaImagesCountMax));
        }

        if (mediaImagesWidthMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.images.width.min", mediaImagesWidthMin));
        }

        if (mediaImagesWidthMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.images.width.max", mediaImagesWidthMax));
        }

        if (mediaImagesHeightMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.images.height.min", mediaImagesHeightMin));
        }

        if (mediaImagesHeightMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.images.height.max", mediaImagesHeightMax));
        }

        if (mediaImagesContentLengthMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.images.content_length.min", mediaImagesContentLengthMin));
        }

        if (mediaImagesContentLengthMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.images.content_length.max", mediaImagesContentLengthMax));
        }

        if (mediaImagesFormat != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "media.images.format[]", mediaImagesFormat));
        }

        if (notMediaImagesFormat != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!media.images.format[]", notMediaImagesFormat));
        }

        if (mediaVideosCountMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.videos.count.min", mediaVideosCountMin));
        }

        if (mediaVideosCountMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.videos.count.max", mediaVideosCountMax));
        }

        if (authorId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "author.id[]", authorId));
        }

        if (notAuthorId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!author.id[]", notAuthorId));
        }

        if (authorName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("author.name", authorName));
        }

        if (notAuthorName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("!author.name", notAuthorName));
        }

        if (sourceId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.id[]", sourceId));
        }

        if (notSourceId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.id[]", notSourceId));
        }

        if (sourceName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.name[]", sourceName));
        }

        if (notSourceName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.name[]", notSourceName));
        }

        if (sourceDomain != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.domain[]", sourceDomain));
        }

        if (notSourceDomain != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.domain[]", notSourceDomain));
        }

        if (sourceLocationsCountry != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.locations.country[]", sourceLocationsCountry));
        }

        if (notSourceLocationsCountry != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.locations.country[]", notSourceLocationsCountry));
        }

        if (sourceLocationsState != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.locations.state[]", sourceLocationsState));
        }

        if (notSourceLocationsState != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.locations.state[]", notSourceLocationsState));
        }

        if (sourceLocationsCity != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.locations.city[]", sourceLocationsCity));
        }

        if (notSourceLocationsCity != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.locations.city[]", notSourceLocationsCity));
        }

        if (sourceScopesCountry != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.scopes.country[]", sourceScopesCountry));
        }

        if (notSourceScopesCountry != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.scopes.country[]", notSourceScopesCountry));
        }

        if (sourceScopesState != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.scopes.state[]", sourceScopesState));
        }

        if (notSourceScopesState != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.scopes.state[]", notSourceScopesState));
        }

        if (sourceScopesCity != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.scopes.city[]", sourceScopesCity));
        }

        if (notSourceScopesCity != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.scopes.city[]", notSourceScopesCity));
        }

        if (sourceScopesLevel != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.scopes.level[]", sourceScopesLevel));
        }

        if (notSourceScopesLevel != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.scopes.level[]", notSourceScopesLevel));
        }

        if (sourceLinksInCountMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source.links_in_count.min", sourceLinksInCountMin));
        }

        if (sourceLinksInCountMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source.links_in_count.max", sourceLinksInCountMax));
        }

        if (sourceRankingsAlexaRankMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source.rankings.alexa.rank.min", sourceRankingsAlexaRankMin));
        }

        if (sourceRankingsAlexaRankMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source.rankings.alexa.rank.max", sourceRankingsAlexaRankMax));
        }

        if (sourceRankingsAlexaCountry != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.rankings.alexa.country[]", sourceRankingsAlexaCountry));
        }

        if (socialSharesCountFacebookMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("social_shares_count.facebook.min", socialSharesCountFacebookMin));
        }

        if (socialSharesCountFacebookMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("social_shares_count.facebook.max", socialSharesCountFacebookMax));
        }

        if (socialSharesCountGooglePlusMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("social_shares_count.google_plus.min", socialSharesCountGooglePlusMin));
        }

        if (socialSharesCountGooglePlusMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("social_shares_count.google_plus.max", socialSharesCountGooglePlusMax));
        }

        if (socialSharesCountLinkedinMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("social_shares_count.linkedin.min", socialSharesCountLinkedinMin));
        }

        if (socialSharesCountLinkedinMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("social_shares_count.linkedin.max", socialSharesCountLinkedinMax));
        }

        if (socialSharesCountRedditMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("social_shares_count.reddit.min", socialSharesCountRedditMin));
        }

        if (socialSharesCountRedditMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("social_shares_count.reddit.max", socialSharesCountRedditMax));
        }

        if (clusters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "clusters[]", clusters));
        }

        if (_return != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "return[]", _return));
        }

        if (storyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("story_id", storyId));
        }

        if (storyUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("story_url", storyUrl));
        }

        if (storyTitle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("story_title", storyTitle));
        }

        if (storyBody != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("story_body", storyBody));
        }

        if (boostBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("boost_by", boostBy));
        }

        if (storyLanguage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("story_language", storyLanguage));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "app_id", "app_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRelatedStoriesValidateBeforeCall(List<Long> id, List<Long> notId, String title, String body, String text, String translationsEnTitle, String translationsEnBody, String translationsEnText, List<String> language, List<String> notLanguage, String publishedAtStart, String publishedAtEnd, String categoriesTaxonomy, Boolean categoriesConfident, List<String> categoriesId, List<String> notCategoriesId, List<Integer> categoriesLevel, List<Integer> notCategoriesLevel, List<String> entitiesTitleText, List<String> notEntitiesTitleText, List<String> entitiesTitleType, List<String> notEntitiesTitleType, List<String> entitiesTitleLinksDbpedia, List<String> notEntitiesTitleLinksDbpedia, List<String> entitiesBodyText, List<String> notEntitiesBodyText, List<String> entitiesBodyType, List<String> notEntitiesBodyType, List<String> entitiesBodyLinksDbpedia, List<String> notEntitiesBodyLinksDbpedia, String sentimentTitlePolarity, String notSentimentTitlePolarity, String sentimentBodyPolarity, String notSentimentBodyPolarity, Integer mediaImagesCountMin, Integer mediaImagesCountMax, Integer mediaImagesWidthMin, Integer mediaImagesWidthMax, Integer mediaImagesHeightMin, Integer mediaImagesHeightMax, Integer mediaImagesContentLengthMin, Integer mediaImagesContentLengthMax, List<String> mediaImagesFormat, List<String> notMediaImagesFormat, Integer mediaVideosCountMin, Integer mediaVideosCountMax, List<Integer> authorId, List<Integer> notAuthorId, String authorName, String notAuthorName, List<Integer> sourceId, List<Integer> notSourceId, List<String> sourceName, List<String> notSourceName, List<String> sourceDomain, List<String> notSourceDomain, List<String> sourceLocationsCountry, List<String> notSourceLocationsCountry, List<String> sourceLocationsState, List<String> notSourceLocationsState, List<String> sourceLocationsCity, List<String> notSourceLocationsCity, List<String> sourceScopesCountry, List<String> notSourceScopesCountry, List<String> sourceScopesState, List<String> notSourceScopesState, List<String> sourceScopesCity, List<String> notSourceScopesCity, List<String> sourceScopesLevel, List<String> notSourceScopesLevel, Integer sourceLinksInCountMin, Integer sourceLinksInCountMax, Integer sourceRankingsAlexaRankMin, Integer sourceRankingsAlexaRankMax, List<String> sourceRankingsAlexaCountry, Integer socialSharesCountFacebookMin, Integer socialSharesCountFacebookMax, Integer socialSharesCountGooglePlusMin, Integer socialSharesCountGooglePlusMax, Integer socialSharesCountLinkedinMin, Integer socialSharesCountLinkedinMax, Integer socialSharesCountRedditMin, Integer socialSharesCountRedditMax, List<String> clusters, List<String> _return, Long storyId, String storyUrl, String storyTitle, String storyBody, String boostBy, String storyLanguage, Integer perPage, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listRelatedStoriesCall(id, notId, title, body, text, translationsEnTitle, translationsEnBody, translationsEnText, language, notLanguage, publishedAtStart, publishedAtEnd, categoriesTaxonomy, categoriesConfident, categoriesId, notCategoriesId, categoriesLevel, notCategoriesLevel, entitiesTitleText, notEntitiesTitleText, entitiesTitleType, notEntitiesTitleType, entitiesTitleLinksDbpedia, notEntitiesTitleLinksDbpedia, entitiesBodyText, notEntitiesBodyText, entitiesBodyType, notEntitiesBodyType, entitiesBodyLinksDbpedia, notEntitiesBodyLinksDbpedia, sentimentTitlePolarity, notSentimentTitlePolarity, sentimentBodyPolarity, notSentimentBodyPolarity, mediaImagesCountMin, mediaImagesCountMax, mediaImagesWidthMin, mediaImagesWidthMax, mediaImagesHeightMin, mediaImagesHeightMax, mediaImagesContentLengthMin, mediaImagesContentLengthMax, mediaImagesFormat, notMediaImagesFormat, mediaVideosCountMin, mediaVideosCountMax, authorId, notAuthorId, authorName, notAuthorName, sourceId, notSourceId, sourceName, notSourceName, sourceDomain, notSourceDomain, sourceLocationsCountry, notSourceLocationsCountry, sourceLocationsState, notSourceLocationsState, sourceLocationsCity, notSourceLocationsCity, sourceScopesCountry, notSourceScopesCountry, sourceScopesState, notSourceScopesState, sourceScopesCity, notSourceScopesCity, sourceScopesLevel, notSourceScopesLevel, sourceLinksInCountMin, sourceLinksInCountMax, sourceRankingsAlexaRankMin, sourceRankingsAlexaRankMax, sourceRankingsAlexaCountry, socialSharesCountFacebookMin, socialSharesCountFacebookMax, socialSharesCountGooglePlusMin, socialSharesCountGooglePlusMax, socialSharesCountLinkedinMin, socialSharesCountLinkedinMax, socialSharesCountRedditMin, socialSharesCountRedditMax, clusters, _return, storyId, storyUrl, storyTitle, storyBody, boostBy, storyLanguage, perPage, _callback);
        return localVarCall;

    }


    private ApiResponse<RelatedStories> listRelatedStoriesWithHttpInfo(List<Long> id, List<Long> notId, String title, String body, String text, String translationsEnTitle, String translationsEnBody, String translationsEnText, List<String> language, List<String> notLanguage, String publishedAtStart, String publishedAtEnd, String categoriesTaxonomy, Boolean categoriesConfident, List<String> categoriesId, List<String> notCategoriesId, List<Integer> categoriesLevel, List<Integer> notCategoriesLevel, List<String> entitiesTitleText, List<String> notEntitiesTitleText, List<String> entitiesTitleType, List<String> notEntitiesTitleType, List<String> entitiesTitleLinksDbpedia, List<String> notEntitiesTitleLinksDbpedia, List<String> entitiesBodyText, List<String> notEntitiesBodyText, List<String> entitiesBodyType, List<String> notEntitiesBodyType, List<String> entitiesBodyLinksDbpedia, List<String> notEntitiesBodyLinksDbpedia, String sentimentTitlePolarity, String notSentimentTitlePolarity, String sentimentBodyPolarity, String notSentimentBodyPolarity, Integer mediaImagesCountMin, Integer mediaImagesCountMax, Integer mediaImagesWidthMin, Integer mediaImagesWidthMax, Integer mediaImagesHeightMin, Integer mediaImagesHeightMax, Integer mediaImagesContentLengthMin, Integer mediaImagesContentLengthMax, List<String> mediaImagesFormat, List<String> notMediaImagesFormat, Integer mediaVideosCountMin, Integer mediaVideosCountMax, List<Integer> authorId, List<Integer> notAuthorId, String authorName, String notAuthorName, List<Integer> sourceId, List<Integer> notSourceId, List<String> sourceName, List<String> notSourceName, List<String> sourceDomain, List<String> notSourceDomain, List<String> sourceLocationsCountry, List<String> notSourceLocationsCountry, List<String> sourceLocationsState, List<String> notSourceLocationsState, List<String> sourceLocationsCity, List<String> notSourceLocationsCity, List<String> sourceScopesCountry, List<String> notSourceScopesCountry, List<String> sourceScopesState, List<String> notSourceScopesState, List<String> sourceScopesCity, List<String> notSourceScopesCity, List<String> sourceScopesLevel, List<String> notSourceScopesLevel, Integer sourceLinksInCountMin, Integer sourceLinksInCountMax, Integer sourceRankingsAlexaRankMin, Integer sourceRankingsAlexaRankMax, List<String> sourceRankingsAlexaCountry, Integer socialSharesCountFacebookMin, Integer socialSharesCountFacebookMax, Integer socialSharesCountGooglePlusMin, Integer socialSharesCountGooglePlusMax, Integer socialSharesCountLinkedinMin, Integer socialSharesCountLinkedinMax, Integer socialSharesCountRedditMin, Integer socialSharesCountRedditMax, List<String> clusters, List<String> _return, Long storyId, String storyUrl, String storyTitle, String storyBody, String boostBy, String storyLanguage, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = listRelatedStoriesValidateBeforeCall(id, notId, title, body, text, translationsEnTitle, translationsEnBody, translationsEnText, language, notLanguage, publishedAtStart, publishedAtEnd, categoriesTaxonomy, categoriesConfident, categoriesId, notCategoriesId, categoriesLevel, notCategoriesLevel, entitiesTitleText, notEntitiesTitleText, entitiesTitleType, notEntitiesTitleType, entitiesTitleLinksDbpedia, notEntitiesTitleLinksDbpedia, entitiesBodyText, notEntitiesBodyText, entitiesBodyType, notEntitiesBodyType, entitiesBodyLinksDbpedia, notEntitiesBodyLinksDbpedia, sentimentTitlePolarity, notSentimentTitlePolarity, sentimentBodyPolarity, notSentimentBodyPolarity, mediaImagesCountMin, mediaImagesCountMax, mediaImagesWidthMin, mediaImagesWidthMax, mediaImagesHeightMin, mediaImagesHeightMax, mediaImagesContentLengthMin, mediaImagesContentLengthMax, mediaImagesFormat, notMediaImagesFormat, mediaVideosCountMin, mediaVideosCountMax, authorId, notAuthorId, authorName, notAuthorName, sourceId, notSourceId, sourceName, notSourceName, sourceDomain, notSourceDomain, sourceLocationsCountry, notSourceLocationsCountry, sourceLocationsState, notSourceLocationsState, sourceLocationsCity, notSourceLocationsCity, sourceScopesCountry, notSourceScopesCountry, sourceScopesState, notSourceScopesState, sourceScopesCity, notSourceScopesCity, sourceScopesLevel, notSourceScopesLevel, sourceLinksInCountMin, sourceLinksInCountMax, sourceRankingsAlexaRankMin, sourceRankingsAlexaRankMax, sourceRankingsAlexaCountry, socialSharesCountFacebookMin, socialSharesCountFacebookMax, socialSharesCountGooglePlusMin, socialSharesCountGooglePlusMax, socialSharesCountLinkedinMin, socialSharesCountLinkedinMax, socialSharesCountRedditMin, socialSharesCountRedditMax, clusters, _return, storyId, storyUrl, storyTitle, storyBody, boostBy, storyLanguage, perPage, null);
        Type localVarReturnType = new TypeToken<RelatedStories>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listRelatedStoriesAsync(List<Long> id, List<Long> notId, String title, String body, String text, String translationsEnTitle, String translationsEnBody, String translationsEnText, List<String> language, List<String> notLanguage, String publishedAtStart, String publishedAtEnd, String categoriesTaxonomy, Boolean categoriesConfident, List<String> categoriesId, List<String> notCategoriesId, List<Integer> categoriesLevel, List<Integer> notCategoriesLevel, List<String> entitiesTitleText, List<String> notEntitiesTitleText, List<String> entitiesTitleType, List<String> notEntitiesTitleType, List<String> entitiesTitleLinksDbpedia, List<String> notEntitiesTitleLinksDbpedia, List<String> entitiesBodyText, List<String> notEntitiesBodyText, List<String> entitiesBodyType, List<String> notEntitiesBodyType, List<String> entitiesBodyLinksDbpedia, List<String> notEntitiesBodyLinksDbpedia, String sentimentTitlePolarity, String notSentimentTitlePolarity, String sentimentBodyPolarity, String notSentimentBodyPolarity, Integer mediaImagesCountMin, Integer mediaImagesCountMax, Integer mediaImagesWidthMin, Integer mediaImagesWidthMax, Integer mediaImagesHeightMin, Integer mediaImagesHeightMax, Integer mediaImagesContentLengthMin, Integer mediaImagesContentLengthMax, List<String> mediaImagesFormat, List<String> notMediaImagesFormat, Integer mediaVideosCountMin, Integer mediaVideosCountMax, List<Integer> authorId, List<Integer> notAuthorId, String authorName, String notAuthorName, List<Integer> sourceId, List<Integer> notSourceId, List<String> sourceName, List<String> notSourceName, List<String> sourceDomain, List<String> notSourceDomain, List<String> sourceLocationsCountry, List<String> notSourceLocationsCountry, List<String> sourceLocationsState, List<String> notSourceLocationsState, List<String> sourceLocationsCity, List<String> notSourceLocationsCity, List<String> sourceScopesCountry, List<String> notSourceScopesCountry, List<String> sourceScopesState, List<String> notSourceScopesState, List<String> sourceScopesCity, List<String> notSourceScopesCity, List<String> sourceScopesLevel, List<String> notSourceScopesLevel, Integer sourceLinksInCountMin, Integer sourceLinksInCountMax, Integer sourceRankingsAlexaRankMin, Integer sourceRankingsAlexaRankMax, List<String> sourceRankingsAlexaCountry, Integer socialSharesCountFacebookMin, Integer socialSharesCountFacebookMax, Integer socialSharesCountGooglePlusMin, Integer socialSharesCountGooglePlusMax, Integer socialSharesCountLinkedinMin, Integer socialSharesCountLinkedinMax, Integer socialSharesCountRedditMin, Integer socialSharesCountRedditMax, List<String> clusters, List<String> _return, Long storyId, String storyUrl, String storyTitle, String storyBody, String boostBy, String storyLanguage, Integer perPage, final ApiCallback<RelatedStories> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRelatedStoriesValidateBeforeCall(id, notId, title, body, text, translationsEnTitle, translationsEnBody, translationsEnText, language, notLanguage, publishedAtStart, publishedAtEnd, categoriesTaxonomy, categoriesConfident, categoriesId, notCategoriesId, categoriesLevel, notCategoriesLevel, entitiesTitleText, notEntitiesTitleText, entitiesTitleType, notEntitiesTitleType, entitiesTitleLinksDbpedia, notEntitiesTitleLinksDbpedia, entitiesBodyText, notEntitiesBodyText, entitiesBodyType, notEntitiesBodyType, entitiesBodyLinksDbpedia, notEntitiesBodyLinksDbpedia, sentimentTitlePolarity, notSentimentTitlePolarity, sentimentBodyPolarity, notSentimentBodyPolarity, mediaImagesCountMin, mediaImagesCountMax, mediaImagesWidthMin, mediaImagesWidthMax, mediaImagesHeightMin, mediaImagesHeightMax, mediaImagesContentLengthMin, mediaImagesContentLengthMax, mediaImagesFormat, notMediaImagesFormat, mediaVideosCountMin, mediaVideosCountMax, authorId, notAuthorId, authorName, notAuthorName, sourceId, notSourceId, sourceName, notSourceName, sourceDomain, notSourceDomain, sourceLocationsCountry, notSourceLocationsCountry, sourceLocationsState, notSourceLocationsState, sourceLocationsCity, notSourceLocationsCity, sourceScopesCountry, notSourceScopesCountry, sourceScopesState, notSourceScopesState, sourceScopesCity, notSourceScopesCity, sourceScopesLevel, notSourceScopesLevel, sourceLinksInCountMin, sourceLinksInCountMax, sourceRankingsAlexaRankMin, sourceRankingsAlexaRankMax, sourceRankingsAlexaCountry, socialSharesCountFacebookMin, socialSharesCountFacebookMax, socialSharesCountGooglePlusMin, socialSharesCountGooglePlusMax, socialSharesCountLinkedinMin, socialSharesCountLinkedinMax, socialSharesCountRedditMin, socialSharesCountRedditMax, clusters, _return, storyId, storyUrl, storyTitle, storyBody, boostBy, storyLanguage, perPage, _callback);
        Type localVarReturnType = new TypeToken<RelatedStories>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistRelatedStoriesRequest {
        private List<Long> id;
        private List<Long> notId;
        private String title;
        private String body;
        private String text;
        private String translationsEnTitle;
        private String translationsEnBody;
        private String translationsEnText;
        private List<String> language;
        private List<String> notLanguage;
        private String publishedAtStart;
        private String publishedAtEnd;
        private String categoriesTaxonomy;
        private Boolean categoriesConfident;
        private List<String> categoriesId;
        private List<String> notCategoriesId;
        private List<Integer> categoriesLevel;
        private List<Integer> notCategoriesLevel;
        private List<String> entitiesTitleText;
        private List<String> notEntitiesTitleText;
        private List<String> entitiesTitleType;
        private List<String> notEntitiesTitleType;
        private List<String> entitiesTitleLinksDbpedia;
        private List<String> notEntitiesTitleLinksDbpedia;
        private List<String> entitiesBodyText;
        private List<String> notEntitiesBodyText;
        private List<String> entitiesBodyType;
        private List<String> notEntitiesBodyType;
        private List<String> entitiesBodyLinksDbpedia;
        private List<String> notEntitiesBodyLinksDbpedia;
        private String sentimentTitlePolarity;
        private String notSentimentTitlePolarity;
        private String sentimentBodyPolarity;
        private String notSentimentBodyPolarity;
        private Integer mediaImagesCountMin;
        private Integer mediaImagesCountMax;
        private Integer mediaImagesWidthMin;
        private Integer mediaImagesWidthMax;
        private Integer mediaImagesHeightMin;
        private Integer mediaImagesHeightMax;
        private Integer mediaImagesContentLengthMin;
        private Integer mediaImagesContentLengthMax;
        private List<String> mediaImagesFormat;
        private List<String> notMediaImagesFormat;
        private Integer mediaVideosCountMin;
        private Integer mediaVideosCountMax;
        private List<Integer> authorId;
        private List<Integer> notAuthorId;
        private String authorName;
        private String notAuthorName;
        private List<Integer> sourceId;
        private List<Integer> notSourceId;
        private List<String> sourceName;
        private List<String> notSourceName;
        private List<String> sourceDomain;
        private List<String> notSourceDomain;
        private List<String> sourceLocationsCountry;
        private List<String> notSourceLocationsCountry;
        private List<String> sourceLocationsState;
        private List<String> notSourceLocationsState;
        private List<String> sourceLocationsCity;
        private List<String> notSourceLocationsCity;
        private List<String> sourceScopesCountry;
        private List<String> notSourceScopesCountry;
        private List<String> sourceScopesState;
        private List<String> notSourceScopesState;
        private List<String> sourceScopesCity;
        private List<String> notSourceScopesCity;
        private List<String> sourceScopesLevel;
        private List<String> notSourceScopesLevel;
        private Integer sourceLinksInCountMin;
        private Integer sourceLinksInCountMax;
        private Integer sourceRankingsAlexaRankMin;
        private Integer sourceRankingsAlexaRankMax;
        private List<String> sourceRankingsAlexaCountry;
        private Integer socialSharesCountFacebookMin;
        private Integer socialSharesCountFacebookMax;
        private Integer socialSharesCountGooglePlusMin;
        private Integer socialSharesCountGooglePlusMax;
        private Integer socialSharesCountLinkedinMin;
        private Integer socialSharesCountLinkedinMax;
        private Integer socialSharesCountRedditMin;
        private Integer socialSharesCountRedditMax;
        private List<String> clusters;
        private List<String> _return;
        private Long storyId;
        private String storyUrl;
        private String storyTitle;
        private String storyBody;
        private String boostBy;
        private String storyLanguage;
        private Integer perPage;

        private APIlistRelatedStoriesRequest() {
        }

        /**
         * Set id
         * @param id This parameter is used for finding stories by story id.  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest id(List<Long> id) {
            this.id = id;
            return this;
        }

        /**
         * Set notId
         * @param notId This parameter is used for excluding stories by story id.  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest notId(List<Long> notId) {
            this.notId = notId;
            return this;
        }

        /**
         * Set title
         * @param title This parameter is used for finding stories whose title contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators).  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest title(String title) {
            this.title = title;
            return this;
        }

        /**
         * Set body
         * @param body This parameter is used for finding stories whose body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators).  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest body(String body) {
            this.body = body;
            return this;
        }

        /**
         * Set text
         * @param text This parameter is used for finding stories whose title or body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators).  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest text(String text) {
            this.text = text;
            return this;
        }

        /**
         * Set translationsEnTitle
         * @param translationsEnTitle This parameter is used for finding stories whose translation title contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators).  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest translationsEnTitle(String translationsEnTitle) {
            this.translationsEnTitle = translationsEnTitle;
            return this;
        }

        /**
         * Set translationsEnBody
         * @param translationsEnBody This parameter is used for finding stories whose translation body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators).  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest translationsEnBody(String translationsEnBody) {
            this.translationsEnBody = translationsEnBody;
            return this;
        }

        /**
         * Set translationsEnText
         * @param translationsEnText This parameter is used for finding stories whose translation title or body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators).  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest translationsEnText(String translationsEnText) {
            this.translationsEnText = translationsEnText;
            return this;
        }

        /**
         * Set language
         * @param language This parameter is used for finding stories whose language is the specified value. It supports [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language codes.  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest language(List<String> language) {
            this.language = language;
            return this;
        }

        /**
         * Set notLanguage
         * @param notLanguage This parameter is used for excluding stories whose language is the specified value. It supports [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language codes.  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest notLanguage(List<String> notLanguage) {
            this.notLanguage = notLanguage;
            return this;
        }

        /**
         * Set publishedAtStart
         * @param publishedAtStart This parameter is used for finding stories whose published at time is greater than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates).  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest publishedAtStart(String publishedAtStart) {
            this.publishedAtStart = publishedAtStart;
            return this;
        }

        /**
         * Set publishedAtEnd
         * @param publishedAtEnd This parameter is used for finding stories whose published at time is less than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates).  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest publishedAtEnd(String publishedAtEnd) {
            this.publishedAtEnd = publishedAtEnd;
            return this;
        }

        /**
         * Set categoriesTaxonomy
         * @param categoriesTaxonomy This parameter is used for defining the type of the taxonomy for the rest of the categories queries. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories).  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest categoriesTaxonomy(String categoriesTaxonomy) {
            this.categoriesTaxonomy = categoriesTaxonomy;
            return this;
        }

        /**
         * Set categoriesConfident
         * @param categoriesConfident This parameter is used for finding stories whose categories are confident. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories).  (optional, default to true)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest categoriesConfident(Boolean categoriesConfident) {
            this.categoriesConfident = categoriesConfident;
            return this;
        }

        /**
         * Set categoriesId
         * @param categoriesId This parameter is used for finding stories by categories id. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories).  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest categoriesId(List<String> categoriesId) {
            this.categoriesId = categoriesId;
            return this;
        }

        /**
         * Set notCategoriesId
         * @param notCategoriesId This parameter is used for excluding stories by categories id. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories).  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest notCategoriesId(List<String> notCategoriesId) {
            this.notCategoriesId = notCategoriesId;
            return this;
        }

        /**
         * Set categoriesLevel
         * @param categoriesLevel This parameter is used for finding stories by categories level. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories).  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest categoriesLevel(List<Integer> categoriesLevel) {
            this.categoriesLevel = categoriesLevel;
            return this;
        }

        /**
         * Set notCategoriesLevel
         * @param notCategoriesLevel This parameter is used for excluding stories by categories level. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories).  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest notCategoriesLevel(List<Integer> notCategoriesLevel) {
            this.notCategoriesLevel = notCategoriesLevel;
            return this;
        }

        /**
         * Set entitiesTitleText
         * @param entitiesTitleText This parameter is used to find stories based on the specified entities &#x60;text&#x60; in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest entitiesTitleText(List<String> entitiesTitleText) {
            this.entitiesTitleText = entitiesTitleText;
            return this;
        }

        /**
         * Set notEntitiesTitleText
         * @param notEntitiesTitleText This parameter is used to exclude stories based on the specified entities &#x60;text&#x60; in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest notEntitiesTitleText(List<String> notEntitiesTitleText) {
            this.notEntitiesTitleText = notEntitiesTitleText;
            return this;
        }

        /**
         * Set entitiesTitleType
         * @param entitiesTitleType This parameter is used to find stories based on the specified entities &#x60;type&#x60; in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest entitiesTitleType(List<String> entitiesTitleType) {
            this.entitiesTitleType = entitiesTitleType;
            return this;
        }

        /**
         * Set notEntitiesTitleType
         * @param notEntitiesTitleType This parameter is used to exclude stories based on the specified entities &#x60;type&#x60; in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest notEntitiesTitleType(List<String> notEntitiesTitleType) {
            this.notEntitiesTitleType = notEntitiesTitleType;
            return this;
        }

        /**
         * Set entitiesTitleLinksDbpedia
         * @param entitiesTitleLinksDbpedia This parameter is used to find stories based on the specified entities dbpedia URL in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest entitiesTitleLinksDbpedia(List<String> entitiesTitleLinksDbpedia) {
            this.entitiesTitleLinksDbpedia = entitiesTitleLinksDbpedia;
            return this;
        }

        /**
         * Set notEntitiesTitleLinksDbpedia
         * @param notEntitiesTitleLinksDbpedia This parameter is used to exclude stories based on the specified entities dbpedia URL in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest notEntitiesTitleLinksDbpedia(List<String> notEntitiesTitleLinksDbpedia) {
            this.notEntitiesTitleLinksDbpedia = notEntitiesTitleLinksDbpedia;
            return this;
        }

        /**
         * Set entitiesBodyText
         * @param entitiesBodyText This parameter is used to find stories based on the specified entities &#x60;text&#x60; in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest entitiesBodyText(List<String> entitiesBodyText) {
            this.entitiesBodyText = entitiesBodyText;
            return this;
        }

        /**
         * Set notEntitiesBodyText
         * @param notEntitiesBodyText This parameter is used to exclude stories based on the specified entities &#x60;text&#x60; in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest notEntitiesBodyText(List<String> notEntitiesBodyText) {
            this.notEntitiesBodyText = notEntitiesBodyText;
            return this;
        }

        /**
         * Set entitiesBodyType
         * @param entitiesBodyType This parameter is used to find stories based on the specified entities &#x60;type&#x60; in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest entitiesBodyType(List<String> entitiesBodyType) {
            this.entitiesBodyType = entitiesBodyType;
            return this;
        }

        /**
         * Set notEntitiesBodyType
         * @param notEntitiesBodyType This parameter is used to exclude stories based on the specified entities &#x60;type&#x60; in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest notEntitiesBodyType(List<String> notEntitiesBodyType) {
            this.notEntitiesBodyType = notEntitiesBodyType;
            return this;
        }

        /**
         * Set entitiesBodyLinksDbpedia
         * @param entitiesBodyLinksDbpedia This parameter is used to find stories based on the specified entities dbpedia URL in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest entitiesBodyLinksDbpedia(List<String> entitiesBodyLinksDbpedia) {
            this.entitiesBodyLinksDbpedia = entitiesBodyLinksDbpedia;
            return this;
        }

        /**
         * Set notEntitiesBodyLinksDbpedia
         * @param notEntitiesBodyLinksDbpedia This parameter is used to exclude stories based on the specified entities dbpedia URL in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest notEntitiesBodyLinksDbpedia(List<String> notEntitiesBodyLinksDbpedia) {
            this.notEntitiesBodyLinksDbpedia = notEntitiesBodyLinksDbpedia;
            return this;
        }

        /**
         * Set sentimentTitlePolarity
         * @param sentimentTitlePolarity This parameter is used for finding stories whose title sentiment is the specified value.  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest sentimentTitlePolarity(String sentimentTitlePolarity) {
            this.sentimentTitlePolarity = sentimentTitlePolarity;
            return this;
        }

        /**
         * Set notSentimentTitlePolarity
         * @param notSentimentTitlePolarity This parameter is used for excluding stories whose title sentiment is the specified value.  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest notSentimentTitlePolarity(String notSentimentTitlePolarity) {
            this.notSentimentTitlePolarity = notSentimentTitlePolarity;
            return this;
        }

        /**
         * Set sentimentBodyPolarity
         * @param sentimentBodyPolarity This parameter is used for finding stories whose body sentiment is the specified value.  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest sentimentBodyPolarity(String sentimentBodyPolarity) {
            this.sentimentBodyPolarity = sentimentBodyPolarity;
            return this;
        }

        /**
         * Set notSentimentBodyPolarity
         * @param notSentimentBodyPolarity This parameter is used for excluding stories whose body sentiment is the specified value.  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest notSentimentBodyPolarity(String notSentimentBodyPolarity) {
            this.notSentimentBodyPolarity = notSentimentBodyPolarity;
            return this;
        }

        /**
         * Set mediaImagesCountMin
         * @param mediaImagesCountMin This parameter is used for finding stories whose number of images is greater than or equal to the specified value.  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest mediaImagesCountMin(Integer mediaImagesCountMin) {
            this.mediaImagesCountMin = mediaImagesCountMin;
            return this;
        }

        /**
         * Set mediaImagesCountMax
         * @param mediaImagesCountMax This parameter is used for finding stories whose number of images is less than or equal to the specified value.  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest mediaImagesCountMax(Integer mediaImagesCountMax) {
            this.mediaImagesCountMax = mediaImagesCountMax;
            return this;
        }

        /**
         * Set mediaImagesWidthMin
         * @param mediaImagesWidthMin This parameter is used for finding stories whose width of images are greater than or equal to the specified value.  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest mediaImagesWidthMin(Integer mediaImagesWidthMin) {
            this.mediaImagesWidthMin = mediaImagesWidthMin;
            return this;
        }

        /**
         * Set mediaImagesWidthMax
         * @param mediaImagesWidthMax This parameter is used for finding stories whose width of images are less than or equal to the specified value.  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest mediaImagesWidthMax(Integer mediaImagesWidthMax) {
            this.mediaImagesWidthMax = mediaImagesWidthMax;
            return this;
        }

        /**
         * Set mediaImagesHeightMin
         * @param mediaImagesHeightMin This parameter is used for finding stories whose height of images are greater than or equal to the specified value.  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest mediaImagesHeightMin(Integer mediaImagesHeightMin) {
            this.mediaImagesHeightMin = mediaImagesHeightMin;
            return this;
        }

        /**
         * Set mediaImagesHeightMax
         * @param mediaImagesHeightMax This parameter is used for finding stories whose height of images are less than or equal to the specified value.  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest mediaImagesHeightMax(Integer mediaImagesHeightMax) {
            this.mediaImagesHeightMax = mediaImagesHeightMax;
            return this;
        }

        /**
         * Set mediaImagesContentLengthMin
         * @param mediaImagesContentLengthMin This parameter is used for finding stories whose images content length are greater than or equal to the specified value.  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest mediaImagesContentLengthMin(Integer mediaImagesContentLengthMin) {
            this.mediaImagesContentLengthMin = mediaImagesContentLengthMin;
            return this;
        }

        /**
         * Set mediaImagesContentLengthMax
         * @param mediaImagesContentLengthMax This parameter is used for finding stories whose images content length are less than or equal to the specified value.  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest mediaImagesContentLengthMax(Integer mediaImagesContentLengthMax) {
            this.mediaImagesContentLengthMax = mediaImagesContentLengthMax;
            return this;
        }

        /**
         * Set mediaImagesFormat
         * @param mediaImagesFormat This parameter is used for finding stories whose images format are the specified value.  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest mediaImagesFormat(List<String> mediaImagesFormat) {
            this.mediaImagesFormat = mediaImagesFormat;
            return this;
        }

        /**
         * Set notMediaImagesFormat
         * @param notMediaImagesFormat This parameter is used for excluding stories whose images format are the specified value.  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest notMediaImagesFormat(List<String> notMediaImagesFormat) {
            this.notMediaImagesFormat = notMediaImagesFormat;
            return this;
        }

        /**
         * Set mediaVideosCountMin
         * @param mediaVideosCountMin This parameter is used for finding stories whose number of videos is greater than or equal to the specified value.  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest mediaVideosCountMin(Integer mediaVideosCountMin) {
            this.mediaVideosCountMin = mediaVideosCountMin;
            return this;
        }

        /**
         * Set mediaVideosCountMax
         * @param mediaVideosCountMax This parameter is used for finding stories whose number of videos is less than or equal to the specified value.  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest mediaVideosCountMax(Integer mediaVideosCountMax) {
            this.mediaVideosCountMax = mediaVideosCountMax;
            return this;
        }

        /**
         * Set authorId
         * @param authorId This parameter is used for finding stories whose author id is the specified value.  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest authorId(List<Integer> authorId) {
            this.authorId = authorId;
            return this;
        }

        /**
         * Set notAuthorId
         * @param notAuthorId This parameter is used for excluding stories whose author id is the specified value.  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest notAuthorId(List<Integer> notAuthorId) {
            this.notAuthorId = notAuthorId;
            return this;
        }

        /**
         * Set authorName
         * @param authorName This parameter is used for finding stories whose author full name contains the specified value.  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest authorName(String authorName) {
            this.authorName = authorName;
            return this;
        }

        /**
         * Set notAuthorName
         * @param notAuthorName This parameter is used for excluding stories whose author full name contains the specified value.  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest notAuthorName(String notAuthorName) {
            this.notAuthorName = notAuthorName;
            return this;
        }

        /**
         * Set sourceId
         * @param sourceId This parameter is used for finding stories whose source id is the specified value.  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest sourceId(List<Integer> sourceId) {
            this.sourceId = sourceId;
            return this;
        }

        /**
         * Set notSourceId
         * @param notSourceId This parameter is used for excluding stories whose source id is the specified value.  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest notSourceId(List<Integer> notSourceId) {
            this.notSourceId = notSourceId;
            return this;
        }

        /**
         * Set sourceName
         * @param sourceName This parameter is used for finding stories whose source name contains the specified value.  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest sourceName(List<String> sourceName) {
            this.sourceName = sourceName;
            return this;
        }

        /**
         * Set notSourceName
         * @param notSourceName This parameter is used for excluding stories whose source name contains the specified value.  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest notSourceName(List<String> notSourceName) {
            this.notSourceName = notSourceName;
            return this;
        }

        /**
         * Set sourceDomain
         * @param sourceDomain This parameter is used for finding stories whose source domain is the specified value.  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest sourceDomain(List<String> sourceDomain) {
            this.sourceDomain = sourceDomain;
            return this;
        }

        /**
         * Set notSourceDomain
         * @param notSourceDomain This parameter is used for excluding stories whose source domain is the specified value.  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest notSourceDomain(List<String> notSourceDomain) {
            this.notSourceDomain = notSourceDomain;
            return this;
        }

        /**
         * Set sourceLocationsCountry
         * @param sourceLocationsCountry This parameter is used for finding stories whose source country is the specified value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest sourceLocationsCountry(List<String> sourceLocationsCountry) {
            this.sourceLocationsCountry = sourceLocationsCountry;
            return this;
        }

        /**
         * Set notSourceLocationsCountry
         * @param notSourceLocationsCountry This parameter is used for excluding stories whose source country is the specified value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest notSourceLocationsCountry(List<String> notSourceLocationsCountry) {
            this.notSourceLocationsCountry = notSourceLocationsCountry;
            return this;
        }

        /**
         * Set sourceLocationsState
         * @param sourceLocationsState This parameter is used for finding stories whose source state/province is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest sourceLocationsState(List<String> sourceLocationsState) {
            this.sourceLocationsState = sourceLocationsState;
            return this;
        }

        /**
         * Set notSourceLocationsState
         * @param notSourceLocationsState This parameter is used for excluding stories whose source state/province is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest notSourceLocationsState(List<String> notSourceLocationsState) {
            this.notSourceLocationsState = notSourceLocationsState;
            return this;
        }

        /**
         * Set sourceLocationsCity
         * @param sourceLocationsCity This parameter is used for finding stories whose source city is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest sourceLocationsCity(List<String> sourceLocationsCity) {
            this.sourceLocationsCity = sourceLocationsCity;
            return this;
        }

        /**
         * Set notSourceLocationsCity
         * @param notSourceLocationsCity This parameter is used for excluding stories whose source city is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest notSourceLocationsCity(List<String> notSourceLocationsCity) {
            this.notSourceLocationsCity = notSourceLocationsCity;
            return this;
        }

        /**
         * Set sourceScopesCountry
         * @param sourceScopesCountry This parameter is used for finding stories whose source scopes is the specified country value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest sourceScopesCountry(List<String> sourceScopesCountry) {
            this.sourceScopesCountry = sourceScopesCountry;
            return this;
        }

        /**
         * Set notSourceScopesCountry
         * @param notSourceScopesCountry This parameter is used for excluding stories whose source scopes is the specified country value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest notSourceScopesCountry(List<String> notSourceScopesCountry) {
            this.notSourceScopesCountry = notSourceScopesCountry;
            return this;
        }

        /**
         * Set sourceScopesState
         * @param sourceScopesState This parameter is used for finding stories whose source scopes is the specified state/province value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest sourceScopesState(List<String> sourceScopesState) {
            this.sourceScopesState = sourceScopesState;
            return this;
        }

        /**
         * Set notSourceScopesState
         * @param notSourceScopesState This parameter is used for excluding stories whose source scopes is the specified state/province value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest notSourceScopesState(List<String> notSourceScopesState) {
            this.notSourceScopesState = notSourceScopesState;
            return this;
        }

        /**
         * Set sourceScopesCity
         * @param sourceScopesCity This parameter is used for finding stories whose source scopes is the specified city value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest sourceScopesCity(List<String> sourceScopesCity) {
            this.sourceScopesCity = sourceScopesCity;
            return this;
        }

        /**
         * Set notSourceScopesCity
         * @param notSourceScopesCity This parameter is used for excluding stories whose source scopes is the specified city value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest notSourceScopesCity(List<String> notSourceScopesCity) {
            this.notSourceScopesCity = notSourceScopesCity;
            return this;
        }

        /**
         * Set sourceScopesLevel
         * @param sourceScopesLevel This parameter is used for finding stories whose source scopes is the specified level value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest sourceScopesLevel(List<String> sourceScopesLevel) {
            this.sourceScopesLevel = sourceScopesLevel;
            return this;
        }

        /**
         * Set notSourceScopesLevel
         * @param notSourceScopesLevel This parameter is used for excluding stories whose source scopes is the specified level value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest notSourceScopesLevel(List<String> notSourceScopesLevel) {
            this.notSourceScopesLevel = notSourceScopesLevel;
            return this;
        }

        /**
         * Set sourceLinksInCountMin
         * @param sourceLinksInCountMin This parameter is used for finding stories from sources whose Links in count is greater than or equal to the specified value. You can read more about working with Links in count [here](https://newsapi.aylien.com/docs/working-with-links-in-count).  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest sourceLinksInCountMin(Integer sourceLinksInCountMin) {
            this.sourceLinksInCountMin = sourceLinksInCountMin;
            return this;
        }

        /**
         * Set sourceLinksInCountMax
         * @param sourceLinksInCountMax This parameter is used for finding stories from sources whose Links in count is less than or equal to the specified value. You can read more about working with Links in count [here](https://newsapi.aylien.com/docs/working-with-links-in-count).  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest sourceLinksInCountMax(Integer sourceLinksInCountMax) {
            this.sourceLinksInCountMax = sourceLinksInCountMax;
            return this;
        }

        /**
         * Set sourceRankingsAlexaRankMin
         * @param sourceRankingsAlexaRankMin This parameter is used for finding stories from sources whose Alexa rank is greater than or equal to the specified value. You can read more about working with Alexa ranks [here](https://newsapi.aylien.com/docs/working-with-alexa-ranks).  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest sourceRankingsAlexaRankMin(Integer sourceRankingsAlexaRankMin) {
            this.sourceRankingsAlexaRankMin = sourceRankingsAlexaRankMin;
            return this;
        }

        /**
         * Set sourceRankingsAlexaRankMax
         * @param sourceRankingsAlexaRankMax This parameter is used for finding stories from sources whose Alexa rank is less than or equal to the specified value. You can read more about working with Alexa ranks [here](https://newsapi.aylien.com/docs/working-with-alexa-ranks).  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest sourceRankingsAlexaRankMax(Integer sourceRankingsAlexaRankMax) {
            this.sourceRankingsAlexaRankMax = sourceRankingsAlexaRankMax;
            return this;
        }

        /**
         * Set sourceRankingsAlexaCountry
         * @param sourceRankingsAlexaCountry This parameter is used for finding stories from sources whose Alexa rank is in the specified country value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. You can read more about working with Alexa ranks [here](https://newsapi.aylien.com/docs/working-with-alexa-ranks).  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest sourceRankingsAlexaCountry(List<String> sourceRankingsAlexaCountry) {
            this.sourceRankingsAlexaCountry = sourceRankingsAlexaCountry;
            return this;
        }

        /**
         * Set socialSharesCountFacebookMin
         * @param socialSharesCountFacebookMin This parameter is used for finding stories whose Facebook social shares count is greater than or equal to the specified value.  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest socialSharesCountFacebookMin(Integer socialSharesCountFacebookMin) {
            this.socialSharesCountFacebookMin = socialSharesCountFacebookMin;
            return this;
        }

        /**
         * Set socialSharesCountFacebookMax
         * @param socialSharesCountFacebookMax This parameter is used for finding stories whose Facebook social shares count is less than or equal to the specified value.  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest socialSharesCountFacebookMax(Integer socialSharesCountFacebookMax) {
            this.socialSharesCountFacebookMax = socialSharesCountFacebookMax;
            return this;
        }

        /**
         * Set socialSharesCountGooglePlusMin
         * @param socialSharesCountGooglePlusMin This parameter is used for finding stories whose Google+ social shares count is greater than or equal to the specified value.  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest socialSharesCountGooglePlusMin(Integer socialSharesCountGooglePlusMin) {
            this.socialSharesCountGooglePlusMin = socialSharesCountGooglePlusMin;
            return this;
        }

        /**
         * Set socialSharesCountGooglePlusMax
         * @param socialSharesCountGooglePlusMax This parameter is used for finding stories whose Google+ social shares count is less than or equal to the specified value.  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest socialSharesCountGooglePlusMax(Integer socialSharesCountGooglePlusMax) {
            this.socialSharesCountGooglePlusMax = socialSharesCountGooglePlusMax;
            return this;
        }

        /**
         * Set socialSharesCountLinkedinMin
         * @param socialSharesCountLinkedinMin This parameter is used for finding stories whose LinkedIn social shares count is greater than or equal to the specified value.  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest socialSharesCountLinkedinMin(Integer socialSharesCountLinkedinMin) {
            this.socialSharesCountLinkedinMin = socialSharesCountLinkedinMin;
            return this;
        }

        /**
         * Set socialSharesCountLinkedinMax
         * @param socialSharesCountLinkedinMax This parameter is used for finding stories whose LinkedIn social shares count is less than or equal to the specified value.  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest socialSharesCountLinkedinMax(Integer socialSharesCountLinkedinMax) {
            this.socialSharesCountLinkedinMax = socialSharesCountLinkedinMax;
            return this;
        }

        /**
         * Set socialSharesCountRedditMin
         * @param socialSharesCountRedditMin This parameter is used for finding stories whose Reddit social shares count is greater than or equal to the specified value.  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest socialSharesCountRedditMin(Integer socialSharesCountRedditMin) {
            this.socialSharesCountRedditMin = socialSharesCountRedditMin;
            return this;
        }

        /**
         * Set socialSharesCountRedditMax
         * @param socialSharesCountRedditMax This parameter is used for finding stories whose Reddit social shares count is less than or equal to the specified value.  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest socialSharesCountRedditMax(Integer socialSharesCountRedditMax) {
            this.socialSharesCountRedditMax = socialSharesCountRedditMax;
            return this;
        }

        /**
         * Set clusters
         * @param clusters This parameter is used for finding stories with belonging to one of clusters in a specific set of clusters You can read more about working with clustering [here](https://newsapi.aylien.com/docs/working-with-clustering).  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest clusters(List<String> clusters) {
            this.clusters = clusters;
            return this;
        }

        /**
         * Set _return
         * @param _return This parameter is used for specifying return fields. (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest _return(List<String> _return) {
            this._return = _return;
            return this;
        }

        /**
         * Set storyId
         * @param storyId A story id (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest storyId(Long storyId) {
            this.storyId = storyId;
            return this;
        }

        /**
         * Set storyUrl
         * @param storyUrl An article or webpage (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest storyUrl(String storyUrl) {
            this.storyUrl = storyUrl;
            return this;
        }

        /**
         * Set storyTitle
         * @param storyTitle Title of the article (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest storyTitle(String storyTitle) {
            this.storyTitle = storyTitle;
            return this;
        }

        /**
         * Set storyBody
         * @param storyBody Body of the article (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest storyBody(String storyBody) {
            this.storyBody = storyBody;
            return this;
        }

        /**
         * Set boostBy
         * @param boostBy This parameter is used for boosting the result by the specified value.  (optional)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest boostBy(String boostBy) {
            this.boostBy = boostBy;
            return this;
        }

        /**
         * Set storyLanguage
         * @param storyLanguage This parameter is used for setting the language of the story. It supports [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language codes.  (optional, default to auto)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest storyLanguage(String storyLanguage) {
            this.storyLanguage = storyLanguage;
            return this;
        }

        /**
         * Set perPage
         * @param perPage This parameter is used for specifying number of items in each page.  (optional, default to 3)
         * @return APIlistRelatedStoriesRequest
         */
        public APIlistRelatedStoriesRequest perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }

        /**
         * Build call for listRelatedStories
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An object including an array of related stories </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listRelatedStoriesCall(id, notId, title, body, text, translationsEnTitle, translationsEnBody, translationsEnText, language, notLanguage, publishedAtStart, publishedAtEnd, categoriesTaxonomy, categoriesConfident, categoriesId, notCategoriesId, categoriesLevel, notCategoriesLevel, entitiesTitleText, notEntitiesTitleText, entitiesTitleType, notEntitiesTitleType, entitiesTitleLinksDbpedia, notEntitiesTitleLinksDbpedia, entitiesBodyText, notEntitiesBodyText, entitiesBodyType, notEntitiesBodyType, entitiesBodyLinksDbpedia, notEntitiesBodyLinksDbpedia, sentimentTitlePolarity, notSentimentTitlePolarity, sentimentBodyPolarity, notSentimentBodyPolarity, mediaImagesCountMin, mediaImagesCountMax, mediaImagesWidthMin, mediaImagesWidthMax, mediaImagesHeightMin, mediaImagesHeightMax, mediaImagesContentLengthMin, mediaImagesContentLengthMax, mediaImagesFormat, notMediaImagesFormat, mediaVideosCountMin, mediaVideosCountMax, authorId, notAuthorId, authorName, notAuthorName, sourceId, notSourceId, sourceName, notSourceName, sourceDomain, notSourceDomain, sourceLocationsCountry, notSourceLocationsCountry, sourceLocationsState, notSourceLocationsState, sourceLocationsCity, notSourceLocationsCity, sourceScopesCountry, notSourceScopesCountry, sourceScopesState, notSourceScopesState, sourceScopesCity, notSourceScopesCity, sourceScopesLevel, notSourceScopesLevel, sourceLinksInCountMin, sourceLinksInCountMax, sourceRankingsAlexaRankMin, sourceRankingsAlexaRankMax, sourceRankingsAlexaCountry, socialSharesCountFacebookMin, socialSharesCountFacebookMax, socialSharesCountGooglePlusMin, socialSharesCountGooglePlusMax, socialSharesCountLinkedinMin, socialSharesCountLinkedinMax, socialSharesCountRedditMin, socialSharesCountRedditMax, clusters, _return, storyId, storyUrl, storyTitle, storyBody, boostBy, storyLanguage, perPage, _callback);
        }

        /**
         * Execute listRelatedStories request
         * @return RelatedStories
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An object including an array of related stories </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public RelatedStories execute() throws ApiException {
            ApiResponse<RelatedStories> localVarResp = listRelatedStoriesWithHttpInfo(id, notId, title, body, text, translationsEnTitle, translationsEnBody, translationsEnText, language, notLanguage, publishedAtStart, publishedAtEnd, categoriesTaxonomy, categoriesConfident, categoriesId, notCategoriesId, categoriesLevel, notCategoriesLevel, entitiesTitleText, notEntitiesTitleText, entitiesTitleType, notEntitiesTitleType, entitiesTitleLinksDbpedia, notEntitiesTitleLinksDbpedia, entitiesBodyText, notEntitiesBodyText, entitiesBodyType, notEntitiesBodyType, entitiesBodyLinksDbpedia, notEntitiesBodyLinksDbpedia, sentimentTitlePolarity, notSentimentTitlePolarity, sentimentBodyPolarity, notSentimentBodyPolarity, mediaImagesCountMin, mediaImagesCountMax, mediaImagesWidthMin, mediaImagesWidthMax, mediaImagesHeightMin, mediaImagesHeightMax, mediaImagesContentLengthMin, mediaImagesContentLengthMax, mediaImagesFormat, notMediaImagesFormat, mediaVideosCountMin, mediaVideosCountMax, authorId, notAuthorId, authorName, notAuthorName, sourceId, notSourceId, sourceName, notSourceName, sourceDomain, notSourceDomain, sourceLocationsCountry, notSourceLocationsCountry, sourceLocationsState, notSourceLocationsState, sourceLocationsCity, notSourceLocationsCity, sourceScopesCountry, notSourceScopesCountry, sourceScopesState, notSourceScopesState, sourceScopesCity, notSourceScopesCity, sourceScopesLevel, notSourceScopesLevel, sourceLinksInCountMin, sourceLinksInCountMax, sourceRankingsAlexaRankMin, sourceRankingsAlexaRankMax, sourceRankingsAlexaCountry, socialSharesCountFacebookMin, socialSharesCountFacebookMax, socialSharesCountGooglePlusMin, socialSharesCountGooglePlusMax, socialSharesCountLinkedinMin, socialSharesCountLinkedinMax, socialSharesCountRedditMin, socialSharesCountRedditMax, clusters, _return, storyId, storyUrl, storyTitle, storyBody, boostBy, storyLanguage, perPage);
            return localVarResp.getData();
        }

        /**
         * Execute listRelatedStories request with HTTP info returned
         * @return ApiResponse&lt;RelatedStories&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An object including an array of related stories </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RelatedStories> executeWithHttpInfo() throws ApiException {
            return listRelatedStoriesWithHttpInfo(id, notId, title, body, text, translationsEnTitle, translationsEnBody, translationsEnText, language, notLanguage, publishedAtStart, publishedAtEnd, categoriesTaxonomy, categoriesConfident, categoriesId, notCategoriesId, categoriesLevel, notCategoriesLevel, entitiesTitleText, notEntitiesTitleText, entitiesTitleType, notEntitiesTitleType, entitiesTitleLinksDbpedia, notEntitiesTitleLinksDbpedia, entitiesBodyText, notEntitiesBodyText, entitiesBodyType, notEntitiesBodyType, entitiesBodyLinksDbpedia, notEntitiesBodyLinksDbpedia, sentimentTitlePolarity, notSentimentTitlePolarity, sentimentBodyPolarity, notSentimentBodyPolarity, mediaImagesCountMin, mediaImagesCountMax, mediaImagesWidthMin, mediaImagesWidthMax, mediaImagesHeightMin, mediaImagesHeightMax, mediaImagesContentLengthMin, mediaImagesContentLengthMax, mediaImagesFormat, notMediaImagesFormat, mediaVideosCountMin, mediaVideosCountMax, authorId, notAuthorId, authorName, notAuthorName, sourceId, notSourceId, sourceName, notSourceName, sourceDomain, notSourceDomain, sourceLocationsCountry, notSourceLocationsCountry, sourceLocationsState, notSourceLocationsState, sourceLocationsCity, notSourceLocationsCity, sourceScopesCountry, notSourceScopesCountry, sourceScopesState, notSourceScopesState, sourceScopesCity, notSourceScopesCity, sourceScopesLevel, notSourceScopesLevel, sourceLinksInCountMin, sourceLinksInCountMax, sourceRankingsAlexaRankMin, sourceRankingsAlexaRankMax, sourceRankingsAlexaCountry, socialSharesCountFacebookMin, socialSharesCountFacebookMax, socialSharesCountGooglePlusMin, socialSharesCountGooglePlusMax, socialSharesCountLinkedinMin, socialSharesCountLinkedinMax, socialSharesCountRedditMin, socialSharesCountRedditMax, clusters, _return, storyId, storyUrl, storyTitle, storyBody, boostBy, storyLanguage, perPage);
        }

        /**
         * Execute listRelatedStories request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An object including an array of related stories </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RelatedStories> _callback) throws ApiException {
            return listRelatedStoriesAsync(id, notId, title, body, text, translationsEnTitle, translationsEnBody, translationsEnText, language, notLanguage, publishedAtStart, publishedAtEnd, categoriesTaxonomy, categoriesConfident, categoriesId, notCategoriesId, categoriesLevel, notCategoriesLevel, entitiesTitleText, notEntitiesTitleText, entitiesTitleType, notEntitiesTitleType, entitiesTitleLinksDbpedia, notEntitiesTitleLinksDbpedia, entitiesBodyText, notEntitiesBodyText, entitiesBodyType, notEntitiesBodyType, entitiesBodyLinksDbpedia, notEntitiesBodyLinksDbpedia, sentimentTitlePolarity, notSentimentTitlePolarity, sentimentBodyPolarity, notSentimentBodyPolarity, mediaImagesCountMin, mediaImagesCountMax, mediaImagesWidthMin, mediaImagesWidthMax, mediaImagesHeightMin, mediaImagesHeightMax, mediaImagesContentLengthMin, mediaImagesContentLengthMax, mediaImagesFormat, notMediaImagesFormat, mediaVideosCountMin, mediaVideosCountMax, authorId, notAuthorId, authorName, notAuthorName, sourceId, notSourceId, sourceName, notSourceName, sourceDomain, notSourceDomain, sourceLocationsCountry, notSourceLocationsCountry, sourceLocationsState, notSourceLocationsState, sourceLocationsCity, notSourceLocationsCity, sourceScopesCountry, notSourceScopesCountry, sourceScopesState, notSourceScopesState, sourceScopesCity, notSourceScopesCity, sourceScopesLevel, notSourceScopesLevel, sourceLinksInCountMin, sourceLinksInCountMax, sourceRankingsAlexaRankMin, sourceRankingsAlexaRankMax, sourceRankingsAlexaCountry, socialSharesCountFacebookMin, socialSharesCountFacebookMax, socialSharesCountGooglePlusMin, socialSharesCountGooglePlusMax, socialSharesCountLinkedinMin, socialSharesCountLinkedinMax, socialSharesCountRedditMin, socialSharesCountRedditMax, clusters, _return, storyId, storyUrl, storyTitle, storyBody, boostBy, storyLanguage, perPage, _callback);
        }
    }

    /**
     * List related stories
     * This endpoint is used for finding semantically similar stories based on the parameters you provide as inputs. For example, if you want to find stories similar to a Tweet or any text extract you input, the related stories endpoint will analyze the entities present and the meaning of the text, and find stories with a similar meaning. The maximum number of related stories returned is 100. 
     * @return APIlistRelatedStoriesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object including an array of related stories </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public APIlistRelatedStoriesRequest listRelatedStories() {
        return new APIlistRelatedStoriesRequest();
    }
    private okhttp3.Call listStoriesCall(List<Long> id, List<Long> notId, String title, String body, String text, String translationsEnTitle, String translationsEnBody, String translationsEnText, List<String> language, List<String> notLanguage, String publishedAtStart, String publishedAtEnd, String categoriesTaxonomy, Boolean categoriesConfident, List<String> categoriesId, List<String> notCategoriesId, List<Integer> categoriesLevel, List<Integer> notCategoriesLevel, List<String> entitiesTitleText, List<String> notEntitiesTitleText, List<String> entitiesTitleType, List<String> notEntitiesTitleType, List<String> entitiesTitleLinksDbpedia, List<String> notEntitiesTitleLinksDbpedia, List<String> entitiesBodyText, List<String> notEntitiesBodyText, List<String> entitiesBodyType, List<String> notEntitiesBodyType, List<String> entitiesBodyLinksDbpedia, List<String> notEntitiesBodyLinksDbpedia, String sentimentTitlePolarity, String notSentimentTitlePolarity, String sentimentBodyPolarity, String notSentimentBodyPolarity, Integer mediaImagesCountMin, Integer mediaImagesCountMax, Integer mediaImagesWidthMin, Integer mediaImagesWidthMax, Integer mediaImagesHeightMin, Integer mediaImagesHeightMax, Integer mediaImagesContentLengthMin, Integer mediaImagesContentLengthMax, List<String> mediaImagesFormat, List<String> notMediaImagesFormat, Integer mediaVideosCountMin, Integer mediaVideosCountMax, List<Integer> authorId, List<Integer> notAuthorId, String authorName, String notAuthorName, List<Integer> sourceId, List<Integer> notSourceId, List<String> sourceName, List<String> notSourceName, List<String> sourceDomain, List<String> notSourceDomain, List<String> sourceLocationsCountry, List<String> notSourceLocationsCountry, List<String> sourceLocationsState, List<String> notSourceLocationsState, List<String> sourceLocationsCity, List<String> notSourceLocationsCity, List<String> sourceScopesCountry, List<String> notSourceScopesCountry, List<String> sourceScopesState, List<String> notSourceScopesState, List<String> sourceScopesCity, List<String> notSourceScopesCity, List<String> sourceScopesLevel, List<String> notSourceScopesLevel, Integer sourceLinksInCountMin, Integer sourceLinksInCountMax, Integer sourceRankingsAlexaRankMin, Integer sourceRankingsAlexaRankMax, List<String> sourceRankingsAlexaCountry, Integer socialSharesCountFacebookMin, Integer socialSharesCountFacebookMax, Integer socialSharesCountGooglePlusMin, Integer socialSharesCountGooglePlusMax, Integer socialSharesCountLinkedinMin, Integer socialSharesCountLinkedinMax, Integer socialSharesCountRedditMin, Integer socialSharesCountRedditMax, List<String> clusters, List<String> _return, String sortBy, String sortDirection, String cursor, Integer perPage, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id[]", id));
        }

        if (notId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!id[]", notId));
        }

        if (title != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title", title));
        }

        if (body != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("body", body));
        }

        if (text != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text", text));
        }

        if (translationsEnTitle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("translations.en.title", translationsEnTitle));
        }

        if (translationsEnBody != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("translations.en.body", translationsEnBody));
        }

        if (translationsEnText != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("translations.en.text", translationsEnText));
        }

        if (language != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "language[]", language));
        }

        if (notLanguage != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!language[]", notLanguage));
        }

        if (publishedAtStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("published_at.start", publishedAtStart));
        }

        if (publishedAtEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("published_at.end", publishedAtEnd));
        }

        if (categoriesTaxonomy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("categories.taxonomy", categoriesTaxonomy));
        }

        if (categoriesConfident != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("categories.confident", categoriesConfident));
        }

        if (categoriesId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "categories.id[]", categoriesId));
        }

        if (notCategoriesId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!categories.id[]", notCategoriesId));
        }

        if (categoriesLevel != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "categories.level[]", categoriesLevel));
        }

        if (notCategoriesLevel != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!categories.level[]", notCategoriesLevel));
        }

        if (entitiesTitleText != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "entities.title.text[]", entitiesTitleText));
        }

        if (notEntitiesTitleText != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!entities.title.text[]", notEntitiesTitleText));
        }

        if (entitiesTitleType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "entities.title.type[]", entitiesTitleType));
        }

        if (notEntitiesTitleType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!entities.title.type[]", notEntitiesTitleType));
        }

        if (entitiesTitleLinksDbpedia != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "entities.title.links.dbpedia[]", entitiesTitleLinksDbpedia));
        }

        if (notEntitiesTitleLinksDbpedia != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!entities.title.links.dbpedia[]", notEntitiesTitleLinksDbpedia));
        }

        if (entitiesBodyText != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "entities.body.text[]", entitiesBodyText));
        }

        if (notEntitiesBodyText != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!entities.body.text[]", notEntitiesBodyText));
        }

        if (entitiesBodyType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "entities.body.type[]", entitiesBodyType));
        }

        if (notEntitiesBodyType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!entities.body.type[]", notEntitiesBodyType));
        }

        if (entitiesBodyLinksDbpedia != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "entities.body.links.dbpedia[]", entitiesBodyLinksDbpedia));
        }

        if (notEntitiesBodyLinksDbpedia != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!entities.body.links.dbpedia[]", notEntitiesBodyLinksDbpedia));
        }

        if (sentimentTitlePolarity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sentiment.title.polarity", sentimentTitlePolarity));
        }

        if (notSentimentTitlePolarity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("!sentiment.title.polarity", notSentimentTitlePolarity));
        }

        if (sentimentBodyPolarity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sentiment.body.polarity", sentimentBodyPolarity));
        }

        if (notSentimentBodyPolarity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("!sentiment.body.polarity", notSentimentBodyPolarity));
        }

        if (mediaImagesCountMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.images.count.min", mediaImagesCountMin));
        }

        if (mediaImagesCountMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.images.count.max", mediaImagesCountMax));
        }

        if (mediaImagesWidthMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.images.width.min", mediaImagesWidthMin));
        }

        if (mediaImagesWidthMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.images.width.max", mediaImagesWidthMax));
        }

        if (mediaImagesHeightMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.images.height.min", mediaImagesHeightMin));
        }

        if (mediaImagesHeightMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.images.height.max", mediaImagesHeightMax));
        }

        if (mediaImagesContentLengthMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.images.content_length.min", mediaImagesContentLengthMin));
        }

        if (mediaImagesContentLengthMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.images.content_length.max", mediaImagesContentLengthMax));
        }

        if (mediaImagesFormat != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "media.images.format[]", mediaImagesFormat));
        }

        if (notMediaImagesFormat != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!media.images.format[]", notMediaImagesFormat));
        }

        if (mediaVideosCountMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.videos.count.min", mediaVideosCountMin));
        }

        if (mediaVideosCountMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.videos.count.max", mediaVideosCountMax));
        }

        if (authorId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "author.id[]", authorId));
        }

        if (notAuthorId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!author.id[]", notAuthorId));
        }

        if (authorName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("author.name", authorName));
        }

        if (notAuthorName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("!author.name", notAuthorName));
        }

        if (sourceId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.id[]", sourceId));
        }

        if (notSourceId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.id[]", notSourceId));
        }

        if (sourceName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.name[]", sourceName));
        }

        if (notSourceName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.name[]", notSourceName));
        }

        if (sourceDomain != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.domain[]", sourceDomain));
        }

        if (notSourceDomain != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.domain[]", notSourceDomain));
        }

        if (sourceLocationsCountry != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.locations.country[]", sourceLocationsCountry));
        }

        if (notSourceLocationsCountry != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.locations.country[]", notSourceLocationsCountry));
        }

        if (sourceLocationsState != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.locations.state[]", sourceLocationsState));
        }

        if (notSourceLocationsState != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.locations.state[]", notSourceLocationsState));
        }

        if (sourceLocationsCity != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.locations.city[]", sourceLocationsCity));
        }

        if (notSourceLocationsCity != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.locations.city[]", notSourceLocationsCity));
        }

        if (sourceScopesCountry != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.scopes.country[]", sourceScopesCountry));
        }

        if (notSourceScopesCountry != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.scopes.country[]", notSourceScopesCountry));
        }

        if (sourceScopesState != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.scopes.state[]", sourceScopesState));
        }

        if (notSourceScopesState != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.scopes.state[]", notSourceScopesState));
        }

        if (sourceScopesCity != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.scopes.city[]", sourceScopesCity));
        }

        if (notSourceScopesCity != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.scopes.city[]", notSourceScopesCity));
        }

        if (sourceScopesLevel != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.scopes.level[]", sourceScopesLevel));
        }

        if (notSourceScopesLevel != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.scopes.level[]", notSourceScopesLevel));
        }

        if (sourceLinksInCountMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source.links_in_count.min", sourceLinksInCountMin));
        }

        if (sourceLinksInCountMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source.links_in_count.max", sourceLinksInCountMax));
        }

        if (sourceRankingsAlexaRankMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source.rankings.alexa.rank.min", sourceRankingsAlexaRankMin));
        }

        if (sourceRankingsAlexaRankMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source.rankings.alexa.rank.max", sourceRankingsAlexaRankMax));
        }

        if (sourceRankingsAlexaCountry != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.rankings.alexa.country[]", sourceRankingsAlexaCountry));
        }

        if (socialSharesCountFacebookMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("social_shares_count.facebook.min", socialSharesCountFacebookMin));
        }

        if (socialSharesCountFacebookMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("social_shares_count.facebook.max", socialSharesCountFacebookMax));
        }

        if (socialSharesCountGooglePlusMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("social_shares_count.google_plus.min", socialSharesCountGooglePlusMin));
        }

        if (socialSharesCountGooglePlusMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("social_shares_count.google_plus.max", socialSharesCountGooglePlusMax));
        }

        if (socialSharesCountLinkedinMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("social_shares_count.linkedin.min", socialSharesCountLinkedinMin));
        }

        if (socialSharesCountLinkedinMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("social_shares_count.linkedin.max", socialSharesCountLinkedinMax));
        }

        if (socialSharesCountRedditMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("social_shares_count.reddit.min", socialSharesCountRedditMin));
        }

        if (socialSharesCountRedditMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("social_shares_count.reddit.max", socialSharesCountRedditMax));
        }

        if (clusters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "clusters[]", clusters));
        }

        if (_return != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "return[]", _return));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortDirection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_direction", sortDirection));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "app_id", "app_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listStoriesValidateBeforeCall(List<Long> id, List<Long> notId, String title, String body, String text, String translationsEnTitle, String translationsEnBody, String translationsEnText, List<String> language, List<String> notLanguage, String publishedAtStart, String publishedAtEnd, String categoriesTaxonomy, Boolean categoriesConfident, List<String> categoriesId, List<String> notCategoriesId, List<Integer> categoriesLevel, List<Integer> notCategoriesLevel, List<String> entitiesTitleText, List<String> notEntitiesTitleText, List<String> entitiesTitleType, List<String> notEntitiesTitleType, List<String> entitiesTitleLinksDbpedia, List<String> notEntitiesTitleLinksDbpedia, List<String> entitiesBodyText, List<String> notEntitiesBodyText, List<String> entitiesBodyType, List<String> notEntitiesBodyType, List<String> entitiesBodyLinksDbpedia, List<String> notEntitiesBodyLinksDbpedia, String sentimentTitlePolarity, String notSentimentTitlePolarity, String sentimentBodyPolarity, String notSentimentBodyPolarity, Integer mediaImagesCountMin, Integer mediaImagesCountMax, Integer mediaImagesWidthMin, Integer mediaImagesWidthMax, Integer mediaImagesHeightMin, Integer mediaImagesHeightMax, Integer mediaImagesContentLengthMin, Integer mediaImagesContentLengthMax, List<String> mediaImagesFormat, List<String> notMediaImagesFormat, Integer mediaVideosCountMin, Integer mediaVideosCountMax, List<Integer> authorId, List<Integer> notAuthorId, String authorName, String notAuthorName, List<Integer> sourceId, List<Integer> notSourceId, List<String> sourceName, List<String> notSourceName, List<String> sourceDomain, List<String> notSourceDomain, List<String> sourceLocationsCountry, List<String> notSourceLocationsCountry, List<String> sourceLocationsState, List<String> notSourceLocationsState, List<String> sourceLocationsCity, List<String> notSourceLocationsCity, List<String> sourceScopesCountry, List<String> notSourceScopesCountry, List<String> sourceScopesState, List<String> notSourceScopesState, List<String> sourceScopesCity, List<String> notSourceScopesCity, List<String> sourceScopesLevel, List<String> notSourceScopesLevel, Integer sourceLinksInCountMin, Integer sourceLinksInCountMax, Integer sourceRankingsAlexaRankMin, Integer sourceRankingsAlexaRankMax, List<String> sourceRankingsAlexaCountry, Integer socialSharesCountFacebookMin, Integer socialSharesCountFacebookMax, Integer socialSharesCountGooglePlusMin, Integer socialSharesCountGooglePlusMax, Integer socialSharesCountLinkedinMin, Integer socialSharesCountLinkedinMax, Integer socialSharesCountRedditMin, Integer socialSharesCountRedditMax, List<String> clusters, List<String> _return, String sortBy, String sortDirection, String cursor, Integer perPage, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listStoriesCall(id, notId, title, body, text, translationsEnTitle, translationsEnBody, translationsEnText, language, notLanguage, publishedAtStart, publishedAtEnd, categoriesTaxonomy, categoriesConfident, categoriesId, notCategoriesId, categoriesLevel, notCategoriesLevel, entitiesTitleText, notEntitiesTitleText, entitiesTitleType, notEntitiesTitleType, entitiesTitleLinksDbpedia, notEntitiesTitleLinksDbpedia, entitiesBodyText, notEntitiesBodyText, entitiesBodyType, notEntitiesBodyType, entitiesBodyLinksDbpedia, notEntitiesBodyLinksDbpedia, sentimentTitlePolarity, notSentimentTitlePolarity, sentimentBodyPolarity, notSentimentBodyPolarity, mediaImagesCountMin, mediaImagesCountMax, mediaImagesWidthMin, mediaImagesWidthMax, mediaImagesHeightMin, mediaImagesHeightMax, mediaImagesContentLengthMin, mediaImagesContentLengthMax, mediaImagesFormat, notMediaImagesFormat, mediaVideosCountMin, mediaVideosCountMax, authorId, notAuthorId, authorName, notAuthorName, sourceId, notSourceId, sourceName, notSourceName, sourceDomain, notSourceDomain, sourceLocationsCountry, notSourceLocationsCountry, sourceLocationsState, notSourceLocationsState, sourceLocationsCity, notSourceLocationsCity, sourceScopesCountry, notSourceScopesCountry, sourceScopesState, notSourceScopesState, sourceScopesCity, notSourceScopesCity, sourceScopesLevel, notSourceScopesLevel, sourceLinksInCountMin, sourceLinksInCountMax, sourceRankingsAlexaRankMin, sourceRankingsAlexaRankMax, sourceRankingsAlexaCountry, socialSharesCountFacebookMin, socialSharesCountFacebookMax, socialSharesCountGooglePlusMin, socialSharesCountGooglePlusMax, socialSharesCountLinkedinMin, socialSharesCountLinkedinMax, socialSharesCountRedditMin, socialSharesCountRedditMax, clusters, _return, sortBy, sortDirection, cursor, perPage, _callback);
        return localVarCall;

    }


    private ApiResponse<Stories> listStoriesWithHttpInfo(List<Long> id, List<Long> notId, String title, String body, String text, String translationsEnTitle, String translationsEnBody, String translationsEnText, List<String> language, List<String> notLanguage, String publishedAtStart, String publishedAtEnd, String categoriesTaxonomy, Boolean categoriesConfident, List<String> categoriesId, List<String> notCategoriesId, List<Integer> categoriesLevel, List<Integer> notCategoriesLevel, List<String> entitiesTitleText, List<String> notEntitiesTitleText, List<String> entitiesTitleType, List<String> notEntitiesTitleType, List<String> entitiesTitleLinksDbpedia, List<String> notEntitiesTitleLinksDbpedia, List<String> entitiesBodyText, List<String> notEntitiesBodyText, List<String> entitiesBodyType, List<String> notEntitiesBodyType, List<String> entitiesBodyLinksDbpedia, List<String> notEntitiesBodyLinksDbpedia, String sentimentTitlePolarity, String notSentimentTitlePolarity, String sentimentBodyPolarity, String notSentimentBodyPolarity, Integer mediaImagesCountMin, Integer mediaImagesCountMax, Integer mediaImagesWidthMin, Integer mediaImagesWidthMax, Integer mediaImagesHeightMin, Integer mediaImagesHeightMax, Integer mediaImagesContentLengthMin, Integer mediaImagesContentLengthMax, List<String> mediaImagesFormat, List<String> notMediaImagesFormat, Integer mediaVideosCountMin, Integer mediaVideosCountMax, List<Integer> authorId, List<Integer> notAuthorId, String authorName, String notAuthorName, List<Integer> sourceId, List<Integer> notSourceId, List<String> sourceName, List<String> notSourceName, List<String> sourceDomain, List<String> notSourceDomain, List<String> sourceLocationsCountry, List<String> notSourceLocationsCountry, List<String> sourceLocationsState, List<String> notSourceLocationsState, List<String> sourceLocationsCity, List<String> notSourceLocationsCity, List<String> sourceScopesCountry, List<String> notSourceScopesCountry, List<String> sourceScopesState, List<String> notSourceScopesState, List<String> sourceScopesCity, List<String> notSourceScopesCity, List<String> sourceScopesLevel, List<String> notSourceScopesLevel, Integer sourceLinksInCountMin, Integer sourceLinksInCountMax, Integer sourceRankingsAlexaRankMin, Integer sourceRankingsAlexaRankMax, List<String> sourceRankingsAlexaCountry, Integer socialSharesCountFacebookMin, Integer socialSharesCountFacebookMax, Integer socialSharesCountGooglePlusMin, Integer socialSharesCountGooglePlusMax, Integer socialSharesCountLinkedinMin, Integer socialSharesCountLinkedinMax, Integer socialSharesCountRedditMin, Integer socialSharesCountRedditMax, List<String> clusters, List<String> _return, String sortBy, String sortDirection, String cursor, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = listStoriesValidateBeforeCall(id, notId, title, body, text, translationsEnTitle, translationsEnBody, translationsEnText, language, notLanguage, publishedAtStart, publishedAtEnd, categoriesTaxonomy, categoriesConfident, categoriesId, notCategoriesId, categoriesLevel, notCategoriesLevel, entitiesTitleText, notEntitiesTitleText, entitiesTitleType, notEntitiesTitleType, entitiesTitleLinksDbpedia, notEntitiesTitleLinksDbpedia, entitiesBodyText, notEntitiesBodyText, entitiesBodyType, notEntitiesBodyType, entitiesBodyLinksDbpedia, notEntitiesBodyLinksDbpedia, sentimentTitlePolarity, notSentimentTitlePolarity, sentimentBodyPolarity, notSentimentBodyPolarity, mediaImagesCountMin, mediaImagesCountMax, mediaImagesWidthMin, mediaImagesWidthMax, mediaImagesHeightMin, mediaImagesHeightMax, mediaImagesContentLengthMin, mediaImagesContentLengthMax, mediaImagesFormat, notMediaImagesFormat, mediaVideosCountMin, mediaVideosCountMax, authorId, notAuthorId, authorName, notAuthorName, sourceId, notSourceId, sourceName, notSourceName, sourceDomain, notSourceDomain, sourceLocationsCountry, notSourceLocationsCountry, sourceLocationsState, notSourceLocationsState, sourceLocationsCity, notSourceLocationsCity, sourceScopesCountry, notSourceScopesCountry, sourceScopesState, notSourceScopesState, sourceScopesCity, notSourceScopesCity, sourceScopesLevel, notSourceScopesLevel, sourceLinksInCountMin, sourceLinksInCountMax, sourceRankingsAlexaRankMin, sourceRankingsAlexaRankMax, sourceRankingsAlexaCountry, socialSharesCountFacebookMin, socialSharesCountFacebookMax, socialSharesCountGooglePlusMin, socialSharesCountGooglePlusMax, socialSharesCountLinkedinMin, socialSharesCountLinkedinMax, socialSharesCountRedditMin, socialSharesCountRedditMax, clusters, _return, sortBy, sortDirection, cursor, perPage, null);
        Type localVarReturnType = new TypeToken<Stories>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listStoriesAsync(List<Long> id, List<Long> notId, String title, String body, String text, String translationsEnTitle, String translationsEnBody, String translationsEnText, List<String> language, List<String> notLanguage, String publishedAtStart, String publishedAtEnd, String categoriesTaxonomy, Boolean categoriesConfident, List<String> categoriesId, List<String> notCategoriesId, List<Integer> categoriesLevel, List<Integer> notCategoriesLevel, List<String> entitiesTitleText, List<String> notEntitiesTitleText, List<String> entitiesTitleType, List<String> notEntitiesTitleType, List<String> entitiesTitleLinksDbpedia, List<String> notEntitiesTitleLinksDbpedia, List<String> entitiesBodyText, List<String> notEntitiesBodyText, List<String> entitiesBodyType, List<String> notEntitiesBodyType, List<String> entitiesBodyLinksDbpedia, List<String> notEntitiesBodyLinksDbpedia, String sentimentTitlePolarity, String notSentimentTitlePolarity, String sentimentBodyPolarity, String notSentimentBodyPolarity, Integer mediaImagesCountMin, Integer mediaImagesCountMax, Integer mediaImagesWidthMin, Integer mediaImagesWidthMax, Integer mediaImagesHeightMin, Integer mediaImagesHeightMax, Integer mediaImagesContentLengthMin, Integer mediaImagesContentLengthMax, List<String> mediaImagesFormat, List<String> notMediaImagesFormat, Integer mediaVideosCountMin, Integer mediaVideosCountMax, List<Integer> authorId, List<Integer> notAuthorId, String authorName, String notAuthorName, List<Integer> sourceId, List<Integer> notSourceId, List<String> sourceName, List<String> notSourceName, List<String> sourceDomain, List<String> notSourceDomain, List<String> sourceLocationsCountry, List<String> notSourceLocationsCountry, List<String> sourceLocationsState, List<String> notSourceLocationsState, List<String> sourceLocationsCity, List<String> notSourceLocationsCity, List<String> sourceScopesCountry, List<String> notSourceScopesCountry, List<String> sourceScopesState, List<String> notSourceScopesState, List<String> sourceScopesCity, List<String> notSourceScopesCity, List<String> sourceScopesLevel, List<String> notSourceScopesLevel, Integer sourceLinksInCountMin, Integer sourceLinksInCountMax, Integer sourceRankingsAlexaRankMin, Integer sourceRankingsAlexaRankMax, List<String> sourceRankingsAlexaCountry, Integer socialSharesCountFacebookMin, Integer socialSharesCountFacebookMax, Integer socialSharesCountGooglePlusMin, Integer socialSharesCountGooglePlusMax, Integer socialSharesCountLinkedinMin, Integer socialSharesCountLinkedinMax, Integer socialSharesCountRedditMin, Integer socialSharesCountRedditMax, List<String> clusters, List<String> _return, String sortBy, String sortDirection, String cursor, Integer perPage, final ApiCallback<Stories> _callback) throws ApiException {

        okhttp3.Call localVarCall = listStoriesValidateBeforeCall(id, notId, title, body, text, translationsEnTitle, translationsEnBody, translationsEnText, language, notLanguage, publishedAtStart, publishedAtEnd, categoriesTaxonomy, categoriesConfident, categoriesId, notCategoriesId, categoriesLevel, notCategoriesLevel, entitiesTitleText, notEntitiesTitleText, entitiesTitleType, notEntitiesTitleType, entitiesTitleLinksDbpedia, notEntitiesTitleLinksDbpedia, entitiesBodyText, notEntitiesBodyText, entitiesBodyType, notEntitiesBodyType, entitiesBodyLinksDbpedia, notEntitiesBodyLinksDbpedia, sentimentTitlePolarity, notSentimentTitlePolarity, sentimentBodyPolarity, notSentimentBodyPolarity, mediaImagesCountMin, mediaImagesCountMax, mediaImagesWidthMin, mediaImagesWidthMax, mediaImagesHeightMin, mediaImagesHeightMax, mediaImagesContentLengthMin, mediaImagesContentLengthMax, mediaImagesFormat, notMediaImagesFormat, mediaVideosCountMin, mediaVideosCountMax, authorId, notAuthorId, authorName, notAuthorName, sourceId, notSourceId, sourceName, notSourceName, sourceDomain, notSourceDomain, sourceLocationsCountry, notSourceLocationsCountry, sourceLocationsState, notSourceLocationsState, sourceLocationsCity, notSourceLocationsCity, sourceScopesCountry, notSourceScopesCountry, sourceScopesState, notSourceScopesState, sourceScopesCity, notSourceScopesCity, sourceScopesLevel, notSourceScopesLevel, sourceLinksInCountMin, sourceLinksInCountMax, sourceRankingsAlexaRankMin, sourceRankingsAlexaRankMax, sourceRankingsAlexaCountry, socialSharesCountFacebookMin, socialSharesCountFacebookMax, socialSharesCountGooglePlusMin, socialSharesCountGooglePlusMax, socialSharesCountLinkedinMin, socialSharesCountLinkedinMax, socialSharesCountRedditMin, socialSharesCountRedditMax, clusters, _return, sortBy, sortDirection, cursor, perPage, _callback);
        Type localVarReturnType = new TypeToken<Stories>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistStoriesRequest {
        private List<Long> id;
        private List<Long> notId;
        private String title;
        private String body;
        private String text;
        private String translationsEnTitle;
        private String translationsEnBody;
        private String translationsEnText;
        private List<String> language;
        private List<String> notLanguage;
        private String publishedAtStart;
        private String publishedAtEnd;
        private String categoriesTaxonomy;
        private Boolean categoriesConfident;
        private List<String> categoriesId;
        private List<String> notCategoriesId;
        private List<Integer> categoriesLevel;
        private List<Integer> notCategoriesLevel;
        private List<String> entitiesTitleText;
        private List<String> notEntitiesTitleText;
        private List<String> entitiesTitleType;
        private List<String> notEntitiesTitleType;
        private List<String> entitiesTitleLinksDbpedia;
        private List<String> notEntitiesTitleLinksDbpedia;
        private List<String> entitiesBodyText;
        private List<String> notEntitiesBodyText;
        private List<String> entitiesBodyType;
        private List<String> notEntitiesBodyType;
        private List<String> entitiesBodyLinksDbpedia;
        private List<String> notEntitiesBodyLinksDbpedia;
        private String sentimentTitlePolarity;
        private String notSentimentTitlePolarity;
        private String sentimentBodyPolarity;
        private String notSentimentBodyPolarity;
        private Integer mediaImagesCountMin;
        private Integer mediaImagesCountMax;
        private Integer mediaImagesWidthMin;
        private Integer mediaImagesWidthMax;
        private Integer mediaImagesHeightMin;
        private Integer mediaImagesHeightMax;
        private Integer mediaImagesContentLengthMin;
        private Integer mediaImagesContentLengthMax;
        private List<String> mediaImagesFormat;
        private List<String> notMediaImagesFormat;
        private Integer mediaVideosCountMin;
        private Integer mediaVideosCountMax;
        private List<Integer> authorId;
        private List<Integer> notAuthorId;
        private String authorName;
        private String notAuthorName;
        private List<Integer> sourceId;
        private List<Integer> notSourceId;
        private List<String> sourceName;
        private List<String> notSourceName;
        private List<String> sourceDomain;
        private List<String> notSourceDomain;
        private List<String> sourceLocationsCountry;
        private List<String> notSourceLocationsCountry;
        private List<String> sourceLocationsState;
        private List<String> notSourceLocationsState;
        private List<String> sourceLocationsCity;
        private List<String> notSourceLocationsCity;
        private List<String> sourceScopesCountry;
        private List<String> notSourceScopesCountry;
        private List<String> sourceScopesState;
        private List<String> notSourceScopesState;
        private List<String> sourceScopesCity;
        private List<String> notSourceScopesCity;
        private List<String> sourceScopesLevel;
        private List<String> notSourceScopesLevel;
        private Integer sourceLinksInCountMin;
        private Integer sourceLinksInCountMax;
        private Integer sourceRankingsAlexaRankMin;
        private Integer sourceRankingsAlexaRankMax;
        private List<String> sourceRankingsAlexaCountry;
        private Integer socialSharesCountFacebookMin;
        private Integer socialSharesCountFacebookMax;
        private Integer socialSharesCountGooglePlusMin;
        private Integer socialSharesCountGooglePlusMax;
        private Integer socialSharesCountLinkedinMin;
        private Integer socialSharesCountLinkedinMax;
        private Integer socialSharesCountRedditMin;
        private Integer socialSharesCountRedditMax;
        private List<String> clusters;
        private List<String> _return;
        private String sortBy;
        private String sortDirection;
        private String cursor;
        private Integer perPage;

        private APIlistStoriesRequest() {
        }

        /**
         * Set id
         * @param id This parameter is used for finding stories by story id.  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest id(List<Long> id) {
            this.id = id;
            return this;
        }

        /**
         * Set notId
         * @param notId This parameter is used for excluding stories by story id.  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest notId(List<Long> notId) {
            this.notId = notId;
            return this;
        }

        /**
         * Set title
         * @param title This parameter is used for finding stories whose title contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators).  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest title(String title) {
            this.title = title;
            return this;
        }

        /**
         * Set body
         * @param body This parameter is used for finding stories whose body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators).  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest body(String body) {
            this.body = body;
            return this;
        }

        /**
         * Set text
         * @param text This parameter is used for finding stories whose title or body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators).  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest text(String text) {
            this.text = text;
            return this;
        }

        /**
         * Set translationsEnTitle
         * @param translationsEnTitle This parameter is used for finding stories whose translation title contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators).  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest translationsEnTitle(String translationsEnTitle) {
            this.translationsEnTitle = translationsEnTitle;
            return this;
        }

        /**
         * Set translationsEnBody
         * @param translationsEnBody This parameter is used for finding stories whose translation body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators).  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest translationsEnBody(String translationsEnBody) {
            this.translationsEnBody = translationsEnBody;
            return this;
        }

        /**
         * Set translationsEnText
         * @param translationsEnText This parameter is used for finding stories whose translation title or body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators).  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest translationsEnText(String translationsEnText) {
            this.translationsEnText = translationsEnText;
            return this;
        }

        /**
         * Set language
         * @param language This parameter is used for finding stories whose language is the specified value. It supports [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language codes.  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest language(List<String> language) {
            this.language = language;
            return this;
        }

        /**
         * Set notLanguage
         * @param notLanguage This parameter is used for excluding stories whose language is the specified value. It supports [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language codes.  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest notLanguage(List<String> notLanguage) {
            this.notLanguage = notLanguage;
            return this;
        }

        /**
         * Set publishedAtStart
         * @param publishedAtStart This parameter is used for finding stories whose published at time is greater than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates).  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest publishedAtStart(String publishedAtStart) {
            this.publishedAtStart = publishedAtStart;
            return this;
        }

        /**
         * Set publishedAtEnd
         * @param publishedAtEnd This parameter is used for finding stories whose published at time is less than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates).  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest publishedAtEnd(String publishedAtEnd) {
            this.publishedAtEnd = publishedAtEnd;
            return this;
        }

        /**
         * Set categoriesTaxonomy
         * @param categoriesTaxonomy This parameter is used for defining the type of the taxonomy for the rest of the categories queries. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories).  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest categoriesTaxonomy(String categoriesTaxonomy) {
            this.categoriesTaxonomy = categoriesTaxonomy;
            return this;
        }

        /**
         * Set categoriesConfident
         * @param categoriesConfident This parameter is used for finding stories whose categories are confident. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories).  (optional, default to true)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest categoriesConfident(Boolean categoriesConfident) {
            this.categoriesConfident = categoriesConfident;
            return this;
        }

        /**
         * Set categoriesId
         * @param categoriesId This parameter is used for finding stories by categories id. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories).  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest categoriesId(List<String> categoriesId) {
            this.categoriesId = categoriesId;
            return this;
        }

        /**
         * Set notCategoriesId
         * @param notCategoriesId This parameter is used for excluding stories by categories id. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories).  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest notCategoriesId(List<String> notCategoriesId) {
            this.notCategoriesId = notCategoriesId;
            return this;
        }

        /**
         * Set categoriesLevel
         * @param categoriesLevel This parameter is used for finding stories by categories level. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories).  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest categoriesLevel(List<Integer> categoriesLevel) {
            this.categoriesLevel = categoriesLevel;
            return this;
        }

        /**
         * Set notCategoriesLevel
         * @param notCategoriesLevel This parameter is used for excluding stories by categories level. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories).  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest notCategoriesLevel(List<Integer> notCategoriesLevel) {
            this.notCategoriesLevel = notCategoriesLevel;
            return this;
        }

        /**
         * Set entitiesTitleText
         * @param entitiesTitleText This parameter is used to find stories based on the specified entities &#x60;text&#x60; in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest entitiesTitleText(List<String> entitiesTitleText) {
            this.entitiesTitleText = entitiesTitleText;
            return this;
        }

        /**
         * Set notEntitiesTitleText
         * @param notEntitiesTitleText This parameter is used to exclude stories based on the specified entities &#x60;text&#x60; in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest notEntitiesTitleText(List<String> notEntitiesTitleText) {
            this.notEntitiesTitleText = notEntitiesTitleText;
            return this;
        }

        /**
         * Set entitiesTitleType
         * @param entitiesTitleType This parameter is used to find stories based on the specified entities &#x60;type&#x60; in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest entitiesTitleType(List<String> entitiesTitleType) {
            this.entitiesTitleType = entitiesTitleType;
            return this;
        }

        /**
         * Set notEntitiesTitleType
         * @param notEntitiesTitleType This parameter is used to exclude stories based on the specified entities &#x60;type&#x60; in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest notEntitiesTitleType(List<String> notEntitiesTitleType) {
            this.notEntitiesTitleType = notEntitiesTitleType;
            return this;
        }

        /**
         * Set entitiesTitleLinksDbpedia
         * @param entitiesTitleLinksDbpedia This parameter is used to find stories based on the specified entities dbpedia URL in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest entitiesTitleLinksDbpedia(List<String> entitiesTitleLinksDbpedia) {
            this.entitiesTitleLinksDbpedia = entitiesTitleLinksDbpedia;
            return this;
        }

        /**
         * Set notEntitiesTitleLinksDbpedia
         * @param notEntitiesTitleLinksDbpedia This parameter is used to exclude stories based on the specified entities dbpedia URL in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest notEntitiesTitleLinksDbpedia(List<String> notEntitiesTitleLinksDbpedia) {
            this.notEntitiesTitleLinksDbpedia = notEntitiesTitleLinksDbpedia;
            return this;
        }

        /**
         * Set entitiesBodyText
         * @param entitiesBodyText This parameter is used to find stories based on the specified entities &#x60;text&#x60; in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest entitiesBodyText(List<String> entitiesBodyText) {
            this.entitiesBodyText = entitiesBodyText;
            return this;
        }

        /**
         * Set notEntitiesBodyText
         * @param notEntitiesBodyText This parameter is used to exclude stories based on the specified entities &#x60;text&#x60; in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest notEntitiesBodyText(List<String> notEntitiesBodyText) {
            this.notEntitiesBodyText = notEntitiesBodyText;
            return this;
        }

        /**
         * Set entitiesBodyType
         * @param entitiesBodyType This parameter is used to find stories based on the specified entities &#x60;type&#x60; in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest entitiesBodyType(List<String> entitiesBodyType) {
            this.entitiesBodyType = entitiesBodyType;
            return this;
        }

        /**
         * Set notEntitiesBodyType
         * @param notEntitiesBodyType This parameter is used to exclude stories based on the specified entities &#x60;type&#x60; in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest notEntitiesBodyType(List<String> notEntitiesBodyType) {
            this.notEntitiesBodyType = notEntitiesBodyType;
            return this;
        }

        /**
         * Set entitiesBodyLinksDbpedia
         * @param entitiesBodyLinksDbpedia This parameter is used to find stories based on the specified entities dbpedia URL in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest entitiesBodyLinksDbpedia(List<String> entitiesBodyLinksDbpedia) {
            this.entitiesBodyLinksDbpedia = entitiesBodyLinksDbpedia;
            return this;
        }

        /**
         * Set notEntitiesBodyLinksDbpedia
         * @param notEntitiesBodyLinksDbpedia This parameter is used to exclude stories based on the specified entities dbpedia URL in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest notEntitiesBodyLinksDbpedia(List<String> notEntitiesBodyLinksDbpedia) {
            this.notEntitiesBodyLinksDbpedia = notEntitiesBodyLinksDbpedia;
            return this;
        }

        /**
         * Set sentimentTitlePolarity
         * @param sentimentTitlePolarity This parameter is used for finding stories whose title sentiment is the specified value.  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest sentimentTitlePolarity(String sentimentTitlePolarity) {
            this.sentimentTitlePolarity = sentimentTitlePolarity;
            return this;
        }

        /**
         * Set notSentimentTitlePolarity
         * @param notSentimentTitlePolarity This parameter is used for excluding stories whose title sentiment is the specified value.  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest notSentimentTitlePolarity(String notSentimentTitlePolarity) {
            this.notSentimentTitlePolarity = notSentimentTitlePolarity;
            return this;
        }

        /**
         * Set sentimentBodyPolarity
         * @param sentimentBodyPolarity This parameter is used for finding stories whose body sentiment is the specified value.  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest sentimentBodyPolarity(String sentimentBodyPolarity) {
            this.sentimentBodyPolarity = sentimentBodyPolarity;
            return this;
        }

        /**
         * Set notSentimentBodyPolarity
         * @param notSentimentBodyPolarity This parameter is used for excluding stories whose body sentiment is the specified value.  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest notSentimentBodyPolarity(String notSentimentBodyPolarity) {
            this.notSentimentBodyPolarity = notSentimentBodyPolarity;
            return this;
        }

        /**
         * Set mediaImagesCountMin
         * @param mediaImagesCountMin This parameter is used for finding stories whose number of images is greater than or equal to the specified value.  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest mediaImagesCountMin(Integer mediaImagesCountMin) {
            this.mediaImagesCountMin = mediaImagesCountMin;
            return this;
        }

        /**
         * Set mediaImagesCountMax
         * @param mediaImagesCountMax This parameter is used for finding stories whose number of images is less than or equal to the specified value.  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest mediaImagesCountMax(Integer mediaImagesCountMax) {
            this.mediaImagesCountMax = mediaImagesCountMax;
            return this;
        }

        /**
         * Set mediaImagesWidthMin
         * @param mediaImagesWidthMin This parameter is used for finding stories whose width of images are greater than or equal to the specified value.  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest mediaImagesWidthMin(Integer mediaImagesWidthMin) {
            this.mediaImagesWidthMin = mediaImagesWidthMin;
            return this;
        }

        /**
         * Set mediaImagesWidthMax
         * @param mediaImagesWidthMax This parameter is used for finding stories whose width of images are less than or equal to the specified value.  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest mediaImagesWidthMax(Integer mediaImagesWidthMax) {
            this.mediaImagesWidthMax = mediaImagesWidthMax;
            return this;
        }

        /**
         * Set mediaImagesHeightMin
         * @param mediaImagesHeightMin This parameter is used for finding stories whose height of images are greater than or equal to the specified value.  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest mediaImagesHeightMin(Integer mediaImagesHeightMin) {
            this.mediaImagesHeightMin = mediaImagesHeightMin;
            return this;
        }

        /**
         * Set mediaImagesHeightMax
         * @param mediaImagesHeightMax This parameter is used for finding stories whose height of images are less than or equal to the specified value.  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest mediaImagesHeightMax(Integer mediaImagesHeightMax) {
            this.mediaImagesHeightMax = mediaImagesHeightMax;
            return this;
        }

        /**
         * Set mediaImagesContentLengthMin
         * @param mediaImagesContentLengthMin This parameter is used for finding stories whose images content length are greater than or equal to the specified value.  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest mediaImagesContentLengthMin(Integer mediaImagesContentLengthMin) {
            this.mediaImagesContentLengthMin = mediaImagesContentLengthMin;
            return this;
        }

        /**
         * Set mediaImagesContentLengthMax
         * @param mediaImagesContentLengthMax This parameter is used for finding stories whose images content length are less than or equal to the specified value.  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest mediaImagesContentLengthMax(Integer mediaImagesContentLengthMax) {
            this.mediaImagesContentLengthMax = mediaImagesContentLengthMax;
            return this;
        }

        /**
         * Set mediaImagesFormat
         * @param mediaImagesFormat This parameter is used for finding stories whose images format are the specified value.  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest mediaImagesFormat(List<String> mediaImagesFormat) {
            this.mediaImagesFormat = mediaImagesFormat;
            return this;
        }

        /**
         * Set notMediaImagesFormat
         * @param notMediaImagesFormat This parameter is used for excluding stories whose images format are the specified value.  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest notMediaImagesFormat(List<String> notMediaImagesFormat) {
            this.notMediaImagesFormat = notMediaImagesFormat;
            return this;
        }

        /**
         * Set mediaVideosCountMin
         * @param mediaVideosCountMin This parameter is used for finding stories whose number of videos is greater than or equal to the specified value.  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest mediaVideosCountMin(Integer mediaVideosCountMin) {
            this.mediaVideosCountMin = mediaVideosCountMin;
            return this;
        }

        /**
         * Set mediaVideosCountMax
         * @param mediaVideosCountMax This parameter is used for finding stories whose number of videos is less than or equal to the specified value.  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest mediaVideosCountMax(Integer mediaVideosCountMax) {
            this.mediaVideosCountMax = mediaVideosCountMax;
            return this;
        }

        /**
         * Set authorId
         * @param authorId This parameter is used for finding stories whose author id is the specified value.  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest authorId(List<Integer> authorId) {
            this.authorId = authorId;
            return this;
        }

        /**
         * Set notAuthorId
         * @param notAuthorId This parameter is used for excluding stories whose author id is the specified value.  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest notAuthorId(List<Integer> notAuthorId) {
            this.notAuthorId = notAuthorId;
            return this;
        }

        /**
         * Set authorName
         * @param authorName This parameter is used for finding stories whose author full name contains the specified value.  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest authorName(String authorName) {
            this.authorName = authorName;
            return this;
        }

        /**
         * Set notAuthorName
         * @param notAuthorName This parameter is used for excluding stories whose author full name contains the specified value.  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest notAuthorName(String notAuthorName) {
            this.notAuthorName = notAuthorName;
            return this;
        }

        /**
         * Set sourceId
         * @param sourceId This parameter is used for finding stories whose source id is the specified value.  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest sourceId(List<Integer> sourceId) {
            this.sourceId = sourceId;
            return this;
        }

        /**
         * Set notSourceId
         * @param notSourceId This parameter is used for excluding stories whose source id is the specified value.  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest notSourceId(List<Integer> notSourceId) {
            this.notSourceId = notSourceId;
            return this;
        }

        /**
         * Set sourceName
         * @param sourceName This parameter is used for finding stories whose source name contains the specified value.  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest sourceName(List<String> sourceName) {
            this.sourceName = sourceName;
            return this;
        }

        /**
         * Set notSourceName
         * @param notSourceName This parameter is used for excluding stories whose source name contains the specified value.  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest notSourceName(List<String> notSourceName) {
            this.notSourceName = notSourceName;
            return this;
        }

        /**
         * Set sourceDomain
         * @param sourceDomain This parameter is used for finding stories whose source domain is the specified value.  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest sourceDomain(List<String> sourceDomain) {
            this.sourceDomain = sourceDomain;
            return this;
        }

        /**
         * Set notSourceDomain
         * @param notSourceDomain This parameter is used for excluding stories whose source domain is the specified value.  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest notSourceDomain(List<String> notSourceDomain) {
            this.notSourceDomain = notSourceDomain;
            return this;
        }

        /**
         * Set sourceLocationsCountry
         * @param sourceLocationsCountry This parameter is used for finding stories whose source country is the specified value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest sourceLocationsCountry(List<String> sourceLocationsCountry) {
            this.sourceLocationsCountry = sourceLocationsCountry;
            return this;
        }

        /**
         * Set notSourceLocationsCountry
         * @param notSourceLocationsCountry This parameter is used for excluding stories whose source country is the specified value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest notSourceLocationsCountry(List<String> notSourceLocationsCountry) {
            this.notSourceLocationsCountry = notSourceLocationsCountry;
            return this;
        }

        /**
         * Set sourceLocationsState
         * @param sourceLocationsState This parameter is used for finding stories whose source state/province is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest sourceLocationsState(List<String> sourceLocationsState) {
            this.sourceLocationsState = sourceLocationsState;
            return this;
        }

        /**
         * Set notSourceLocationsState
         * @param notSourceLocationsState This parameter is used for excluding stories whose source state/province is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest notSourceLocationsState(List<String> notSourceLocationsState) {
            this.notSourceLocationsState = notSourceLocationsState;
            return this;
        }

        /**
         * Set sourceLocationsCity
         * @param sourceLocationsCity This parameter is used for finding stories whose source city is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest sourceLocationsCity(List<String> sourceLocationsCity) {
            this.sourceLocationsCity = sourceLocationsCity;
            return this;
        }

        /**
         * Set notSourceLocationsCity
         * @param notSourceLocationsCity This parameter is used for excluding stories whose source city is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest notSourceLocationsCity(List<String> notSourceLocationsCity) {
            this.notSourceLocationsCity = notSourceLocationsCity;
            return this;
        }

        /**
         * Set sourceScopesCountry
         * @param sourceScopesCountry This parameter is used for finding stories whose source scopes is the specified country value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest sourceScopesCountry(List<String> sourceScopesCountry) {
            this.sourceScopesCountry = sourceScopesCountry;
            return this;
        }

        /**
         * Set notSourceScopesCountry
         * @param notSourceScopesCountry This parameter is used for excluding stories whose source scopes is the specified country value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest notSourceScopesCountry(List<String> notSourceScopesCountry) {
            this.notSourceScopesCountry = notSourceScopesCountry;
            return this;
        }

        /**
         * Set sourceScopesState
         * @param sourceScopesState This parameter is used for finding stories whose source scopes is the specified state/province value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest sourceScopesState(List<String> sourceScopesState) {
            this.sourceScopesState = sourceScopesState;
            return this;
        }

        /**
         * Set notSourceScopesState
         * @param notSourceScopesState This parameter is used for excluding stories whose source scopes is the specified state/province value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest notSourceScopesState(List<String> notSourceScopesState) {
            this.notSourceScopesState = notSourceScopesState;
            return this;
        }

        /**
         * Set sourceScopesCity
         * @param sourceScopesCity This parameter is used for finding stories whose source scopes is the specified city value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest sourceScopesCity(List<String> sourceScopesCity) {
            this.sourceScopesCity = sourceScopesCity;
            return this;
        }

        /**
         * Set notSourceScopesCity
         * @param notSourceScopesCity This parameter is used for excluding stories whose source scopes is the specified city value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest notSourceScopesCity(List<String> notSourceScopesCity) {
            this.notSourceScopesCity = notSourceScopesCity;
            return this;
        }

        /**
         * Set sourceScopesLevel
         * @param sourceScopesLevel This parameter is used for finding stories whose source scopes is the specified level value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest sourceScopesLevel(List<String> sourceScopesLevel) {
            this.sourceScopesLevel = sourceScopesLevel;
            return this;
        }

        /**
         * Set notSourceScopesLevel
         * @param notSourceScopesLevel This parameter is used for excluding stories whose source scopes is the specified level value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest notSourceScopesLevel(List<String> notSourceScopesLevel) {
            this.notSourceScopesLevel = notSourceScopesLevel;
            return this;
        }

        /**
         * Set sourceLinksInCountMin
         * @param sourceLinksInCountMin This parameter is used for finding stories from sources whose Links in count is greater than or equal to the specified value. You can read more about working with Links in count [here](https://newsapi.aylien.com/docs/working-with-links-in-count).  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest sourceLinksInCountMin(Integer sourceLinksInCountMin) {
            this.sourceLinksInCountMin = sourceLinksInCountMin;
            return this;
        }

        /**
         * Set sourceLinksInCountMax
         * @param sourceLinksInCountMax This parameter is used for finding stories from sources whose Links in count is less than or equal to the specified value. You can read more about working with Links in count [here](https://newsapi.aylien.com/docs/working-with-links-in-count).  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest sourceLinksInCountMax(Integer sourceLinksInCountMax) {
            this.sourceLinksInCountMax = sourceLinksInCountMax;
            return this;
        }

        /**
         * Set sourceRankingsAlexaRankMin
         * @param sourceRankingsAlexaRankMin This parameter is used for finding stories from sources whose Alexa rank is greater than or equal to the specified value. You can read more about working with Alexa ranks [here](https://newsapi.aylien.com/docs/working-with-alexa-ranks).  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest sourceRankingsAlexaRankMin(Integer sourceRankingsAlexaRankMin) {
            this.sourceRankingsAlexaRankMin = sourceRankingsAlexaRankMin;
            return this;
        }

        /**
         * Set sourceRankingsAlexaRankMax
         * @param sourceRankingsAlexaRankMax This parameter is used for finding stories from sources whose Alexa rank is less than or equal to the specified value. You can read more about working with Alexa ranks [here](https://newsapi.aylien.com/docs/working-with-alexa-ranks).  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest sourceRankingsAlexaRankMax(Integer sourceRankingsAlexaRankMax) {
            this.sourceRankingsAlexaRankMax = sourceRankingsAlexaRankMax;
            return this;
        }

        /**
         * Set sourceRankingsAlexaCountry
         * @param sourceRankingsAlexaCountry This parameter is used for finding stories from sources whose Alexa rank is in the specified country value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. You can read more about working with Alexa ranks [here](https://newsapi.aylien.com/docs/working-with-alexa-ranks).  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest sourceRankingsAlexaCountry(List<String> sourceRankingsAlexaCountry) {
            this.sourceRankingsAlexaCountry = sourceRankingsAlexaCountry;
            return this;
        }

        /**
         * Set socialSharesCountFacebookMin
         * @param socialSharesCountFacebookMin This parameter is used for finding stories whose Facebook social shares count is greater than or equal to the specified value.  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest socialSharesCountFacebookMin(Integer socialSharesCountFacebookMin) {
            this.socialSharesCountFacebookMin = socialSharesCountFacebookMin;
            return this;
        }

        /**
         * Set socialSharesCountFacebookMax
         * @param socialSharesCountFacebookMax This parameter is used for finding stories whose Facebook social shares count is less than or equal to the specified value.  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest socialSharesCountFacebookMax(Integer socialSharesCountFacebookMax) {
            this.socialSharesCountFacebookMax = socialSharesCountFacebookMax;
            return this;
        }

        /**
         * Set socialSharesCountGooglePlusMin
         * @param socialSharesCountGooglePlusMin This parameter is used for finding stories whose Google+ social shares count is greater than or equal to the specified value.  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest socialSharesCountGooglePlusMin(Integer socialSharesCountGooglePlusMin) {
            this.socialSharesCountGooglePlusMin = socialSharesCountGooglePlusMin;
            return this;
        }

        /**
         * Set socialSharesCountGooglePlusMax
         * @param socialSharesCountGooglePlusMax This parameter is used for finding stories whose Google+ social shares count is less than or equal to the specified value.  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest socialSharesCountGooglePlusMax(Integer socialSharesCountGooglePlusMax) {
            this.socialSharesCountGooglePlusMax = socialSharesCountGooglePlusMax;
            return this;
        }

        /**
         * Set socialSharesCountLinkedinMin
         * @param socialSharesCountLinkedinMin This parameter is used for finding stories whose LinkedIn social shares count is greater than or equal to the specified value.  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest socialSharesCountLinkedinMin(Integer socialSharesCountLinkedinMin) {
            this.socialSharesCountLinkedinMin = socialSharesCountLinkedinMin;
            return this;
        }

        /**
         * Set socialSharesCountLinkedinMax
         * @param socialSharesCountLinkedinMax This parameter is used for finding stories whose LinkedIn social shares count is less than or equal to the specified value.  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest socialSharesCountLinkedinMax(Integer socialSharesCountLinkedinMax) {
            this.socialSharesCountLinkedinMax = socialSharesCountLinkedinMax;
            return this;
        }

        /**
         * Set socialSharesCountRedditMin
         * @param socialSharesCountRedditMin This parameter is used for finding stories whose Reddit social shares count is greater than or equal to the specified value.  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest socialSharesCountRedditMin(Integer socialSharesCountRedditMin) {
            this.socialSharesCountRedditMin = socialSharesCountRedditMin;
            return this;
        }

        /**
         * Set socialSharesCountRedditMax
         * @param socialSharesCountRedditMax This parameter is used for finding stories whose Reddit social shares count is less than or equal to the specified value.  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest socialSharesCountRedditMax(Integer socialSharesCountRedditMax) {
            this.socialSharesCountRedditMax = socialSharesCountRedditMax;
            return this;
        }

        /**
         * Set clusters
         * @param clusters This parameter is used for finding stories with belonging to one of clusters in a specific set of clusters You can read more about working with clustering [here](https://newsapi.aylien.com/docs/working-with-clustering).  (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest clusters(List<String> clusters) {
            this.clusters = clusters;
            return this;
        }

        /**
         * Set _return
         * @param _return This parameter is used for specifying return fields. (optional)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest _return(List<String> _return) {
            this._return = _return;
            return this;
        }

        /**
         * Set sortBy
         * @param sortBy This parameter is used for changing the order column of the results. You can read about sorting results [here](https://newsapi.aylien.com/docs/sorting-results).  (optional, default to published_at)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest sortBy(String sortBy) {
            this.sortBy = sortBy;
            return this;
        }

        /**
         * Set sortDirection
         * @param sortDirection This parameter is used for changing the order direction of the result. You can read about sorting results [here](https://newsapi.aylien.com/docs/sorting-results).  (optional, default to desc)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest sortDirection(String sortDirection) {
            this.sortDirection = sortDirection;
            return this;
        }

        /**
         * Set cursor
         * @param cursor This parameter is used for finding a specific page. You can read more about pagination of results [here](https://newsapi.aylien.com/docs/pagination-of-results).  (optional, default to &quot;*&quot;)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }

        /**
         * Set perPage
         * @param perPage This parameter is used for specifying number of items in each page You can read more about pagination of results [here](https://newsapi.aylien.com/docs/pagination-of-results)  (optional, default to 10)
         * @return APIlistStoriesRequest
         */
        public APIlistStoriesRequest perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }

        /**
         * Build call for listStories
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An object including an array of stories </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listStoriesCall(id, notId, title, body, text, translationsEnTitle, translationsEnBody, translationsEnText, language, notLanguage, publishedAtStart, publishedAtEnd, categoriesTaxonomy, categoriesConfident, categoriesId, notCategoriesId, categoriesLevel, notCategoriesLevel, entitiesTitleText, notEntitiesTitleText, entitiesTitleType, notEntitiesTitleType, entitiesTitleLinksDbpedia, notEntitiesTitleLinksDbpedia, entitiesBodyText, notEntitiesBodyText, entitiesBodyType, notEntitiesBodyType, entitiesBodyLinksDbpedia, notEntitiesBodyLinksDbpedia, sentimentTitlePolarity, notSentimentTitlePolarity, sentimentBodyPolarity, notSentimentBodyPolarity, mediaImagesCountMin, mediaImagesCountMax, mediaImagesWidthMin, mediaImagesWidthMax, mediaImagesHeightMin, mediaImagesHeightMax, mediaImagesContentLengthMin, mediaImagesContentLengthMax, mediaImagesFormat, notMediaImagesFormat, mediaVideosCountMin, mediaVideosCountMax, authorId, notAuthorId, authorName, notAuthorName, sourceId, notSourceId, sourceName, notSourceName, sourceDomain, notSourceDomain, sourceLocationsCountry, notSourceLocationsCountry, sourceLocationsState, notSourceLocationsState, sourceLocationsCity, notSourceLocationsCity, sourceScopesCountry, notSourceScopesCountry, sourceScopesState, notSourceScopesState, sourceScopesCity, notSourceScopesCity, sourceScopesLevel, notSourceScopesLevel, sourceLinksInCountMin, sourceLinksInCountMax, sourceRankingsAlexaRankMin, sourceRankingsAlexaRankMax, sourceRankingsAlexaCountry, socialSharesCountFacebookMin, socialSharesCountFacebookMax, socialSharesCountGooglePlusMin, socialSharesCountGooglePlusMax, socialSharesCountLinkedinMin, socialSharesCountLinkedinMax, socialSharesCountRedditMin, socialSharesCountRedditMax, clusters, _return, sortBy, sortDirection, cursor, perPage, _callback);
        }

        /**
         * Execute listStories request
         * @return Stories
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An object including an array of stories </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public Stories execute() throws ApiException {
            ApiResponse<Stories> localVarResp = listStoriesWithHttpInfo(id, notId, title, body, text, translationsEnTitle, translationsEnBody, translationsEnText, language, notLanguage, publishedAtStart, publishedAtEnd, categoriesTaxonomy, categoriesConfident, categoriesId, notCategoriesId, categoriesLevel, notCategoriesLevel, entitiesTitleText, notEntitiesTitleText, entitiesTitleType, notEntitiesTitleType, entitiesTitleLinksDbpedia, notEntitiesTitleLinksDbpedia, entitiesBodyText, notEntitiesBodyText, entitiesBodyType, notEntitiesBodyType, entitiesBodyLinksDbpedia, notEntitiesBodyLinksDbpedia, sentimentTitlePolarity, notSentimentTitlePolarity, sentimentBodyPolarity, notSentimentBodyPolarity, mediaImagesCountMin, mediaImagesCountMax, mediaImagesWidthMin, mediaImagesWidthMax, mediaImagesHeightMin, mediaImagesHeightMax, mediaImagesContentLengthMin, mediaImagesContentLengthMax, mediaImagesFormat, notMediaImagesFormat, mediaVideosCountMin, mediaVideosCountMax, authorId, notAuthorId, authorName, notAuthorName, sourceId, notSourceId, sourceName, notSourceName, sourceDomain, notSourceDomain, sourceLocationsCountry, notSourceLocationsCountry, sourceLocationsState, notSourceLocationsState, sourceLocationsCity, notSourceLocationsCity, sourceScopesCountry, notSourceScopesCountry, sourceScopesState, notSourceScopesState, sourceScopesCity, notSourceScopesCity, sourceScopesLevel, notSourceScopesLevel, sourceLinksInCountMin, sourceLinksInCountMax, sourceRankingsAlexaRankMin, sourceRankingsAlexaRankMax, sourceRankingsAlexaCountry, socialSharesCountFacebookMin, socialSharesCountFacebookMax, socialSharesCountGooglePlusMin, socialSharesCountGooglePlusMax, socialSharesCountLinkedinMin, socialSharesCountLinkedinMax, socialSharesCountRedditMin, socialSharesCountRedditMax, clusters, _return, sortBy, sortDirection, cursor, perPage);
            return localVarResp.getData();
        }

        /**
         * Execute listStories request with HTTP info returned
         * @return ApiResponse&lt;Stories&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An object including an array of stories </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Stories> executeWithHttpInfo() throws ApiException {
            return listStoriesWithHttpInfo(id, notId, title, body, text, translationsEnTitle, translationsEnBody, translationsEnText, language, notLanguage, publishedAtStart, publishedAtEnd, categoriesTaxonomy, categoriesConfident, categoriesId, notCategoriesId, categoriesLevel, notCategoriesLevel, entitiesTitleText, notEntitiesTitleText, entitiesTitleType, notEntitiesTitleType, entitiesTitleLinksDbpedia, notEntitiesTitleLinksDbpedia, entitiesBodyText, notEntitiesBodyText, entitiesBodyType, notEntitiesBodyType, entitiesBodyLinksDbpedia, notEntitiesBodyLinksDbpedia, sentimentTitlePolarity, notSentimentTitlePolarity, sentimentBodyPolarity, notSentimentBodyPolarity, mediaImagesCountMin, mediaImagesCountMax, mediaImagesWidthMin, mediaImagesWidthMax, mediaImagesHeightMin, mediaImagesHeightMax, mediaImagesContentLengthMin, mediaImagesContentLengthMax, mediaImagesFormat, notMediaImagesFormat, mediaVideosCountMin, mediaVideosCountMax, authorId, notAuthorId, authorName, notAuthorName, sourceId, notSourceId, sourceName, notSourceName, sourceDomain, notSourceDomain, sourceLocationsCountry, notSourceLocationsCountry, sourceLocationsState, notSourceLocationsState, sourceLocationsCity, notSourceLocationsCity, sourceScopesCountry, notSourceScopesCountry, sourceScopesState, notSourceScopesState, sourceScopesCity, notSourceScopesCity, sourceScopesLevel, notSourceScopesLevel, sourceLinksInCountMin, sourceLinksInCountMax, sourceRankingsAlexaRankMin, sourceRankingsAlexaRankMax, sourceRankingsAlexaCountry, socialSharesCountFacebookMin, socialSharesCountFacebookMax, socialSharesCountGooglePlusMin, socialSharesCountGooglePlusMax, socialSharesCountLinkedinMin, socialSharesCountLinkedinMax, socialSharesCountRedditMin, socialSharesCountRedditMax, clusters, _return, sortBy, sortDirection, cursor, perPage);
        }

        /**
         * Execute listStories request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An object including an array of stories </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Stories> _callback) throws ApiException {
            return listStoriesAsync(id, notId, title, body, text, translationsEnTitle, translationsEnBody, translationsEnText, language, notLanguage, publishedAtStart, publishedAtEnd, categoriesTaxonomy, categoriesConfident, categoriesId, notCategoriesId, categoriesLevel, notCategoriesLevel, entitiesTitleText, notEntitiesTitleText, entitiesTitleType, notEntitiesTitleType, entitiesTitleLinksDbpedia, notEntitiesTitleLinksDbpedia, entitiesBodyText, notEntitiesBodyText, entitiesBodyType, notEntitiesBodyType, entitiesBodyLinksDbpedia, notEntitiesBodyLinksDbpedia, sentimentTitlePolarity, notSentimentTitlePolarity, sentimentBodyPolarity, notSentimentBodyPolarity, mediaImagesCountMin, mediaImagesCountMax, mediaImagesWidthMin, mediaImagesWidthMax, mediaImagesHeightMin, mediaImagesHeightMax, mediaImagesContentLengthMin, mediaImagesContentLengthMax, mediaImagesFormat, notMediaImagesFormat, mediaVideosCountMin, mediaVideosCountMax, authorId, notAuthorId, authorName, notAuthorName, sourceId, notSourceId, sourceName, notSourceName, sourceDomain, notSourceDomain, sourceLocationsCountry, notSourceLocationsCountry, sourceLocationsState, notSourceLocationsState, sourceLocationsCity, notSourceLocationsCity, sourceScopesCountry, notSourceScopesCountry, sourceScopesState, notSourceScopesState, sourceScopesCity, notSourceScopesCity, sourceScopesLevel, notSourceScopesLevel, sourceLinksInCountMin, sourceLinksInCountMax, sourceRankingsAlexaRankMin, sourceRankingsAlexaRankMax, sourceRankingsAlexaCountry, socialSharesCountFacebookMin, socialSharesCountFacebookMax, socialSharesCountGooglePlusMin, socialSharesCountGooglePlusMax, socialSharesCountLinkedinMin, socialSharesCountLinkedinMax, socialSharesCountRedditMin, socialSharesCountRedditMax, clusters, _return, sortBy, sortDirection, cursor, perPage, _callback);
        }
    }

    /**
     * List Stories
     * The stories endpoint is used to return stories based on parameters you set in your query. The News API crawler gathers articles in near real-time and stores information about them, or metadata. Below you can see all of the query parameters, which you can use to narrow down your query. 
     * @return APIlistStoriesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object including an array of stories </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public APIlistStoriesRequest listStories() {
        return new APIlistStoriesRequest();
    }
    private okhttp3.Call listTimeSeriesCall(List<Long> id, List<Long> notId, String title, String body, String text, String translationsEnTitle, String translationsEnBody, String translationsEnText, List<String> language, List<String> notLanguage, String categoriesTaxonomy, Boolean categoriesConfident, List<String> categoriesId, List<String> notCategoriesId, List<Integer> categoriesLevel, List<Integer> notCategoriesLevel, List<String> entitiesTitleText, List<String> notEntitiesTitleText, List<String> entitiesTitleType, List<String> notEntitiesTitleType, List<String> entitiesTitleLinksDbpedia, List<String> notEntitiesTitleLinksDbpedia, List<String> entitiesBodyText, List<String> notEntitiesBodyText, List<String> entitiesBodyType, List<String> notEntitiesBodyType, List<String> entitiesBodyLinksDbpedia, List<String> notEntitiesBodyLinksDbpedia, String sentimentTitlePolarity, String notSentimentTitlePolarity, String sentimentBodyPolarity, String notSentimentBodyPolarity, Integer mediaImagesCountMin, Integer mediaImagesCountMax, Integer mediaImagesWidthMin, Integer mediaImagesWidthMax, Integer mediaImagesHeightMin, Integer mediaImagesHeightMax, Integer mediaImagesContentLengthMin, Integer mediaImagesContentLengthMax, List<String> mediaImagesFormat, List<String> notMediaImagesFormat, Integer mediaVideosCountMin, Integer mediaVideosCountMax, List<Integer> authorId, List<Integer> notAuthorId, String authorName, String notAuthorName, List<Integer> sourceId, List<Integer> notSourceId, List<String> sourceName, List<String> notSourceName, List<String> sourceDomain, List<String> notSourceDomain, List<String> sourceLocationsCountry, List<String> notSourceLocationsCountry, List<String> sourceLocationsState, List<String> notSourceLocationsState, List<String> sourceLocationsCity, List<String> notSourceLocationsCity, List<String> sourceScopesCountry, List<String> notSourceScopesCountry, List<String> sourceScopesState, List<String> notSourceScopesState, List<String> sourceScopesCity, List<String> notSourceScopesCity, List<String> sourceScopesLevel, List<String> notSourceScopesLevel, Integer sourceLinksInCountMin, Integer sourceLinksInCountMax, Integer sourceRankingsAlexaRankMin, Integer sourceRankingsAlexaRankMax, List<String> sourceRankingsAlexaCountry, Integer socialSharesCountFacebookMin, Integer socialSharesCountFacebookMax, Integer socialSharesCountGooglePlusMin, Integer socialSharesCountGooglePlusMax, Integer socialSharesCountLinkedinMin, Integer socialSharesCountLinkedinMax, Integer socialSharesCountRedditMin, Integer socialSharesCountRedditMax, String publishedAtStart, String publishedAtEnd, String period, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/time_series";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id[]", id));
        }

        if (notId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!id[]", notId));
        }

        if (title != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title", title));
        }

        if (body != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("body", body));
        }

        if (text != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text", text));
        }

        if (translationsEnTitle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("translations.en.title", translationsEnTitle));
        }

        if (translationsEnBody != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("translations.en.body", translationsEnBody));
        }

        if (translationsEnText != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("translations.en.text", translationsEnText));
        }

        if (language != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "language[]", language));
        }

        if (notLanguage != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!language[]", notLanguage));
        }

        if (categoriesTaxonomy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("categories.taxonomy", categoriesTaxonomy));
        }

        if (categoriesConfident != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("categories.confident", categoriesConfident));
        }

        if (categoriesId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "categories.id[]", categoriesId));
        }

        if (notCategoriesId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!categories.id[]", notCategoriesId));
        }

        if (categoriesLevel != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "categories.level[]", categoriesLevel));
        }

        if (notCategoriesLevel != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!categories.level[]", notCategoriesLevel));
        }

        if (entitiesTitleText != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "entities.title.text[]", entitiesTitleText));
        }

        if (notEntitiesTitleText != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!entities.title.text[]", notEntitiesTitleText));
        }

        if (entitiesTitleType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "entities.title.type[]", entitiesTitleType));
        }

        if (notEntitiesTitleType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!entities.title.type[]", notEntitiesTitleType));
        }

        if (entitiesTitleLinksDbpedia != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "entities.title.links.dbpedia[]", entitiesTitleLinksDbpedia));
        }

        if (notEntitiesTitleLinksDbpedia != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!entities.title.links.dbpedia[]", notEntitiesTitleLinksDbpedia));
        }

        if (entitiesBodyText != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "entities.body.text[]", entitiesBodyText));
        }

        if (notEntitiesBodyText != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!entities.body.text[]", notEntitiesBodyText));
        }

        if (entitiesBodyType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "entities.body.type[]", entitiesBodyType));
        }

        if (notEntitiesBodyType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!entities.body.type[]", notEntitiesBodyType));
        }

        if (entitiesBodyLinksDbpedia != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "entities.body.links.dbpedia[]", entitiesBodyLinksDbpedia));
        }

        if (notEntitiesBodyLinksDbpedia != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!entities.body.links.dbpedia[]", notEntitiesBodyLinksDbpedia));
        }

        if (sentimentTitlePolarity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sentiment.title.polarity", sentimentTitlePolarity));
        }

        if (notSentimentTitlePolarity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("!sentiment.title.polarity", notSentimentTitlePolarity));
        }

        if (sentimentBodyPolarity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sentiment.body.polarity", sentimentBodyPolarity));
        }

        if (notSentimentBodyPolarity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("!sentiment.body.polarity", notSentimentBodyPolarity));
        }

        if (mediaImagesCountMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.images.count.min", mediaImagesCountMin));
        }

        if (mediaImagesCountMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.images.count.max", mediaImagesCountMax));
        }

        if (mediaImagesWidthMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.images.width.min", mediaImagesWidthMin));
        }

        if (mediaImagesWidthMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.images.width.max", mediaImagesWidthMax));
        }

        if (mediaImagesHeightMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.images.height.min", mediaImagesHeightMin));
        }

        if (mediaImagesHeightMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.images.height.max", mediaImagesHeightMax));
        }

        if (mediaImagesContentLengthMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.images.content_length.min", mediaImagesContentLengthMin));
        }

        if (mediaImagesContentLengthMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.images.content_length.max", mediaImagesContentLengthMax));
        }

        if (mediaImagesFormat != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "media.images.format[]", mediaImagesFormat));
        }

        if (notMediaImagesFormat != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!media.images.format[]", notMediaImagesFormat));
        }

        if (mediaVideosCountMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.videos.count.min", mediaVideosCountMin));
        }

        if (mediaVideosCountMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.videos.count.max", mediaVideosCountMax));
        }

        if (authorId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "author.id[]", authorId));
        }

        if (notAuthorId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!author.id[]", notAuthorId));
        }

        if (authorName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("author.name", authorName));
        }

        if (notAuthorName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("!author.name", notAuthorName));
        }

        if (sourceId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.id[]", sourceId));
        }

        if (notSourceId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.id[]", notSourceId));
        }

        if (sourceName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.name[]", sourceName));
        }

        if (notSourceName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.name[]", notSourceName));
        }

        if (sourceDomain != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.domain[]", sourceDomain));
        }

        if (notSourceDomain != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.domain[]", notSourceDomain));
        }

        if (sourceLocationsCountry != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.locations.country[]", sourceLocationsCountry));
        }

        if (notSourceLocationsCountry != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.locations.country[]", notSourceLocationsCountry));
        }

        if (sourceLocationsState != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.locations.state[]", sourceLocationsState));
        }

        if (notSourceLocationsState != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.locations.state[]", notSourceLocationsState));
        }

        if (sourceLocationsCity != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.locations.city[]", sourceLocationsCity));
        }

        if (notSourceLocationsCity != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.locations.city[]", notSourceLocationsCity));
        }

        if (sourceScopesCountry != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.scopes.country[]", sourceScopesCountry));
        }

        if (notSourceScopesCountry != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.scopes.country[]", notSourceScopesCountry));
        }

        if (sourceScopesState != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.scopes.state[]", sourceScopesState));
        }

        if (notSourceScopesState != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.scopes.state[]", notSourceScopesState));
        }

        if (sourceScopesCity != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.scopes.city[]", sourceScopesCity));
        }

        if (notSourceScopesCity != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.scopes.city[]", notSourceScopesCity));
        }

        if (sourceScopesLevel != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.scopes.level[]", sourceScopesLevel));
        }

        if (notSourceScopesLevel != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.scopes.level[]", notSourceScopesLevel));
        }

        if (sourceLinksInCountMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source.links_in_count.min", sourceLinksInCountMin));
        }

        if (sourceLinksInCountMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source.links_in_count.max", sourceLinksInCountMax));
        }

        if (sourceRankingsAlexaRankMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source.rankings.alexa.rank.min", sourceRankingsAlexaRankMin));
        }

        if (sourceRankingsAlexaRankMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source.rankings.alexa.rank.max", sourceRankingsAlexaRankMax));
        }

        if (sourceRankingsAlexaCountry != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.rankings.alexa.country[]", sourceRankingsAlexaCountry));
        }

        if (socialSharesCountFacebookMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("social_shares_count.facebook.min", socialSharesCountFacebookMin));
        }

        if (socialSharesCountFacebookMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("social_shares_count.facebook.max", socialSharesCountFacebookMax));
        }

        if (socialSharesCountGooglePlusMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("social_shares_count.google_plus.min", socialSharesCountGooglePlusMin));
        }

        if (socialSharesCountGooglePlusMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("social_shares_count.google_plus.max", socialSharesCountGooglePlusMax));
        }

        if (socialSharesCountLinkedinMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("social_shares_count.linkedin.min", socialSharesCountLinkedinMin));
        }

        if (socialSharesCountLinkedinMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("social_shares_count.linkedin.max", socialSharesCountLinkedinMax));
        }

        if (socialSharesCountRedditMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("social_shares_count.reddit.min", socialSharesCountRedditMin));
        }

        if (socialSharesCountRedditMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("social_shares_count.reddit.max", socialSharesCountRedditMax));
        }

        if (publishedAtStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("published_at.start", publishedAtStart));
        }

        if (publishedAtEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("published_at.end", publishedAtEnd));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("period", period));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "app_id", "app_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTimeSeriesValidateBeforeCall(List<Long> id, List<Long> notId, String title, String body, String text, String translationsEnTitle, String translationsEnBody, String translationsEnText, List<String> language, List<String> notLanguage, String categoriesTaxonomy, Boolean categoriesConfident, List<String> categoriesId, List<String> notCategoriesId, List<Integer> categoriesLevel, List<Integer> notCategoriesLevel, List<String> entitiesTitleText, List<String> notEntitiesTitleText, List<String> entitiesTitleType, List<String> notEntitiesTitleType, List<String> entitiesTitleLinksDbpedia, List<String> notEntitiesTitleLinksDbpedia, List<String> entitiesBodyText, List<String> notEntitiesBodyText, List<String> entitiesBodyType, List<String> notEntitiesBodyType, List<String> entitiesBodyLinksDbpedia, List<String> notEntitiesBodyLinksDbpedia, String sentimentTitlePolarity, String notSentimentTitlePolarity, String sentimentBodyPolarity, String notSentimentBodyPolarity, Integer mediaImagesCountMin, Integer mediaImagesCountMax, Integer mediaImagesWidthMin, Integer mediaImagesWidthMax, Integer mediaImagesHeightMin, Integer mediaImagesHeightMax, Integer mediaImagesContentLengthMin, Integer mediaImagesContentLengthMax, List<String> mediaImagesFormat, List<String> notMediaImagesFormat, Integer mediaVideosCountMin, Integer mediaVideosCountMax, List<Integer> authorId, List<Integer> notAuthorId, String authorName, String notAuthorName, List<Integer> sourceId, List<Integer> notSourceId, List<String> sourceName, List<String> notSourceName, List<String> sourceDomain, List<String> notSourceDomain, List<String> sourceLocationsCountry, List<String> notSourceLocationsCountry, List<String> sourceLocationsState, List<String> notSourceLocationsState, List<String> sourceLocationsCity, List<String> notSourceLocationsCity, List<String> sourceScopesCountry, List<String> notSourceScopesCountry, List<String> sourceScopesState, List<String> notSourceScopesState, List<String> sourceScopesCity, List<String> notSourceScopesCity, List<String> sourceScopesLevel, List<String> notSourceScopesLevel, Integer sourceLinksInCountMin, Integer sourceLinksInCountMax, Integer sourceRankingsAlexaRankMin, Integer sourceRankingsAlexaRankMax, List<String> sourceRankingsAlexaCountry, Integer socialSharesCountFacebookMin, Integer socialSharesCountFacebookMax, Integer socialSharesCountGooglePlusMin, Integer socialSharesCountGooglePlusMax, Integer socialSharesCountLinkedinMin, Integer socialSharesCountLinkedinMax, Integer socialSharesCountRedditMin, Integer socialSharesCountRedditMax, String publishedAtStart, String publishedAtEnd, String period, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listTimeSeriesCall(id, notId, title, body, text, translationsEnTitle, translationsEnBody, translationsEnText, language, notLanguage, categoriesTaxonomy, categoriesConfident, categoriesId, notCategoriesId, categoriesLevel, notCategoriesLevel, entitiesTitleText, notEntitiesTitleText, entitiesTitleType, notEntitiesTitleType, entitiesTitleLinksDbpedia, notEntitiesTitleLinksDbpedia, entitiesBodyText, notEntitiesBodyText, entitiesBodyType, notEntitiesBodyType, entitiesBodyLinksDbpedia, notEntitiesBodyLinksDbpedia, sentimentTitlePolarity, notSentimentTitlePolarity, sentimentBodyPolarity, notSentimentBodyPolarity, mediaImagesCountMin, mediaImagesCountMax, mediaImagesWidthMin, mediaImagesWidthMax, mediaImagesHeightMin, mediaImagesHeightMax, mediaImagesContentLengthMin, mediaImagesContentLengthMax, mediaImagesFormat, notMediaImagesFormat, mediaVideosCountMin, mediaVideosCountMax, authorId, notAuthorId, authorName, notAuthorName, sourceId, notSourceId, sourceName, notSourceName, sourceDomain, notSourceDomain, sourceLocationsCountry, notSourceLocationsCountry, sourceLocationsState, notSourceLocationsState, sourceLocationsCity, notSourceLocationsCity, sourceScopesCountry, notSourceScopesCountry, sourceScopesState, notSourceScopesState, sourceScopesCity, notSourceScopesCity, sourceScopesLevel, notSourceScopesLevel, sourceLinksInCountMin, sourceLinksInCountMax, sourceRankingsAlexaRankMin, sourceRankingsAlexaRankMax, sourceRankingsAlexaCountry, socialSharesCountFacebookMin, socialSharesCountFacebookMax, socialSharesCountGooglePlusMin, socialSharesCountGooglePlusMax, socialSharesCountLinkedinMin, socialSharesCountLinkedinMax, socialSharesCountRedditMin, socialSharesCountRedditMax, publishedAtStart, publishedAtEnd, period, _callback);
        return localVarCall;

    }


    private ApiResponse<TimeSeriesList> listTimeSeriesWithHttpInfo(List<Long> id, List<Long> notId, String title, String body, String text, String translationsEnTitle, String translationsEnBody, String translationsEnText, List<String> language, List<String> notLanguage, String categoriesTaxonomy, Boolean categoriesConfident, List<String> categoriesId, List<String> notCategoriesId, List<Integer> categoriesLevel, List<Integer> notCategoriesLevel, List<String> entitiesTitleText, List<String> notEntitiesTitleText, List<String> entitiesTitleType, List<String> notEntitiesTitleType, List<String> entitiesTitleLinksDbpedia, List<String> notEntitiesTitleLinksDbpedia, List<String> entitiesBodyText, List<String> notEntitiesBodyText, List<String> entitiesBodyType, List<String> notEntitiesBodyType, List<String> entitiesBodyLinksDbpedia, List<String> notEntitiesBodyLinksDbpedia, String sentimentTitlePolarity, String notSentimentTitlePolarity, String sentimentBodyPolarity, String notSentimentBodyPolarity, Integer mediaImagesCountMin, Integer mediaImagesCountMax, Integer mediaImagesWidthMin, Integer mediaImagesWidthMax, Integer mediaImagesHeightMin, Integer mediaImagesHeightMax, Integer mediaImagesContentLengthMin, Integer mediaImagesContentLengthMax, List<String> mediaImagesFormat, List<String> notMediaImagesFormat, Integer mediaVideosCountMin, Integer mediaVideosCountMax, List<Integer> authorId, List<Integer> notAuthorId, String authorName, String notAuthorName, List<Integer> sourceId, List<Integer> notSourceId, List<String> sourceName, List<String> notSourceName, List<String> sourceDomain, List<String> notSourceDomain, List<String> sourceLocationsCountry, List<String> notSourceLocationsCountry, List<String> sourceLocationsState, List<String> notSourceLocationsState, List<String> sourceLocationsCity, List<String> notSourceLocationsCity, List<String> sourceScopesCountry, List<String> notSourceScopesCountry, List<String> sourceScopesState, List<String> notSourceScopesState, List<String> sourceScopesCity, List<String> notSourceScopesCity, List<String> sourceScopesLevel, List<String> notSourceScopesLevel, Integer sourceLinksInCountMin, Integer sourceLinksInCountMax, Integer sourceRankingsAlexaRankMin, Integer sourceRankingsAlexaRankMax, List<String> sourceRankingsAlexaCountry, Integer socialSharesCountFacebookMin, Integer socialSharesCountFacebookMax, Integer socialSharesCountGooglePlusMin, Integer socialSharesCountGooglePlusMax, Integer socialSharesCountLinkedinMin, Integer socialSharesCountLinkedinMax, Integer socialSharesCountRedditMin, Integer socialSharesCountRedditMax, String publishedAtStart, String publishedAtEnd, String period) throws ApiException {
        okhttp3.Call localVarCall = listTimeSeriesValidateBeforeCall(id, notId, title, body, text, translationsEnTitle, translationsEnBody, translationsEnText, language, notLanguage, categoriesTaxonomy, categoriesConfident, categoriesId, notCategoriesId, categoriesLevel, notCategoriesLevel, entitiesTitleText, notEntitiesTitleText, entitiesTitleType, notEntitiesTitleType, entitiesTitleLinksDbpedia, notEntitiesTitleLinksDbpedia, entitiesBodyText, notEntitiesBodyText, entitiesBodyType, notEntitiesBodyType, entitiesBodyLinksDbpedia, notEntitiesBodyLinksDbpedia, sentimentTitlePolarity, notSentimentTitlePolarity, sentimentBodyPolarity, notSentimentBodyPolarity, mediaImagesCountMin, mediaImagesCountMax, mediaImagesWidthMin, mediaImagesWidthMax, mediaImagesHeightMin, mediaImagesHeightMax, mediaImagesContentLengthMin, mediaImagesContentLengthMax, mediaImagesFormat, notMediaImagesFormat, mediaVideosCountMin, mediaVideosCountMax, authorId, notAuthorId, authorName, notAuthorName, sourceId, notSourceId, sourceName, notSourceName, sourceDomain, notSourceDomain, sourceLocationsCountry, notSourceLocationsCountry, sourceLocationsState, notSourceLocationsState, sourceLocationsCity, notSourceLocationsCity, sourceScopesCountry, notSourceScopesCountry, sourceScopesState, notSourceScopesState, sourceScopesCity, notSourceScopesCity, sourceScopesLevel, notSourceScopesLevel, sourceLinksInCountMin, sourceLinksInCountMax, sourceRankingsAlexaRankMin, sourceRankingsAlexaRankMax, sourceRankingsAlexaCountry, socialSharesCountFacebookMin, socialSharesCountFacebookMax, socialSharesCountGooglePlusMin, socialSharesCountGooglePlusMax, socialSharesCountLinkedinMin, socialSharesCountLinkedinMax, socialSharesCountRedditMin, socialSharesCountRedditMax, publishedAtStart, publishedAtEnd, period, null);
        Type localVarReturnType = new TypeToken<TimeSeriesList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTimeSeriesAsync(List<Long> id, List<Long> notId, String title, String body, String text, String translationsEnTitle, String translationsEnBody, String translationsEnText, List<String> language, List<String> notLanguage, String categoriesTaxonomy, Boolean categoriesConfident, List<String> categoriesId, List<String> notCategoriesId, List<Integer> categoriesLevel, List<Integer> notCategoriesLevel, List<String> entitiesTitleText, List<String> notEntitiesTitleText, List<String> entitiesTitleType, List<String> notEntitiesTitleType, List<String> entitiesTitleLinksDbpedia, List<String> notEntitiesTitleLinksDbpedia, List<String> entitiesBodyText, List<String> notEntitiesBodyText, List<String> entitiesBodyType, List<String> notEntitiesBodyType, List<String> entitiesBodyLinksDbpedia, List<String> notEntitiesBodyLinksDbpedia, String sentimentTitlePolarity, String notSentimentTitlePolarity, String sentimentBodyPolarity, String notSentimentBodyPolarity, Integer mediaImagesCountMin, Integer mediaImagesCountMax, Integer mediaImagesWidthMin, Integer mediaImagesWidthMax, Integer mediaImagesHeightMin, Integer mediaImagesHeightMax, Integer mediaImagesContentLengthMin, Integer mediaImagesContentLengthMax, List<String> mediaImagesFormat, List<String> notMediaImagesFormat, Integer mediaVideosCountMin, Integer mediaVideosCountMax, List<Integer> authorId, List<Integer> notAuthorId, String authorName, String notAuthorName, List<Integer> sourceId, List<Integer> notSourceId, List<String> sourceName, List<String> notSourceName, List<String> sourceDomain, List<String> notSourceDomain, List<String> sourceLocationsCountry, List<String> notSourceLocationsCountry, List<String> sourceLocationsState, List<String> notSourceLocationsState, List<String> sourceLocationsCity, List<String> notSourceLocationsCity, List<String> sourceScopesCountry, List<String> notSourceScopesCountry, List<String> sourceScopesState, List<String> notSourceScopesState, List<String> sourceScopesCity, List<String> notSourceScopesCity, List<String> sourceScopesLevel, List<String> notSourceScopesLevel, Integer sourceLinksInCountMin, Integer sourceLinksInCountMax, Integer sourceRankingsAlexaRankMin, Integer sourceRankingsAlexaRankMax, List<String> sourceRankingsAlexaCountry, Integer socialSharesCountFacebookMin, Integer socialSharesCountFacebookMax, Integer socialSharesCountGooglePlusMin, Integer socialSharesCountGooglePlusMax, Integer socialSharesCountLinkedinMin, Integer socialSharesCountLinkedinMax, Integer socialSharesCountRedditMin, Integer socialSharesCountRedditMax, String publishedAtStart, String publishedAtEnd, String period, final ApiCallback<TimeSeriesList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTimeSeriesValidateBeforeCall(id, notId, title, body, text, translationsEnTitle, translationsEnBody, translationsEnText, language, notLanguage, categoriesTaxonomy, categoriesConfident, categoriesId, notCategoriesId, categoriesLevel, notCategoriesLevel, entitiesTitleText, notEntitiesTitleText, entitiesTitleType, notEntitiesTitleType, entitiesTitleLinksDbpedia, notEntitiesTitleLinksDbpedia, entitiesBodyText, notEntitiesBodyText, entitiesBodyType, notEntitiesBodyType, entitiesBodyLinksDbpedia, notEntitiesBodyLinksDbpedia, sentimentTitlePolarity, notSentimentTitlePolarity, sentimentBodyPolarity, notSentimentBodyPolarity, mediaImagesCountMin, mediaImagesCountMax, mediaImagesWidthMin, mediaImagesWidthMax, mediaImagesHeightMin, mediaImagesHeightMax, mediaImagesContentLengthMin, mediaImagesContentLengthMax, mediaImagesFormat, notMediaImagesFormat, mediaVideosCountMin, mediaVideosCountMax, authorId, notAuthorId, authorName, notAuthorName, sourceId, notSourceId, sourceName, notSourceName, sourceDomain, notSourceDomain, sourceLocationsCountry, notSourceLocationsCountry, sourceLocationsState, notSourceLocationsState, sourceLocationsCity, notSourceLocationsCity, sourceScopesCountry, notSourceScopesCountry, sourceScopesState, notSourceScopesState, sourceScopesCity, notSourceScopesCity, sourceScopesLevel, notSourceScopesLevel, sourceLinksInCountMin, sourceLinksInCountMax, sourceRankingsAlexaRankMin, sourceRankingsAlexaRankMax, sourceRankingsAlexaCountry, socialSharesCountFacebookMin, socialSharesCountFacebookMax, socialSharesCountGooglePlusMin, socialSharesCountGooglePlusMax, socialSharesCountLinkedinMin, socialSharesCountLinkedinMax, socialSharesCountRedditMin, socialSharesCountRedditMax, publishedAtStart, publishedAtEnd, period, _callback);
        Type localVarReturnType = new TypeToken<TimeSeriesList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistTimeSeriesRequest {
        private List<Long> id;
        private List<Long> notId;
        private String title;
        private String body;
        private String text;
        private String translationsEnTitle;
        private String translationsEnBody;
        private String translationsEnText;
        private List<String> language;
        private List<String> notLanguage;
        private String categoriesTaxonomy;
        private Boolean categoriesConfident;
        private List<String> categoriesId;
        private List<String> notCategoriesId;
        private List<Integer> categoriesLevel;
        private List<Integer> notCategoriesLevel;
        private List<String> entitiesTitleText;
        private List<String> notEntitiesTitleText;
        private List<String> entitiesTitleType;
        private List<String> notEntitiesTitleType;
        private List<String> entitiesTitleLinksDbpedia;
        private List<String> notEntitiesTitleLinksDbpedia;
        private List<String> entitiesBodyText;
        private List<String> notEntitiesBodyText;
        private List<String> entitiesBodyType;
        private List<String> notEntitiesBodyType;
        private List<String> entitiesBodyLinksDbpedia;
        private List<String> notEntitiesBodyLinksDbpedia;
        private String sentimentTitlePolarity;
        private String notSentimentTitlePolarity;
        private String sentimentBodyPolarity;
        private String notSentimentBodyPolarity;
        private Integer mediaImagesCountMin;
        private Integer mediaImagesCountMax;
        private Integer mediaImagesWidthMin;
        private Integer mediaImagesWidthMax;
        private Integer mediaImagesHeightMin;
        private Integer mediaImagesHeightMax;
        private Integer mediaImagesContentLengthMin;
        private Integer mediaImagesContentLengthMax;
        private List<String> mediaImagesFormat;
        private List<String> notMediaImagesFormat;
        private Integer mediaVideosCountMin;
        private Integer mediaVideosCountMax;
        private List<Integer> authorId;
        private List<Integer> notAuthorId;
        private String authorName;
        private String notAuthorName;
        private List<Integer> sourceId;
        private List<Integer> notSourceId;
        private List<String> sourceName;
        private List<String> notSourceName;
        private List<String> sourceDomain;
        private List<String> notSourceDomain;
        private List<String> sourceLocationsCountry;
        private List<String> notSourceLocationsCountry;
        private List<String> sourceLocationsState;
        private List<String> notSourceLocationsState;
        private List<String> sourceLocationsCity;
        private List<String> notSourceLocationsCity;
        private List<String> sourceScopesCountry;
        private List<String> notSourceScopesCountry;
        private List<String> sourceScopesState;
        private List<String> notSourceScopesState;
        private List<String> sourceScopesCity;
        private List<String> notSourceScopesCity;
        private List<String> sourceScopesLevel;
        private List<String> notSourceScopesLevel;
        private Integer sourceLinksInCountMin;
        private Integer sourceLinksInCountMax;
        private Integer sourceRankingsAlexaRankMin;
        private Integer sourceRankingsAlexaRankMax;
        private List<String> sourceRankingsAlexaCountry;
        private Integer socialSharesCountFacebookMin;
        private Integer socialSharesCountFacebookMax;
        private Integer socialSharesCountGooglePlusMin;
        private Integer socialSharesCountGooglePlusMax;
        private Integer socialSharesCountLinkedinMin;
        private Integer socialSharesCountLinkedinMax;
        private Integer socialSharesCountRedditMin;
        private Integer socialSharesCountRedditMax;
        private String publishedAtStart;
        private String publishedAtEnd;
        private String period;

        private APIlistTimeSeriesRequest() {
        }

        /**
         * Set id
         * @param id This parameter is used for finding stories by story id.  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest id(List<Long> id) {
            this.id = id;
            return this;
        }

        /**
         * Set notId
         * @param notId This parameter is used for excluding stories by story id.  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest notId(List<Long> notId) {
            this.notId = notId;
            return this;
        }

        /**
         * Set title
         * @param title This parameter is used for finding stories whose title contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators).  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest title(String title) {
            this.title = title;
            return this;
        }

        /**
         * Set body
         * @param body This parameter is used for finding stories whose body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators).  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest body(String body) {
            this.body = body;
            return this;
        }

        /**
         * Set text
         * @param text This parameter is used for finding stories whose title or body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators).  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest text(String text) {
            this.text = text;
            return this;
        }

        /**
         * Set translationsEnTitle
         * @param translationsEnTitle This parameter is used for finding stories whose translation title contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators).  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest translationsEnTitle(String translationsEnTitle) {
            this.translationsEnTitle = translationsEnTitle;
            return this;
        }

        /**
         * Set translationsEnBody
         * @param translationsEnBody This parameter is used for finding stories whose translation body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators).  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest translationsEnBody(String translationsEnBody) {
            this.translationsEnBody = translationsEnBody;
            return this;
        }

        /**
         * Set translationsEnText
         * @param translationsEnText This parameter is used for finding stories whose translation title or body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators).  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest translationsEnText(String translationsEnText) {
            this.translationsEnText = translationsEnText;
            return this;
        }

        /**
         * Set language
         * @param language This parameter is used for finding stories whose language is the specified value. It supports [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language codes.  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest language(List<String> language) {
            this.language = language;
            return this;
        }

        /**
         * Set notLanguage
         * @param notLanguage This parameter is used for excluding stories whose language is the specified value. It supports [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language codes.  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest notLanguage(List<String> notLanguage) {
            this.notLanguage = notLanguage;
            return this;
        }

        /**
         * Set categoriesTaxonomy
         * @param categoriesTaxonomy This parameter is used for defining the type of the taxonomy for the rest of the categories queries. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories).  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest categoriesTaxonomy(String categoriesTaxonomy) {
            this.categoriesTaxonomy = categoriesTaxonomy;
            return this;
        }

        /**
         * Set categoriesConfident
         * @param categoriesConfident This parameter is used for finding stories whose categories are confident. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories).  (optional, default to true)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest categoriesConfident(Boolean categoriesConfident) {
            this.categoriesConfident = categoriesConfident;
            return this;
        }

        /**
         * Set categoriesId
         * @param categoriesId This parameter is used for finding stories by categories id. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories).  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest categoriesId(List<String> categoriesId) {
            this.categoriesId = categoriesId;
            return this;
        }

        /**
         * Set notCategoriesId
         * @param notCategoriesId This parameter is used for excluding stories by categories id. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories).  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest notCategoriesId(List<String> notCategoriesId) {
            this.notCategoriesId = notCategoriesId;
            return this;
        }

        /**
         * Set categoriesLevel
         * @param categoriesLevel This parameter is used for finding stories by categories level. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories).  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest categoriesLevel(List<Integer> categoriesLevel) {
            this.categoriesLevel = categoriesLevel;
            return this;
        }

        /**
         * Set notCategoriesLevel
         * @param notCategoriesLevel This parameter is used for excluding stories by categories level. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories).  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest notCategoriesLevel(List<Integer> notCategoriesLevel) {
            this.notCategoriesLevel = notCategoriesLevel;
            return this;
        }

        /**
         * Set entitiesTitleText
         * @param entitiesTitleText This parameter is used to find stories based on the specified entities &#x60;text&#x60; in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest entitiesTitleText(List<String> entitiesTitleText) {
            this.entitiesTitleText = entitiesTitleText;
            return this;
        }

        /**
         * Set notEntitiesTitleText
         * @param notEntitiesTitleText This parameter is used to exclude stories based on the specified entities &#x60;text&#x60; in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest notEntitiesTitleText(List<String> notEntitiesTitleText) {
            this.notEntitiesTitleText = notEntitiesTitleText;
            return this;
        }

        /**
         * Set entitiesTitleType
         * @param entitiesTitleType This parameter is used to find stories based on the specified entities &#x60;type&#x60; in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest entitiesTitleType(List<String> entitiesTitleType) {
            this.entitiesTitleType = entitiesTitleType;
            return this;
        }

        /**
         * Set notEntitiesTitleType
         * @param notEntitiesTitleType This parameter is used to exclude stories based on the specified entities &#x60;type&#x60; in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest notEntitiesTitleType(List<String> notEntitiesTitleType) {
            this.notEntitiesTitleType = notEntitiesTitleType;
            return this;
        }

        /**
         * Set entitiesTitleLinksDbpedia
         * @param entitiesTitleLinksDbpedia This parameter is used to find stories based on the specified entities dbpedia URL in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest entitiesTitleLinksDbpedia(List<String> entitiesTitleLinksDbpedia) {
            this.entitiesTitleLinksDbpedia = entitiesTitleLinksDbpedia;
            return this;
        }

        /**
         * Set notEntitiesTitleLinksDbpedia
         * @param notEntitiesTitleLinksDbpedia This parameter is used to exclude stories based on the specified entities dbpedia URL in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest notEntitiesTitleLinksDbpedia(List<String> notEntitiesTitleLinksDbpedia) {
            this.notEntitiesTitleLinksDbpedia = notEntitiesTitleLinksDbpedia;
            return this;
        }

        /**
         * Set entitiesBodyText
         * @param entitiesBodyText This parameter is used to find stories based on the specified entities &#x60;text&#x60; in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest entitiesBodyText(List<String> entitiesBodyText) {
            this.entitiesBodyText = entitiesBodyText;
            return this;
        }

        /**
         * Set notEntitiesBodyText
         * @param notEntitiesBodyText This parameter is used to exclude stories based on the specified entities &#x60;text&#x60; in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest notEntitiesBodyText(List<String> notEntitiesBodyText) {
            this.notEntitiesBodyText = notEntitiesBodyText;
            return this;
        }

        /**
         * Set entitiesBodyType
         * @param entitiesBodyType This parameter is used to find stories based on the specified entities &#x60;type&#x60; in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest entitiesBodyType(List<String> entitiesBodyType) {
            this.entitiesBodyType = entitiesBodyType;
            return this;
        }

        /**
         * Set notEntitiesBodyType
         * @param notEntitiesBodyType This parameter is used to exclude stories based on the specified entities &#x60;type&#x60; in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest notEntitiesBodyType(List<String> notEntitiesBodyType) {
            this.notEntitiesBodyType = notEntitiesBodyType;
            return this;
        }

        /**
         * Set entitiesBodyLinksDbpedia
         * @param entitiesBodyLinksDbpedia This parameter is used to find stories based on the specified entities dbpedia URL in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest entitiesBodyLinksDbpedia(List<String> entitiesBodyLinksDbpedia) {
            this.entitiesBodyLinksDbpedia = entitiesBodyLinksDbpedia;
            return this;
        }

        /**
         * Set notEntitiesBodyLinksDbpedia
         * @param notEntitiesBodyLinksDbpedia This parameter is used to exclude stories based on the specified entities dbpedia URL in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest notEntitiesBodyLinksDbpedia(List<String> notEntitiesBodyLinksDbpedia) {
            this.notEntitiesBodyLinksDbpedia = notEntitiesBodyLinksDbpedia;
            return this;
        }

        /**
         * Set sentimentTitlePolarity
         * @param sentimentTitlePolarity This parameter is used for finding stories whose title sentiment is the specified value.  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest sentimentTitlePolarity(String sentimentTitlePolarity) {
            this.sentimentTitlePolarity = sentimentTitlePolarity;
            return this;
        }

        /**
         * Set notSentimentTitlePolarity
         * @param notSentimentTitlePolarity This parameter is used for excluding stories whose title sentiment is the specified value.  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest notSentimentTitlePolarity(String notSentimentTitlePolarity) {
            this.notSentimentTitlePolarity = notSentimentTitlePolarity;
            return this;
        }

        /**
         * Set sentimentBodyPolarity
         * @param sentimentBodyPolarity This parameter is used for finding stories whose body sentiment is the specified value.  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest sentimentBodyPolarity(String sentimentBodyPolarity) {
            this.sentimentBodyPolarity = sentimentBodyPolarity;
            return this;
        }

        /**
         * Set notSentimentBodyPolarity
         * @param notSentimentBodyPolarity This parameter is used for excluding stories whose body sentiment is the specified value.  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest notSentimentBodyPolarity(String notSentimentBodyPolarity) {
            this.notSentimentBodyPolarity = notSentimentBodyPolarity;
            return this;
        }

        /**
         * Set mediaImagesCountMin
         * @param mediaImagesCountMin This parameter is used for finding stories whose number of images is greater than or equal to the specified value.  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest mediaImagesCountMin(Integer mediaImagesCountMin) {
            this.mediaImagesCountMin = mediaImagesCountMin;
            return this;
        }

        /**
         * Set mediaImagesCountMax
         * @param mediaImagesCountMax This parameter is used for finding stories whose number of images is less than or equal to the specified value.  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest mediaImagesCountMax(Integer mediaImagesCountMax) {
            this.mediaImagesCountMax = mediaImagesCountMax;
            return this;
        }

        /**
         * Set mediaImagesWidthMin
         * @param mediaImagesWidthMin This parameter is used for finding stories whose width of images are greater than or equal to the specified value.  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest mediaImagesWidthMin(Integer mediaImagesWidthMin) {
            this.mediaImagesWidthMin = mediaImagesWidthMin;
            return this;
        }

        /**
         * Set mediaImagesWidthMax
         * @param mediaImagesWidthMax This parameter is used for finding stories whose width of images are less than or equal to the specified value.  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest mediaImagesWidthMax(Integer mediaImagesWidthMax) {
            this.mediaImagesWidthMax = mediaImagesWidthMax;
            return this;
        }

        /**
         * Set mediaImagesHeightMin
         * @param mediaImagesHeightMin This parameter is used for finding stories whose height of images are greater than or equal to the specified value.  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest mediaImagesHeightMin(Integer mediaImagesHeightMin) {
            this.mediaImagesHeightMin = mediaImagesHeightMin;
            return this;
        }

        /**
         * Set mediaImagesHeightMax
         * @param mediaImagesHeightMax This parameter is used for finding stories whose height of images are less than or equal to the specified value.  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest mediaImagesHeightMax(Integer mediaImagesHeightMax) {
            this.mediaImagesHeightMax = mediaImagesHeightMax;
            return this;
        }

        /**
         * Set mediaImagesContentLengthMin
         * @param mediaImagesContentLengthMin This parameter is used for finding stories whose images content length are greater than or equal to the specified value.  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest mediaImagesContentLengthMin(Integer mediaImagesContentLengthMin) {
            this.mediaImagesContentLengthMin = mediaImagesContentLengthMin;
            return this;
        }

        /**
         * Set mediaImagesContentLengthMax
         * @param mediaImagesContentLengthMax This parameter is used for finding stories whose images content length are less than or equal to the specified value.  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest mediaImagesContentLengthMax(Integer mediaImagesContentLengthMax) {
            this.mediaImagesContentLengthMax = mediaImagesContentLengthMax;
            return this;
        }

        /**
         * Set mediaImagesFormat
         * @param mediaImagesFormat This parameter is used for finding stories whose images format are the specified value.  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest mediaImagesFormat(List<String> mediaImagesFormat) {
            this.mediaImagesFormat = mediaImagesFormat;
            return this;
        }

        /**
         * Set notMediaImagesFormat
         * @param notMediaImagesFormat This parameter is used for excluding stories whose images format are the specified value.  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest notMediaImagesFormat(List<String> notMediaImagesFormat) {
            this.notMediaImagesFormat = notMediaImagesFormat;
            return this;
        }

        /**
         * Set mediaVideosCountMin
         * @param mediaVideosCountMin This parameter is used for finding stories whose number of videos is greater than or equal to the specified value.  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest mediaVideosCountMin(Integer mediaVideosCountMin) {
            this.mediaVideosCountMin = mediaVideosCountMin;
            return this;
        }

        /**
         * Set mediaVideosCountMax
         * @param mediaVideosCountMax This parameter is used for finding stories whose number of videos is less than or equal to the specified value.  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest mediaVideosCountMax(Integer mediaVideosCountMax) {
            this.mediaVideosCountMax = mediaVideosCountMax;
            return this;
        }

        /**
         * Set authorId
         * @param authorId This parameter is used for finding stories whose author id is the specified value.  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest authorId(List<Integer> authorId) {
            this.authorId = authorId;
            return this;
        }

        /**
         * Set notAuthorId
         * @param notAuthorId This parameter is used for excluding stories whose author id is the specified value.  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest notAuthorId(List<Integer> notAuthorId) {
            this.notAuthorId = notAuthorId;
            return this;
        }

        /**
         * Set authorName
         * @param authorName This parameter is used for finding stories whose author full name contains the specified value.  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest authorName(String authorName) {
            this.authorName = authorName;
            return this;
        }

        /**
         * Set notAuthorName
         * @param notAuthorName This parameter is used for excluding stories whose author full name contains the specified value.  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest notAuthorName(String notAuthorName) {
            this.notAuthorName = notAuthorName;
            return this;
        }

        /**
         * Set sourceId
         * @param sourceId This parameter is used for finding stories whose source id is the specified value.  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest sourceId(List<Integer> sourceId) {
            this.sourceId = sourceId;
            return this;
        }

        /**
         * Set notSourceId
         * @param notSourceId This parameter is used for excluding stories whose source id is the specified value.  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest notSourceId(List<Integer> notSourceId) {
            this.notSourceId = notSourceId;
            return this;
        }

        /**
         * Set sourceName
         * @param sourceName This parameter is used for finding stories whose source name contains the specified value.  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest sourceName(List<String> sourceName) {
            this.sourceName = sourceName;
            return this;
        }

        /**
         * Set notSourceName
         * @param notSourceName This parameter is used for excluding stories whose source name contains the specified value.  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest notSourceName(List<String> notSourceName) {
            this.notSourceName = notSourceName;
            return this;
        }

        /**
         * Set sourceDomain
         * @param sourceDomain This parameter is used for finding stories whose source domain is the specified value.  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest sourceDomain(List<String> sourceDomain) {
            this.sourceDomain = sourceDomain;
            return this;
        }

        /**
         * Set notSourceDomain
         * @param notSourceDomain This parameter is used for excluding stories whose source domain is the specified value.  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest notSourceDomain(List<String> notSourceDomain) {
            this.notSourceDomain = notSourceDomain;
            return this;
        }

        /**
         * Set sourceLocationsCountry
         * @param sourceLocationsCountry This parameter is used for finding stories whose source country is the specified value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest sourceLocationsCountry(List<String> sourceLocationsCountry) {
            this.sourceLocationsCountry = sourceLocationsCountry;
            return this;
        }

        /**
         * Set notSourceLocationsCountry
         * @param notSourceLocationsCountry This parameter is used for excluding stories whose source country is the specified value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest notSourceLocationsCountry(List<String> notSourceLocationsCountry) {
            this.notSourceLocationsCountry = notSourceLocationsCountry;
            return this;
        }

        /**
         * Set sourceLocationsState
         * @param sourceLocationsState This parameter is used for finding stories whose source state/province is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest sourceLocationsState(List<String> sourceLocationsState) {
            this.sourceLocationsState = sourceLocationsState;
            return this;
        }

        /**
         * Set notSourceLocationsState
         * @param notSourceLocationsState This parameter is used for excluding stories whose source state/province is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest notSourceLocationsState(List<String> notSourceLocationsState) {
            this.notSourceLocationsState = notSourceLocationsState;
            return this;
        }

        /**
         * Set sourceLocationsCity
         * @param sourceLocationsCity This parameter is used for finding stories whose source city is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest sourceLocationsCity(List<String> sourceLocationsCity) {
            this.sourceLocationsCity = sourceLocationsCity;
            return this;
        }

        /**
         * Set notSourceLocationsCity
         * @param notSourceLocationsCity This parameter is used for excluding stories whose source city is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest notSourceLocationsCity(List<String> notSourceLocationsCity) {
            this.notSourceLocationsCity = notSourceLocationsCity;
            return this;
        }

        /**
         * Set sourceScopesCountry
         * @param sourceScopesCountry This parameter is used for finding stories whose source scopes is the specified country value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest sourceScopesCountry(List<String> sourceScopesCountry) {
            this.sourceScopesCountry = sourceScopesCountry;
            return this;
        }

        /**
         * Set notSourceScopesCountry
         * @param notSourceScopesCountry This parameter is used for excluding stories whose source scopes is the specified country value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest notSourceScopesCountry(List<String> notSourceScopesCountry) {
            this.notSourceScopesCountry = notSourceScopesCountry;
            return this;
        }

        /**
         * Set sourceScopesState
         * @param sourceScopesState This parameter is used for finding stories whose source scopes is the specified state/province value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest sourceScopesState(List<String> sourceScopesState) {
            this.sourceScopesState = sourceScopesState;
            return this;
        }

        /**
         * Set notSourceScopesState
         * @param notSourceScopesState This parameter is used for excluding stories whose source scopes is the specified state/province value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest notSourceScopesState(List<String> notSourceScopesState) {
            this.notSourceScopesState = notSourceScopesState;
            return this;
        }

        /**
         * Set sourceScopesCity
         * @param sourceScopesCity This parameter is used for finding stories whose source scopes is the specified city value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest sourceScopesCity(List<String> sourceScopesCity) {
            this.sourceScopesCity = sourceScopesCity;
            return this;
        }

        /**
         * Set notSourceScopesCity
         * @param notSourceScopesCity This parameter is used for excluding stories whose source scopes is the specified city value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest notSourceScopesCity(List<String> notSourceScopesCity) {
            this.notSourceScopesCity = notSourceScopesCity;
            return this;
        }

        /**
         * Set sourceScopesLevel
         * @param sourceScopesLevel This parameter is used for finding stories whose source scopes is the specified level value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest sourceScopesLevel(List<String> sourceScopesLevel) {
            this.sourceScopesLevel = sourceScopesLevel;
            return this;
        }

        /**
         * Set notSourceScopesLevel
         * @param notSourceScopesLevel This parameter is used for excluding stories whose source scopes is the specified level value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest notSourceScopesLevel(List<String> notSourceScopesLevel) {
            this.notSourceScopesLevel = notSourceScopesLevel;
            return this;
        }

        /**
         * Set sourceLinksInCountMin
         * @param sourceLinksInCountMin This parameter is used for finding stories from sources whose Links in count is greater than or equal to the specified value. You can read more about working with Links in count [here](https://newsapi.aylien.com/docs/working-with-links-in-count).  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest sourceLinksInCountMin(Integer sourceLinksInCountMin) {
            this.sourceLinksInCountMin = sourceLinksInCountMin;
            return this;
        }

        /**
         * Set sourceLinksInCountMax
         * @param sourceLinksInCountMax This parameter is used for finding stories from sources whose Links in count is less than or equal to the specified value. You can read more about working with Links in count [here](https://newsapi.aylien.com/docs/working-with-links-in-count).  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest sourceLinksInCountMax(Integer sourceLinksInCountMax) {
            this.sourceLinksInCountMax = sourceLinksInCountMax;
            return this;
        }

        /**
         * Set sourceRankingsAlexaRankMin
         * @param sourceRankingsAlexaRankMin This parameter is used for finding stories from sources whose Alexa rank is greater than or equal to the specified value. You can read more about working with Alexa ranks [here](https://newsapi.aylien.com/docs/working-with-alexa-ranks).  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest sourceRankingsAlexaRankMin(Integer sourceRankingsAlexaRankMin) {
            this.sourceRankingsAlexaRankMin = sourceRankingsAlexaRankMin;
            return this;
        }

        /**
         * Set sourceRankingsAlexaRankMax
         * @param sourceRankingsAlexaRankMax This parameter is used for finding stories from sources whose Alexa rank is less than or equal to the specified value. You can read more about working with Alexa ranks [here](https://newsapi.aylien.com/docs/working-with-alexa-ranks).  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest sourceRankingsAlexaRankMax(Integer sourceRankingsAlexaRankMax) {
            this.sourceRankingsAlexaRankMax = sourceRankingsAlexaRankMax;
            return this;
        }

        /**
         * Set sourceRankingsAlexaCountry
         * @param sourceRankingsAlexaCountry This parameter is used for finding stories from sources whose Alexa rank is in the specified country value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. You can read more about working with Alexa ranks [here](https://newsapi.aylien.com/docs/working-with-alexa-ranks).  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest sourceRankingsAlexaCountry(List<String> sourceRankingsAlexaCountry) {
            this.sourceRankingsAlexaCountry = sourceRankingsAlexaCountry;
            return this;
        }

        /**
         * Set socialSharesCountFacebookMin
         * @param socialSharesCountFacebookMin This parameter is used for finding stories whose Facebook social shares count is greater than or equal to the specified value.  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest socialSharesCountFacebookMin(Integer socialSharesCountFacebookMin) {
            this.socialSharesCountFacebookMin = socialSharesCountFacebookMin;
            return this;
        }

        /**
         * Set socialSharesCountFacebookMax
         * @param socialSharesCountFacebookMax This parameter is used for finding stories whose Facebook social shares count is less than or equal to the specified value.  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest socialSharesCountFacebookMax(Integer socialSharesCountFacebookMax) {
            this.socialSharesCountFacebookMax = socialSharesCountFacebookMax;
            return this;
        }

        /**
         * Set socialSharesCountGooglePlusMin
         * @param socialSharesCountGooglePlusMin This parameter is used for finding stories whose Google+ social shares count is greater than or equal to the specified value.  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest socialSharesCountGooglePlusMin(Integer socialSharesCountGooglePlusMin) {
            this.socialSharesCountGooglePlusMin = socialSharesCountGooglePlusMin;
            return this;
        }

        /**
         * Set socialSharesCountGooglePlusMax
         * @param socialSharesCountGooglePlusMax This parameter is used for finding stories whose Google+ social shares count is less than or equal to the specified value.  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest socialSharesCountGooglePlusMax(Integer socialSharesCountGooglePlusMax) {
            this.socialSharesCountGooglePlusMax = socialSharesCountGooglePlusMax;
            return this;
        }

        /**
         * Set socialSharesCountLinkedinMin
         * @param socialSharesCountLinkedinMin This parameter is used for finding stories whose LinkedIn social shares count is greater than or equal to the specified value.  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest socialSharesCountLinkedinMin(Integer socialSharesCountLinkedinMin) {
            this.socialSharesCountLinkedinMin = socialSharesCountLinkedinMin;
            return this;
        }

        /**
         * Set socialSharesCountLinkedinMax
         * @param socialSharesCountLinkedinMax This parameter is used for finding stories whose LinkedIn social shares count is less than or equal to the specified value.  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest socialSharesCountLinkedinMax(Integer socialSharesCountLinkedinMax) {
            this.socialSharesCountLinkedinMax = socialSharesCountLinkedinMax;
            return this;
        }

        /**
         * Set socialSharesCountRedditMin
         * @param socialSharesCountRedditMin This parameter is used for finding stories whose Reddit social shares count is greater than or equal to the specified value.  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest socialSharesCountRedditMin(Integer socialSharesCountRedditMin) {
            this.socialSharesCountRedditMin = socialSharesCountRedditMin;
            return this;
        }

        /**
         * Set socialSharesCountRedditMax
         * @param socialSharesCountRedditMax This parameter is used for finding stories whose Reddit social shares count is less than or equal to the specified value.  (optional)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest socialSharesCountRedditMax(Integer socialSharesCountRedditMax) {
            this.socialSharesCountRedditMax = socialSharesCountRedditMax;
            return this;
        }

        /**
         * Set publishedAtStart
         * @param publishedAtStart This parameter is used for finding stories whose published at time is less than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates).  (optional, default to &quot;NOW-7DAYS/DAY&quot;)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest publishedAtStart(String publishedAtStart) {
            this.publishedAtStart = publishedAtStart;
            return this;
        }

        /**
         * Set publishedAtEnd
         * @param publishedAtEnd This parameter is used for finding stories whose published at time is greater than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates).  (optional, default to &quot;NOW/DAY&quot;)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest publishedAtEnd(String publishedAtEnd) {
            this.publishedAtEnd = publishedAtEnd;
            return this;
        }

        /**
         * Set period
         * @param period The size of each date range is expressed as an interval to be added to the lower bound. It supports Date Math Syntax. Valid options are &#x60;+&#x60; following an integer number greater than 0 and one of the Date Math keywords. e.g. &#x60;+1DAY&#x60;, &#x60;+2MINUTES&#x60; and &#x60;+1MONTH&#x60;. Here are [Supported keywords](https://newsapi.aylien.com/docs/working-with-dates#date-math).  (optional, default to &quot;+1DAY&quot;)
         * @return APIlistTimeSeriesRequest
         */
        public APIlistTimeSeriesRequest period(String period) {
            this.period = period;
            return this;
        }

        /**
         * Build call for listTimeSeries
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An object including an array of time series </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTimeSeriesCall(id, notId, title, body, text, translationsEnTitle, translationsEnBody, translationsEnText, language, notLanguage, categoriesTaxonomy, categoriesConfident, categoriesId, notCategoriesId, categoriesLevel, notCategoriesLevel, entitiesTitleText, notEntitiesTitleText, entitiesTitleType, notEntitiesTitleType, entitiesTitleLinksDbpedia, notEntitiesTitleLinksDbpedia, entitiesBodyText, notEntitiesBodyText, entitiesBodyType, notEntitiesBodyType, entitiesBodyLinksDbpedia, notEntitiesBodyLinksDbpedia, sentimentTitlePolarity, notSentimentTitlePolarity, sentimentBodyPolarity, notSentimentBodyPolarity, mediaImagesCountMin, mediaImagesCountMax, mediaImagesWidthMin, mediaImagesWidthMax, mediaImagesHeightMin, mediaImagesHeightMax, mediaImagesContentLengthMin, mediaImagesContentLengthMax, mediaImagesFormat, notMediaImagesFormat, mediaVideosCountMin, mediaVideosCountMax, authorId, notAuthorId, authorName, notAuthorName, sourceId, notSourceId, sourceName, notSourceName, sourceDomain, notSourceDomain, sourceLocationsCountry, notSourceLocationsCountry, sourceLocationsState, notSourceLocationsState, sourceLocationsCity, notSourceLocationsCity, sourceScopesCountry, notSourceScopesCountry, sourceScopesState, notSourceScopesState, sourceScopesCity, notSourceScopesCity, sourceScopesLevel, notSourceScopesLevel, sourceLinksInCountMin, sourceLinksInCountMax, sourceRankingsAlexaRankMin, sourceRankingsAlexaRankMax, sourceRankingsAlexaCountry, socialSharesCountFacebookMin, socialSharesCountFacebookMax, socialSharesCountGooglePlusMin, socialSharesCountGooglePlusMax, socialSharesCountLinkedinMin, socialSharesCountLinkedinMax, socialSharesCountRedditMin, socialSharesCountRedditMax, publishedAtStart, publishedAtEnd, period, _callback);
        }

        /**
         * Execute listTimeSeries request
         * @return TimeSeriesList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An object including an array of time series </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public TimeSeriesList execute() throws ApiException {
            ApiResponse<TimeSeriesList> localVarResp = listTimeSeriesWithHttpInfo(id, notId, title, body, text, translationsEnTitle, translationsEnBody, translationsEnText, language, notLanguage, categoriesTaxonomy, categoriesConfident, categoriesId, notCategoriesId, categoriesLevel, notCategoriesLevel, entitiesTitleText, notEntitiesTitleText, entitiesTitleType, notEntitiesTitleType, entitiesTitleLinksDbpedia, notEntitiesTitleLinksDbpedia, entitiesBodyText, notEntitiesBodyText, entitiesBodyType, notEntitiesBodyType, entitiesBodyLinksDbpedia, notEntitiesBodyLinksDbpedia, sentimentTitlePolarity, notSentimentTitlePolarity, sentimentBodyPolarity, notSentimentBodyPolarity, mediaImagesCountMin, mediaImagesCountMax, mediaImagesWidthMin, mediaImagesWidthMax, mediaImagesHeightMin, mediaImagesHeightMax, mediaImagesContentLengthMin, mediaImagesContentLengthMax, mediaImagesFormat, notMediaImagesFormat, mediaVideosCountMin, mediaVideosCountMax, authorId, notAuthorId, authorName, notAuthorName, sourceId, notSourceId, sourceName, notSourceName, sourceDomain, notSourceDomain, sourceLocationsCountry, notSourceLocationsCountry, sourceLocationsState, notSourceLocationsState, sourceLocationsCity, notSourceLocationsCity, sourceScopesCountry, notSourceScopesCountry, sourceScopesState, notSourceScopesState, sourceScopesCity, notSourceScopesCity, sourceScopesLevel, notSourceScopesLevel, sourceLinksInCountMin, sourceLinksInCountMax, sourceRankingsAlexaRankMin, sourceRankingsAlexaRankMax, sourceRankingsAlexaCountry, socialSharesCountFacebookMin, socialSharesCountFacebookMax, socialSharesCountGooglePlusMin, socialSharesCountGooglePlusMax, socialSharesCountLinkedinMin, socialSharesCountLinkedinMax, socialSharesCountRedditMin, socialSharesCountRedditMax, publishedAtStart, publishedAtEnd, period);
            return localVarResp.getData();
        }

        /**
         * Execute listTimeSeries request with HTTP info returned
         * @return ApiResponse&lt;TimeSeriesList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An object including an array of time series </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimeSeriesList> executeWithHttpInfo() throws ApiException {
            return listTimeSeriesWithHttpInfo(id, notId, title, body, text, translationsEnTitle, translationsEnBody, translationsEnText, language, notLanguage, categoriesTaxonomy, categoriesConfident, categoriesId, notCategoriesId, categoriesLevel, notCategoriesLevel, entitiesTitleText, notEntitiesTitleText, entitiesTitleType, notEntitiesTitleType, entitiesTitleLinksDbpedia, notEntitiesTitleLinksDbpedia, entitiesBodyText, notEntitiesBodyText, entitiesBodyType, notEntitiesBodyType, entitiesBodyLinksDbpedia, notEntitiesBodyLinksDbpedia, sentimentTitlePolarity, notSentimentTitlePolarity, sentimentBodyPolarity, notSentimentBodyPolarity, mediaImagesCountMin, mediaImagesCountMax, mediaImagesWidthMin, mediaImagesWidthMax, mediaImagesHeightMin, mediaImagesHeightMax, mediaImagesContentLengthMin, mediaImagesContentLengthMax, mediaImagesFormat, notMediaImagesFormat, mediaVideosCountMin, mediaVideosCountMax, authorId, notAuthorId, authorName, notAuthorName, sourceId, notSourceId, sourceName, notSourceName, sourceDomain, notSourceDomain, sourceLocationsCountry, notSourceLocationsCountry, sourceLocationsState, notSourceLocationsState, sourceLocationsCity, notSourceLocationsCity, sourceScopesCountry, notSourceScopesCountry, sourceScopesState, notSourceScopesState, sourceScopesCity, notSourceScopesCity, sourceScopesLevel, notSourceScopesLevel, sourceLinksInCountMin, sourceLinksInCountMax, sourceRankingsAlexaRankMin, sourceRankingsAlexaRankMax, sourceRankingsAlexaCountry, socialSharesCountFacebookMin, socialSharesCountFacebookMax, socialSharesCountGooglePlusMin, socialSharesCountGooglePlusMax, socialSharesCountLinkedinMin, socialSharesCountLinkedinMax, socialSharesCountRedditMin, socialSharesCountRedditMax, publishedAtStart, publishedAtEnd, period);
        }

        /**
         * Execute listTimeSeries request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An object including an array of time series </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimeSeriesList> _callback) throws ApiException {
            return listTimeSeriesAsync(id, notId, title, body, text, translationsEnTitle, translationsEnBody, translationsEnText, language, notLanguage, categoriesTaxonomy, categoriesConfident, categoriesId, notCategoriesId, categoriesLevel, notCategoriesLevel, entitiesTitleText, notEntitiesTitleText, entitiesTitleType, notEntitiesTitleType, entitiesTitleLinksDbpedia, notEntitiesTitleLinksDbpedia, entitiesBodyText, notEntitiesBodyText, entitiesBodyType, notEntitiesBodyType, entitiesBodyLinksDbpedia, notEntitiesBodyLinksDbpedia, sentimentTitlePolarity, notSentimentTitlePolarity, sentimentBodyPolarity, notSentimentBodyPolarity, mediaImagesCountMin, mediaImagesCountMax, mediaImagesWidthMin, mediaImagesWidthMax, mediaImagesHeightMin, mediaImagesHeightMax, mediaImagesContentLengthMin, mediaImagesContentLengthMax, mediaImagesFormat, notMediaImagesFormat, mediaVideosCountMin, mediaVideosCountMax, authorId, notAuthorId, authorName, notAuthorName, sourceId, notSourceId, sourceName, notSourceName, sourceDomain, notSourceDomain, sourceLocationsCountry, notSourceLocationsCountry, sourceLocationsState, notSourceLocationsState, sourceLocationsCity, notSourceLocationsCity, sourceScopesCountry, notSourceScopesCountry, sourceScopesState, notSourceScopesState, sourceScopesCity, notSourceScopesCity, sourceScopesLevel, notSourceScopesLevel, sourceLinksInCountMin, sourceLinksInCountMax, sourceRankingsAlexaRankMin, sourceRankingsAlexaRankMax, sourceRankingsAlexaCountry, socialSharesCountFacebookMin, socialSharesCountFacebookMax, socialSharesCountGooglePlusMin, socialSharesCountGooglePlusMax, socialSharesCountLinkedinMin, socialSharesCountLinkedinMax, socialSharesCountRedditMin, socialSharesCountRedditMax, publishedAtStart, publishedAtEnd, period, _callback);
        }
    }

    /**
     * List time series
     * The time series endpoint allows you to track information contained in stories over time. This information can be anything from mentions of a topic or entities, sentiment about a topic, or the volume of stories published by a source, to name but a few. The full list of parameters is given below. Using the [Date Math Syntax](https://newsapi.aylien.com/docs/working-with-dates), you can easily set your query to return information from any time period, from the current point in time to when the News API started collecting stories. The returned information can be rounded to a time also specified by you, for example by setting the results into hourly, daily, or weekly data points. 
     * @return APIlistTimeSeriesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object including an array of time series </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public APIlistTimeSeriesRequest listTimeSeries() {
        return new APIlistTimeSeriesRequest();
    }
    private okhttp3.Call listTrendsCall(String field, List<Long> id, List<Long> notId, String title, String body, String text, String translationsEnTitle, String translationsEnBody, String translationsEnText, List<String> language, List<String> notLanguage, String publishedAtStart, String publishedAtEnd, String categoriesTaxonomy, Boolean categoriesConfident, List<String> categoriesId, List<String> notCategoriesId, List<Integer> categoriesLevel, List<Integer> notCategoriesLevel, List<String> entitiesTitleText, List<String> notEntitiesTitleText, List<String> entitiesTitleType, List<String> notEntitiesTitleType, List<String> entitiesTitleLinksDbpedia, List<String> notEntitiesTitleLinksDbpedia, List<String> entitiesBodyText, List<String> notEntitiesBodyText, List<String> entitiesBodyType, List<String> notEntitiesBodyType, List<String> entitiesBodyLinksDbpedia, List<String> notEntitiesBodyLinksDbpedia, String sentimentTitlePolarity, String notSentimentTitlePolarity, String sentimentBodyPolarity, String notSentimentBodyPolarity, Integer mediaImagesCountMin, Integer mediaImagesCountMax, Integer mediaImagesWidthMin, Integer mediaImagesWidthMax, Integer mediaImagesHeightMin, Integer mediaImagesHeightMax, Integer mediaImagesContentLengthMin, Integer mediaImagesContentLengthMax, List<String> mediaImagesFormat, List<String> notMediaImagesFormat, Integer mediaVideosCountMin, Integer mediaVideosCountMax, List<Integer> authorId, List<Integer> notAuthorId, String authorName, String notAuthorName, List<Integer> sourceId, List<Integer> notSourceId, List<String> sourceName, List<String> notSourceName, List<String> sourceDomain, List<String> notSourceDomain, List<String> sourceLocationsCountry, List<String> notSourceLocationsCountry, List<String> sourceLocationsState, List<String> notSourceLocationsState, List<String> sourceLocationsCity, List<String> notSourceLocationsCity, List<String> sourceScopesCountry, List<String> notSourceScopesCountry, List<String> sourceScopesState, List<String> notSourceScopesState, List<String> sourceScopesCity, List<String> notSourceScopesCity, List<String> sourceScopesLevel, List<String> notSourceScopesLevel, Integer sourceLinksInCountMin, Integer sourceLinksInCountMax, Integer sourceRankingsAlexaRankMin, Integer sourceRankingsAlexaRankMax, List<String> sourceRankingsAlexaCountry, Integer socialSharesCountFacebookMin, Integer socialSharesCountFacebookMax, Integer socialSharesCountGooglePlusMin, Integer socialSharesCountGooglePlusMax, Integer socialSharesCountLinkedinMin, Integer socialSharesCountLinkedinMax, Integer socialSharesCountRedditMin, Integer socialSharesCountRedditMax, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/trends";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id[]", id));
        }

        if (notId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!id[]", notId));
        }

        if (title != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title", title));
        }

        if (body != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("body", body));
        }

        if (text != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text", text));
        }

        if (translationsEnTitle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("translations.en.title", translationsEnTitle));
        }

        if (translationsEnBody != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("translations.en.body", translationsEnBody));
        }

        if (translationsEnText != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("translations.en.text", translationsEnText));
        }

        if (language != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "language[]", language));
        }

        if (notLanguage != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!language[]", notLanguage));
        }

        if (publishedAtStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("published_at.start", publishedAtStart));
        }

        if (publishedAtEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("published_at.end", publishedAtEnd));
        }

        if (categoriesTaxonomy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("categories.taxonomy", categoriesTaxonomy));
        }

        if (categoriesConfident != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("categories.confident", categoriesConfident));
        }

        if (categoriesId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "categories.id[]", categoriesId));
        }

        if (notCategoriesId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!categories.id[]", notCategoriesId));
        }

        if (categoriesLevel != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "categories.level[]", categoriesLevel));
        }

        if (notCategoriesLevel != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!categories.level[]", notCategoriesLevel));
        }

        if (entitiesTitleText != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "entities.title.text[]", entitiesTitleText));
        }

        if (notEntitiesTitleText != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!entities.title.text[]", notEntitiesTitleText));
        }

        if (entitiesTitleType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "entities.title.type[]", entitiesTitleType));
        }

        if (notEntitiesTitleType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!entities.title.type[]", notEntitiesTitleType));
        }

        if (entitiesTitleLinksDbpedia != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "entities.title.links.dbpedia[]", entitiesTitleLinksDbpedia));
        }

        if (notEntitiesTitleLinksDbpedia != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!entities.title.links.dbpedia[]", notEntitiesTitleLinksDbpedia));
        }

        if (entitiesBodyText != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "entities.body.text[]", entitiesBodyText));
        }

        if (notEntitiesBodyText != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!entities.body.text[]", notEntitiesBodyText));
        }

        if (entitiesBodyType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "entities.body.type[]", entitiesBodyType));
        }

        if (notEntitiesBodyType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!entities.body.type[]", notEntitiesBodyType));
        }

        if (entitiesBodyLinksDbpedia != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "entities.body.links.dbpedia[]", entitiesBodyLinksDbpedia));
        }

        if (notEntitiesBodyLinksDbpedia != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!entities.body.links.dbpedia[]", notEntitiesBodyLinksDbpedia));
        }

        if (sentimentTitlePolarity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sentiment.title.polarity", sentimentTitlePolarity));
        }

        if (notSentimentTitlePolarity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("!sentiment.title.polarity", notSentimentTitlePolarity));
        }

        if (sentimentBodyPolarity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sentiment.body.polarity", sentimentBodyPolarity));
        }

        if (notSentimentBodyPolarity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("!sentiment.body.polarity", notSentimentBodyPolarity));
        }

        if (mediaImagesCountMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.images.count.min", mediaImagesCountMin));
        }

        if (mediaImagesCountMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.images.count.max", mediaImagesCountMax));
        }

        if (mediaImagesWidthMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.images.width.min", mediaImagesWidthMin));
        }

        if (mediaImagesWidthMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.images.width.max", mediaImagesWidthMax));
        }

        if (mediaImagesHeightMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.images.height.min", mediaImagesHeightMin));
        }

        if (mediaImagesHeightMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.images.height.max", mediaImagesHeightMax));
        }

        if (mediaImagesContentLengthMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.images.content_length.min", mediaImagesContentLengthMin));
        }

        if (mediaImagesContentLengthMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.images.content_length.max", mediaImagesContentLengthMax));
        }

        if (mediaImagesFormat != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "media.images.format[]", mediaImagesFormat));
        }

        if (notMediaImagesFormat != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!media.images.format[]", notMediaImagesFormat));
        }

        if (mediaVideosCountMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.videos.count.min", mediaVideosCountMin));
        }

        if (mediaVideosCountMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media.videos.count.max", mediaVideosCountMax));
        }

        if (authorId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "author.id[]", authorId));
        }

        if (notAuthorId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!author.id[]", notAuthorId));
        }

        if (authorName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("author.name", authorName));
        }

        if (notAuthorName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("!author.name", notAuthorName));
        }

        if (sourceId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.id[]", sourceId));
        }

        if (notSourceId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.id[]", notSourceId));
        }

        if (sourceName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.name[]", sourceName));
        }

        if (notSourceName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.name[]", notSourceName));
        }

        if (sourceDomain != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.domain[]", sourceDomain));
        }

        if (notSourceDomain != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.domain[]", notSourceDomain));
        }

        if (sourceLocationsCountry != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.locations.country[]", sourceLocationsCountry));
        }

        if (notSourceLocationsCountry != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.locations.country[]", notSourceLocationsCountry));
        }

        if (sourceLocationsState != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.locations.state[]", sourceLocationsState));
        }

        if (notSourceLocationsState != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.locations.state[]", notSourceLocationsState));
        }

        if (sourceLocationsCity != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.locations.city[]", sourceLocationsCity));
        }

        if (notSourceLocationsCity != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.locations.city[]", notSourceLocationsCity));
        }

        if (sourceScopesCountry != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.scopes.country[]", sourceScopesCountry));
        }

        if (notSourceScopesCountry != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.scopes.country[]", notSourceScopesCountry));
        }

        if (sourceScopesState != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.scopes.state[]", sourceScopesState));
        }

        if (notSourceScopesState != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.scopes.state[]", notSourceScopesState));
        }

        if (sourceScopesCity != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.scopes.city[]", sourceScopesCity));
        }

        if (notSourceScopesCity != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.scopes.city[]", notSourceScopesCity));
        }

        if (sourceScopesLevel != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.scopes.level[]", sourceScopesLevel));
        }

        if (notSourceScopesLevel != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "!source.scopes.level[]", notSourceScopesLevel));
        }

        if (sourceLinksInCountMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source.links_in_count.min", sourceLinksInCountMin));
        }

        if (sourceLinksInCountMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source.links_in_count.max", sourceLinksInCountMax));
        }

        if (sourceRankingsAlexaRankMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source.rankings.alexa.rank.min", sourceRankingsAlexaRankMin));
        }

        if (sourceRankingsAlexaRankMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source.rankings.alexa.rank.max", sourceRankingsAlexaRankMax));
        }

        if (sourceRankingsAlexaCountry != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "source.rankings.alexa.country[]", sourceRankingsAlexaCountry));
        }

        if (socialSharesCountFacebookMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("social_shares_count.facebook.min", socialSharesCountFacebookMin));
        }

        if (socialSharesCountFacebookMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("social_shares_count.facebook.max", socialSharesCountFacebookMax));
        }

        if (socialSharesCountGooglePlusMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("social_shares_count.google_plus.min", socialSharesCountGooglePlusMin));
        }

        if (socialSharesCountGooglePlusMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("social_shares_count.google_plus.max", socialSharesCountGooglePlusMax));
        }

        if (socialSharesCountLinkedinMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("social_shares_count.linkedin.min", socialSharesCountLinkedinMin));
        }

        if (socialSharesCountLinkedinMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("social_shares_count.linkedin.max", socialSharesCountLinkedinMax));
        }

        if (socialSharesCountRedditMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("social_shares_count.reddit.min", socialSharesCountRedditMin));
        }

        if (socialSharesCountRedditMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("social_shares_count.reddit.max", socialSharesCountRedditMax));
        }

        if (field != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("field", field));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "app_id", "app_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTrendsValidateBeforeCall(String field, List<Long> id, List<Long> notId, String title, String body, String text, String translationsEnTitle, String translationsEnBody, String translationsEnText, List<String> language, List<String> notLanguage, String publishedAtStart, String publishedAtEnd, String categoriesTaxonomy, Boolean categoriesConfident, List<String> categoriesId, List<String> notCategoriesId, List<Integer> categoriesLevel, List<Integer> notCategoriesLevel, List<String> entitiesTitleText, List<String> notEntitiesTitleText, List<String> entitiesTitleType, List<String> notEntitiesTitleType, List<String> entitiesTitleLinksDbpedia, List<String> notEntitiesTitleLinksDbpedia, List<String> entitiesBodyText, List<String> notEntitiesBodyText, List<String> entitiesBodyType, List<String> notEntitiesBodyType, List<String> entitiesBodyLinksDbpedia, List<String> notEntitiesBodyLinksDbpedia, String sentimentTitlePolarity, String notSentimentTitlePolarity, String sentimentBodyPolarity, String notSentimentBodyPolarity, Integer mediaImagesCountMin, Integer mediaImagesCountMax, Integer mediaImagesWidthMin, Integer mediaImagesWidthMax, Integer mediaImagesHeightMin, Integer mediaImagesHeightMax, Integer mediaImagesContentLengthMin, Integer mediaImagesContentLengthMax, List<String> mediaImagesFormat, List<String> notMediaImagesFormat, Integer mediaVideosCountMin, Integer mediaVideosCountMax, List<Integer> authorId, List<Integer> notAuthorId, String authorName, String notAuthorName, List<Integer> sourceId, List<Integer> notSourceId, List<String> sourceName, List<String> notSourceName, List<String> sourceDomain, List<String> notSourceDomain, List<String> sourceLocationsCountry, List<String> notSourceLocationsCountry, List<String> sourceLocationsState, List<String> notSourceLocationsState, List<String> sourceLocationsCity, List<String> notSourceLocationsCity, List<String> sourceScopesCountry, List<String> notSourceScopesCountry, List<String> sourceScopesState, List<String> notSourceScopesState, List<String> sourceScopesCity, List<String> notSourceScopesCity, List<String> sourceScopesLevel, List<String> notSourceScopesLevel, Integer sourceLinksInCountMin, Integer sourceLinksInCountMax, Integer sourceRankingsAlexaRankMin, Integer sourceRankingsAlexaRankMax, List<String> sourceRankingsAlexaCountry, Integer socialSharesCountFacebookMin, Integer socialSharesCountFacebookMax, Integer socialSharesCountGooglePlusMin, Integer socialSharesCountGooglePlusMax, Integer socialSharesCountLinkedinMin, Integer socialSharesCountLinkedinMax, Integer socialSharesCountRedditMin, Integer socialSharesCountRedditMax, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling listTrends(Async)");
        }
        

        okhttp3.Call localVarCall = listTrendsCall(field, id, notId, title, body, text, translationsEnTitle, translationsEnBody, translationsEnText, language, notLanguage, publishedAtStart, publishedAtEnd, categoriesTaxonomy, categoriesConfident, categoriesId, notCategoriesId, categoriesLevel, notCategoriesLevel, entitiesTitleText, notEntitiesTitleText, entitiesTitleType, notEntitiesTitleType, entitiesTitleLinksDbpedia, notEntitiesTitleLinksDbpedia, entitiesBodyText, notEntitiesBodyText, entitiesBodyType, notEntitiesBodyType, entitiesBodyLinksDbpedia, notEntitiesBodyLinksDbpedia, sentimentTitlePolarity, notSentimentTitlePolarity, sentimentBodyPolarity, notSentimentBodyPolarity, mediaImagesCountMin, mediaImagesCountMax, mediaImagesWidthMin, mediaImagesWidthMax, mediaImagesHeightMin, mediaImagesHeightMax, mediaImagesContentLengthMin, mediaImagesContentLengthMax, mediaImagesFormat, notMediaImagesFormat, mediaVideosCountMin, mediaVideosCountMax, authorId, notAuthorId, authorName, notAuthorName, sourceId, notSourceId, sourceName, notSourceName, sourceDomain, notSourceDomain, sourceLocationsCountry, notSourceLocationsCountry, sourceLocationsState, notSourceLocationsState, sourceLocationsCity, notSourceLocationsCity, sourceScopesCountry, notSourceScopesCountry, sourceScopesState, notSourceScopesState, sourceScopesCity, notSourceScopesCity, sourceScopesLevel, notSourceScopesLevel, sourceLinksInCountMin, sourceLinksInCountMax, sourceRankingsAlexaRankMin, sourceRankingsAlexaRankMax, sourceRankingsAlexaCountry, socialSharesCountFacebookMin, socialSharesCountFacebookMax, socialSharesCountGooglePlusMin, socialSharesCountGooglePlusMax, socialSharesCountLinkedinMin, socialSharesCountLinkedinMax, socialSharesCountRedditMin, socialSharesCountRedditMax, _callback);
        return localVarCall;

    }


    private ApiResponse<Trends> listTrendsWithHttpInfo(String field, List<Long> id, List<Long> notId, String title, String body, String text, String translationsEnTitle, String translationsEnBody, String translationsEnText, List<String> language, List<String> notLanguage, String publishedAtStart, String publishedAtEnd, String categoriesTaxonomy, Boolean categoriesConfident, List<String> categoriesId, List<String> notCategoriesId, List<Integer> categoriesLevel, List<Integer> notCategoriesLevel, List<String> entitiesTitleText, List<String> notEntitiesTitleText, List<String> entitiesTitleType, List<String> notEntitiesTitleType, List<String> entitiesTitleLinksDbpedia, List<String> notEntitiesTitleLinksDbpedia, List<String> entitiesBodyText, List<String> notEntitiesBodyText, List<String> entitiesBodyType, List<String> notEntitiesBodyType, List<String> entitiesBodyLinksDbpedia, List<String> notEntitiesBodyLinksDbpedia, String sentimentTitlePolarity, String notSentimentTitlePolarity, String sentimentBodyPolarity, String notSentimentBodyPolarity, Integer mediaImagesCountMin, Integer mediaImagesCountMax, Integer mediaImagesWidthMin, Integer mediaImagesWidthMax, Integer mediaImagesHeightMin, Integer mediaImagesHeightMax, Integer mediaImagesContentLengthMin, Integer mediaImagesContentLengthMax, List<String> mediaImagesFormat, List<String> notMediaImagesFormat, Integer mediaVideosCountMin, Integer mediaVideosCountMax, List<Integer> authorId, List<Integer> notAuthorId, String authorName, String notAuthorName, List<Integer> sourceId, List<Integer> notSourceId, List<String> sourceName, List<String> notSourceName, List<String> sourceDomain, List<String> notSourceDomain, List<String> sourceLocationsCountry, List<String> notSourceLocationsCountry, List<String> sourceLocationsState, List<String> notSourceLocationsState, List<String> sourceLocationsCity, List<String> notSourceLocationsCity, List<String> sourceScopesCountry, List<String> notSourceScopesCountry, List<String> sourceScopesState, List<String> notSourceScopesState, List<String> sourceScopesCity, List<String> notSourceScopesCity, List<String> sourceScopesLevel, List<String> notSourceScopesLevel, Integer sourceLinksInCountMin, Integer sourceLinksInCountMax, Integer sourceRankingsAlexaRankMin, Integer sourceRankingsAlexaRankMax, List<String> sourceRankingsAlexaCountry, Integer socialSharesCountFacebookMin, Integer socialSharesCountFacebookMax, Integer socialSharesCountGooglePlusMin, Integer socialSharesCountGooglePlusMax, Integer socialSharesCountLinkedinMin, Integer socialSharesCountLinkedinMax, Integer socialSharesCountRedditMin, Integer socialSharesCountRedditMax) throws ApiException {
        okhttp3.Call localVarCall = listTrendsValidateBeforeCall(field, id, notId, title, body, text, translationsEnTitle, translationsEnBody, translationsEnText, language, notLanguage, publishedAtStart, publishedAtEnd, categoriesTaxonomy, categoriesConfident, categoriesId, notCategoriesId, categoriesLevel, notCategoriesLevel, entitiesTitleText, notEntitiesTitleText, entitiesTitleType, notEntitiesTitleType, entitiesTitleLinksDbpedia, notEntitiesTitleLinksDbpedia, entitiesBodyText, notEntitiesBodyText, entitiesBodyType, notEntitiesBodyType, entitiesBodyLinksDbpedia, notEntitiesBodyLinksDbpedia, sentimentTitlePolarity, notSentimentTitlePolarity, sentimentBodyPolarity, notSentimentBodyPolarity, mediaImagesCountMin, mediaImagesCountMax, mediaImagesWidthMin, mediaImagesWidthMax, mediaImagesHeightMin, mediaImagesHeightMax, mediaImagesContentLengthMin, mediaImagesContentLengthMax, mediaImagesFormat, notMediaImagesFormat, mediaVideosCountMin, mediaVideosCountMax, authorId, notAuthorId, authorName, notAuthorName, sourceId, notSourceId, sourceName, notSourceName, sourceDomain, notSourceDomain, sourceLocationsCountry, notSourceLocationsCountry, sourceLocationsState, notSourceLocationsState, sourceLocationsCity, notSourceLocationsCity, sourceScopesCountry, notSourceScopesCountry, sourceScopesState, notSourceScopesState, sourceScopesCity, notSourceScopesCity, sourceScopesLevel, notSourceScopesLevel, sourceLinksInCountMin, sourceLinksInCountMax, sourceRankingsAlexaRankMin, sourceRankingsAlexaRankMax, sourceRankingsAlexaCountry, socialSharesCountFacebookMin, socialSharesCountFacebookMax, socialSharesCountGooglePlusMin, socialSharesCountGooglePlusMax, socialSharesCountLinkedinMin, socialSharesCountLinkedinMax, socialSharesCountRedditMin, socialSharesCountRedditMax, null);
        Type localVarReturnType = new TypeToken<Trends>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTrendsAsync(String field, List<Long> id, List<Long> notId, String title, String body, String text, String translationsEnTitle, String translationsEnBody, String translationsEnText, List<String> language, List<String> notLanguage, String publishedAtStart, String publishedAtEnd, String categoriesTaxonomy, Boolean categoriesConfident, List<String> categoriesId, List<String> notCategoriesId, List<Integer> categoriesLevel, List<Integer> notCategoriesLevel, List<String> entitiesTitleText, List<String> notEntitiesTitleText, List<String> entitiesTitleType, List<String> notEntitiesTitleType, List<String> entitiesTitleLinksDbpedia, List<String> notEntitiesTitleLinksDbpedia, List<String> entitiesBodyText, List<String> notEntitiesBodyText, List<String> entitiesBodyType, List<String> notEntitiesBodyType, List<String> entitiesBodyLinksDbpedia, List<String> notEntitiesBodyLinksDbpedia, String sentimentTitlePolarity, String notSentimentTitlePolarity, String sentimentBodyPolarity, String notSentimentBodyPolarity, Integer mediaImagesCountMin, Integer mediaImagesCountMax, Integer mediaImagesWidthMin, Integer mediaImagesWidthMax, Integer mediaImagesHeightMin, Integer mediaImagesHeightMax, Integer mediaImagesContentLengthMin, Integer mediaImagesContentLengthMax, List<String> mediaImagesFormat, List<String> notMediaImagesFormat, Integer mediaVideosCountMin, Integer mediaVideosCountMax, List<Integer> authorId, List<Integer> notAuthorId, String authorName, String notAuthorName, List<Integer> sourceId, List<Integer> notSourceId, List<String> sourceName, List<String> notSourceName, List<String> sourceDomain, List<String> notSourceDomain, List<String> sourceLocationsCountry, List<String> notSourceLocationsCountry, List<String> sourceLocationsState, List<String> notSourceLocationsState, List<String> sourceLocationsCity, List<String> notSourceLocationsCity, List<String> sourceScopesCountry, List<String> notSourceScopesCountry, List<String> sourceScopesState, List<String> notSourceScopesState, List<String> sourceScopesCity, List<String> notSourceScopesCity, List<String> sourceScopesLevel, List<String> notSourceScopesLevel, Integer sourceLinksInCountMin, Integer sourceLinksInCountMax, Integer sourceRankingsAlexaRankMin, Integer sourceRankingsAlexaRankMax, List<String> sourceRankingsAlexaCountry, Integer socialSharesCountFacebookMin, Integer socialSharesCountFacebookMax, Integer socialSharesCountGooglePlusMin, Integer socialSharesCountGooglePlusMax, Integer socialSharesCountLinkedinMin, Integer socialSharesCountLinkedinMax, Integer socialSharesCountRedditMin, Integer socialSharesCountRedditMax, final ApiCallback<Trends> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTrendsValidateBeforeCall(field, id, notId, title, body, text, translationsEnTitle, translationsEnBody, translationsEnText, language, notLanguage, publishedAtStart, publishedAtEnd, categoriesTaxonomy, categoriesConfident, categoriesId, notCategoriesId, categoriesLevel, notCategoriesLevel, entitiesTitleText, notEntitiesTitleText, entitiesTitleType, notEntitiesTitleType, entitiesTitleLinksDbpedia, notEntitiesTitleLinksDbpedia, entitiesBodyText, notEntitiesBodyText, entitiesBodyType, notEntitiesBodyType, entitiesBodyLinksDbpedia, notEntitiesBodyLinksDbpedia, sentimentTitlePolarity, notSentimentTitlePolarity, sentimentBodyPolarity, notSentimentBodyPolarity, mediaImagesCountMin, mediaImagesCountMax, mediaImagesWidthMin, mediaImagesWidthMax, mediaImagesHeightMin, mediaImagesHeightMax, mediaImagesContentLengthMin, mediaImagesContentLengthMax, mediaImagesFormat, notMediaImagesFormat, mediaVideosCountMin, mediaVideosCountMax, authorId, notAuthorId, authorName, notAuthorName, sourceId, notSourceId, sourceName, notSourceName, sourceDomain, notSourceDomain, sourceLocationsCountry, notSourceLocationsCountry, sourceLocationsState, notSourceLocationsState, sourceLocationsCity, notSourceLocationsCity, sourceScopesCountry, notSourceScopesCountry, sourceScopesState, notSourceScopesState, sourceScopesCity, notSourceScopesCity, sourceScopesLevel, notSourceScopesLevel, sourceLinksInCountMin, sourceLinksInCountMax, sourceRankingsAlexaRankMin, sourceRankingsAlexaRankMax, sourceRankingsAlexaCountry, socialSharesCountFacebookMin, socialSharesCountFacebookMax, socialSharesCountGooglePlusMin, socialSharesCountGooglePlusMax, socialSharesCountLinkedinMin, socialSharesCountLinkedinMax, socialSharesCountRedditMin, socialSharesCountRedditMax, _callback);
        Type localVarReturnType = new TypeToken<Trends>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistTrendsRequest {
        private final String field;
        private List<Long> id;
        private List<Long> notId;
        private String title;
        private String body;
        private String text;
        private String translationsEnTitle;
        private String translationsEnBody;
        private String translationsEnText;
        private List<String> language;
        private List<String> notLanguage;
        private String publishedAtStart;
        private String publishedAtEnd;
        private String categoriesTaxonomy;
        private Boolean categoriesConfident;
        private List<String> categoriesId;
        private List<String> notCategoriesId;
        private List<Integer> categoriesLevel;
        private List<Integer> notCategoriesLevel;
        private List<String> entitiesTitleText;
        private List<String> notEntitiesTitleText;
        private List<String> entitiesTitleType;
        private List<String> notEntitiesTitleType;
        private List<String> entitiesTitleLinksDbpedia;
        private List<String> notEntitiesTitleLinksDbpedia;
        private List<String> entitiesBodyText;
        private List<String> notEntitiesBodyText;
        private List<String> entitiesBodyType;
        private List<String> notEntitiesBodyType;
        private List<String> entitiesBodyLinksDbpedia;
        private List<String> notEntitiesBodyLinksDbpedia;
        private String sentimentTitlePolarity;
        private String notSentimentTitlePolarity;
        private String sentimentBodyPolarity;
        private String notSentimentBodyPolarity;
        private Integer mediaImagesCountMin;
        private Integer mediaImagesCountMax;
        private Integer mediaImagesWidthMin;
        private Integer mediaImagesWidthMax;
        private Integer mediaImagesHeightMin;
        private Integer mediaImagesHeightMax;
        private Integer mediaImagesContentLengthMin;
        private Integer mediaImagesContentLengthMax;
        private List<String> mediaImagesFormat;
        private List<String> notMediaImagesFormat;
        private Integer mediaVideosCountMin;
        private Integer mediaVideosCountMax;
        private List<Integer> authorId;
        private List<Integer> notAuthorId;
        private String authorName;
        private String notAuthorName;
        private List<Integer> sourceId;
        private List<Integer> notSourceId;
        private List<String> sourceName;
        private List<String> notSourceName;
        private List<String> sourceDomain;
        private List<String> notSourceDomain;
        private List<String> sourceLocationsCountry;
        private List<String> notSourceLocationsCountry;
        private List<String> sourceLocationsState;
        private List<String> notSourceLocationsState;
        private List<String> sourceLocationsCity;
        private List<String> notSourceLocationsCity;
        private List<String> sourceScopesCountry;
        private List<String> notSourceScopesCountry;
        private List<String> sourceScopesState;
        private List<String> notSourceScopesState;
        private List<String> sourceScopesCity;
        private List<String> notSourceScopesCity;
        private List<String> sourceScopesLevel;
        private List<String> notSourceScopesLevel;
        private Integer sourceLinksInCountMin;
        private Integer sourceLinksInCountMax;
        private Integer sourceRankingsAlexaRankMin;
        private Integer sourceRankingsAlexaRankMax;
        private List<String> sourceRankingsAlexaCountry;
        private Integer socialSharesCountFacebookMin;
        private Integer socialSharesCountFacebookMax;
        private Integer socialSharesCountGooglePlusMin;
        private Integer socialSharesCountGooglePlusMax;
        private Integer socialSharesCountLinkedinMin;
        private Integer socialSharesCountLinkedinMax;
        private Integer socialSharesCountRedditMin;
        private Integer socialSharesCountRedditMax;

        private APIlistTrendsRequest(String field) {
            this.field = field;
        }

        /**
         * Set id
         * @param id This parameter is used for finding stories by story id.  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest id(List<Long> id) {
            this.id = id;
            return this;
        }

        /**
         * Set notId
         * @param notId This parameter is used for excluding stories by story id.  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest notId(List<Long> notId) {
            this.notId = notId;
            return this;
        }

        /**
         * Set title
         * @param title This parameter is used for finding stories whose title contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators).  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest title(String title) {
            this.title = title;
            return this;
        }

        /**
         * Set body
         * @param body This parameter is used for finding stories whose body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators).  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest body(String body) {
            this.body = body;
            return this;
        }

        /**
         * Set text
         * @param text This parameter is used for finding stories whose title or body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators).  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest text(String text) {
            this.text = text;
            return this;
        }

        /**
         * Set translationsEnTitle
         * @param translationsEnTitle This parameter is used for finding stories whose translation title contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators).  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest translationsEnTitle(String translationsEnTitle) {
            this.translationsEnTitle = translationsEnTitle;
            return this;
        }

        /**
         * Set translationsEnBody
         * @param translationsEnBody This parameter is used for finding stories whose translation body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators).  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest translationsEnBody(String translationsEnBody) {
            this.translationsEnBody = translationsEnBody;
            return this;
        }

        /**
         * Set translationsEnText
         * @param translationsEnText This parameter is used for finding stories whose translation title or body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators).  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest translationsEnText(String translationsEnText) {
            this.translationsEnText = translationsEnText;
            return this;
        }

        /**
         * Set language
         * @param language This parameter is used for finding stories whose language is the specified value. It supports [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language codes.  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest language(List<String> language) {
            this.language = language;
            return this;
        }

        /**
         * Set notLanguage
         * @param notLanguage This parameter is used for excluding stories whose language is the specified value. It supports [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language codes.  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest notLanguage(List<String> notLanguage) {
            this.notLanguage = notLanguage;
            return this;
        }

        /**
         * Set publishedAtStart
         * @param publishedAtStart This parameter is used for finding stories whose published at time is greater than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates).  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest publishedAtStart(String publishedAtStart) {
            this.publishedAtStart = publishedAtStart;
            return this;
        }

        /**
         * Set publishedAtEnd
         * @param publishedAtEnd This parameter is used for finding stories whose published at time is less than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates).  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest publishedAtEnd(String publishedAtEnd) {
            this.publishedAtEnd = publishedAtEnd;
            return this;
        }

        /**
         * Set categoriesTaxonomy
         * @param categoriesTaxonomy This parameter is used for defining the type of the taxonomy for the rest of the categories queries. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories).  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest categoriesTaxonomy(String categoriesTaxonomy) {
            this.categoriesTaxonomy = categoriesTaxonomy;
            return this;
        }

        /**
         * Set categoriesConfident
         * @param categoriesConfident This parameter is used for finding stories whose categories are confident. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories).  (optional, default to true)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest categoriesConfident(Boolean categoriesConfident) {
            this.categoriesConfident = categoriesConfident;
            return this;
        }

        /**
         * Set categoriesId
         * @param categoriesId This parameter is used for finding stories by categories id. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories).  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest categoriesId(List<String> categoriesId) {
            this.categoriesId = categoriesId;
            return this;
        }

        /**
         * Set notCategoriesId
         * @param notCategoriesId This parameter is used for excluding stories by categories id. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories).  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest notCategoriesId(List<String> notCategoriesId) {
            this.notCategoriesId = notCategoriesId;
            return this;
        }

        /**
         * Set categoriesLevel
         * @param categoriesLevel This parameter is used for finding stories by categories level. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories).  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest categoriesLevel(List<Integer> categoriesLevel) {
            this.categoriesLevel = categoriesLevel;
            return this;
        }

        /**
         * Set notCategoriesLevel
         * @param notCategoriesLevel This parameter is used for excluding stories by categories level. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories).  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest notCategoriesLevel(List<Integer> notCategoriesLevel) {
            this.notCategoriesLevel = notCategoriesLevel;
            return this;
        }

        /**
         * Set entitiesTitleText
         * @param entitiesTitleText This parameter is used to find stories based on the specified entities &#x60;text&#x60; in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest entitiesTitleText(List<String> entitiesTitleText) {
            this.entitiesTitleText = entitiesTitleText;
            return this;
        }

        /**
         * Set notEntitiesTitleText
         * @param notEntitiesTitleText This parameter is used to exclude stories based on the specified entities &#x60;text&#x60; in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest notEntitiesTitleText(List<String> notEntitiesTitleText) {
            this.notEntitiesTitleText = notEntitiesTitleText;
            return this;
        }

        /**
         * Set entitiesTitleType
         * @param entitiesTitleType This parameter is used to find stories based on the specified entities &#x60;type&#x60; in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest entitiesTitleType(List<String> entitiesTitleType) {
            this.entitiesTitleType = entitiesTitleType;
            return this;
        }

        /**
         * Set notEntitiesTitleType
         * @param notEntitiesTitleType This parameter is used to exclude stories based on the specified entities &#x60;type&#x60; in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest notEntitiesTitleType(List<String> notEntitiesTitleType) {
            this.notEntitiesTitleType = notEntitiesTitleType;
            return this;
        }

        /**
         * Set entitiesTitleLinksDbpedia
         * @param entitiesTitleLinksDbpedia This parameter is used to find stories based on the specified entities dbpedia URL in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest entitiesTitleLinksDbpedia(List<String> entitiesTitleLinksDbpedia) {
            this.entitiesTitleLinksDbpedia = entitiesTitleLinksDbpedia;
            return this;
        }

        /**
         * Set notEntitiesTitleLinksDbpedia
         * @param notEntitiesTitleLinksDbpedia This parameter is used to exclude stories based on the specified entities dbpedia URL in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest notEntitiesTitleLinksDbpedia(List<String> notEntitiesTitleLinksDbpedia) {
            this.notEntitiesTitleLinksDbpedia = notEntitiesTitleLinksDbpedia;
            return this;
        }

        /**
         * Set entitiesBodyText
         * @param entitiesBodyText This parameter is used to find stories based on the specified entities &#x60;text&#x60; in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest entitiesBodyText(List<String> entitiesBodyText) {
            this.entitiesBodyText = entitiesBodyText;
            return this;
        }

        /**
         * Set notEntitiesBodyText
         * @param notEntitiesBodyText This parameter is used to exclude stories based on the specified entities &#x60;text&#x60; in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest notEntitiesBodyText(List<String> notEntitiesBodyText) {
            this.notEntitiesBodyText = notEntitiesBodyText;
            return this;
        }

        /**
         * Set entitiesBodyType
         * @param entitiesBodyType This parameter is used to find stories based on the specified entities &#x60;type&#x60; in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest entitiesBodyType(List<String> entitiesBodyType) {
            this.entitiesBodyType = entitiesBodyType;
            return this;
        }

        /**
         * Set notEntitiesBodyType
         * @param notEntitiesBodyType This parameter is used to exclude stories based on the specified entities &#x60;type&#x60; in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest notEntitiesBodyType(List<String> notEntitiesBodyType) {
            this.notEntitiesBodyType = notEntitiesBodyType;
            return this;
        }

        /**
         * Set entitiesBodyLinksDbpedia
         * @param entitiesBodyLinksDbpedia This parameter is used to find stories based on the specified entities dbpedia URL in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest entitiesBodyLinksDbpedia(List<String> entitiesBodyLinksDbpedia) {
            this.entitiesBodyLinksDbpedia = entitiesBodyLinksDbpedia;
            return this;
        }

        /**
         * Set notEntitiesBodyLinksDbpedia
         * @param notEntitiesBodyLinksDbpedia This parameter is used to exclude stories based on the specified entities dbpedia URL in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities).  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest notEntitiesBodyLinksDbpedia(List<String> notEntitiesBodyLinksDbpedia) {
            this.notEntitiesBodyLinksDbpedia = notEntitiesBodyLinksDbpedia;
            return this;
        }

        /**
         * Set sentimentTitlePolarity
         * @param sentimentTitlePolarity This parameter is used for finding stories whose title sentiment is the specified value.  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest sentimentTitlePolarity(String sentimentTitlePolarity) {
            this.sentimentTitlePolarity = sentimentTitlePolarity;
            return this;
        }

        /**
         * Set notSentimentTitlePolarity
         * @param notSentimentTitlePolarity This parameter is used for excluding stories whose title sentiment is the specified value.  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest notSentimentTitlePolarity(String notSentimentTitlePolarity) {
            this.notSentimentTitlePolarity = notSentimentTitlePolarity;
            return this;
        }

        /**
         * Set sentimentBodyPolarity
         * @param sentimentBodyPolarity This parameter is used for finding stories whose body sentiment is the specified value.  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest sentimentBodyPolarity(String sentimentBodyPolarity) {
            this.sentimentBodyPolarity = sentimentBodyPolarity;
            return this;
        }

        /**
         * Set notSentimentBodyPolarity
         * @param notSentimentBodyPolarity This parameter is used for excluding stories whose body sentiment is the specified value.  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest notSentimentBodyPolarity(String notSentimentBodyPolarity) {
            this.notSentimentBodyPolarity = notSentimentBodyPolarity;
            return this;
        }

        /**
         * Set mediaImagesCountMin
         * @param mediaImagesCountMin This parameter is used for finding stories whose number of images is greater than or equal to the specified value.  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest mediaImagesCountMin(Integer mediaImagesCountMin) {
            this.mediaImagesCountMin = mediaImagesCountMin;
            return this;
        }

        /**
         * Set mediaImagesCountMax
         * @param mediaImagesCountMax This parameter is used for finding stories whose number of images is less than or equal to the specified value.  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest mediaImagesCountMax(Integer mediaImagesCountMax) {
            this.mediaImagesCountMax = mediaImagesCountMax;
            return this;
        }

        /**
         * Set mediaImagesWidthMin
         * @param mediaImagesWidthMin This parameter is used for finding stories whose width of images are greater than or equal to the specified value.  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest mediaImagesWidthMin(Integer mediaImagesWidthMin) {
            this.mediaImagesWidthMin = mediaImagesWidthMin;
            return this;
        }

        /**
         * Set mediaImagesWidthMax
         * @param mediaImagesWidthMax This parameter is used for finding stories whose width of images are less than or equal to the specified value.  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest mediaImagesWidthMax(Integer mediaImagesWidthMax) {
            this.mediaImagesWidthMax = mediaImagesWidthMax;
            return this;
        }

        /**
         * Set mediaImagesHeightMin
         * @param mediaImagesHeightMin This parameter is used for finding stories whose height of images are greater than or equal to the specified value.  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest mediaImagesHeightMin(Integer mediaImagesHeightMin) {
            this.mediaImagesHeightMin = mediaImagesHeightMin;
            return this;
        }

        /**
         * Set mediaImagesHeightMax
         * @param mediaImagesHeightMax This parameter is used for finding stories whose height of images are less than or equal to the specified value.  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest mediaImagesHeightMax(Integer mediaImagesHeightMax) {
            this.mediaImagesHeightMax = mediaImagesHeightMax;
            return this;
        }

        /**
         * Set mediaImagesContentLengthMin
         * @param mediaImagesContentLengthMin This parameter is used for finding stories whose images content length are greater than or equal to the specified value.  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest mediaImagesContentLengthMin(Integer mediaImagesContentLengthMin) {
            this.mediaImagesContentLengthMin = mediaImagesContentLengthMin;
            return this;
        }

        /**
         * Set mediaImagesContentLengthMax
         * @param mediaImagesContentLengthMax This parameter is used for finding stories whose images content length are less than or equal to the specified value.  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest mediaImagesContentLengthMax(Integer mediaImagesContentLengthMax) {
            this.mediaImagesContentLengthMax = mediaImagesContentLengthMax;
            return this;
        }

        /**
         * Set mediaImagesFormat
         * @param mediaImagesFormat This parameter is used for finding stories whose images format are the specified value.  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest mediaImagesFormat(List<String> mediaImagesFormat) {
            this.mediaImagesFormat = mediaImagesFormat;
            return this;
        }

        /**
         * Set notMediaImagesFormat
         * @param notMediaImagesFormat This parameter is used for excluding stories whose images format are the specified value.  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest notMediaImagesFormat(List<String> notMediaImagesFormat) {
            this.notMediaImagesFormat = notMediaImagesFormat;
            return this;
        }

        /**
         * Set mediaVideosCountMin
         * @param mediaVideosCountMin This parameter is used for finding stories whose number of videos is greater than or equal to the specified value.  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest mediaVideosCountMin(Integer mediaVideosCountMin) {
            this.mediaVideosCountMin = mediaVideosCountMin;
            return this;
        }

        /**
         * Set mediaVideosCountMax
         * @param mediaVideosCountMax This parameter is used for finding stories whose number of videos is less than or equal to the specified value.  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest mediaVideosCountMax(Integer mediaVideosCountMax) {
            this.mediaVideosCountMax = mediaVideosCountMax;
            return this;
        }

        /**
         * Set authorId
         * @param authorId This parameter is used for finding stories whose author id is the specified value.  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest authorId(List<Integer> authorId) {
            this.authorId = authorId;
            return this;
        }

        /**
         * Set notAuthorId
         * @param notAuthorId This parameter is used for excluding stories whose author id is the specified value.  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest notAuthorId(List<Integer> notAuthorId) {
            this.notAuthorId = notAuthorId;
            return this;
        }

        /**
         * Set authorName
         * @param authorName This parameter is used for finding stories whose author full name contains the specified value.  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest authorName(String authorName) {
            this.authorName = authorName;
            return this;
        }

        /**
         * Set notAuthorName
         * @param notAuthorName This parameter is used for excluding stories whose author full name contains the specified value.  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest notAuthorName(String notAuthorName) {
            this.notAuthorName = notAuthorName;
            return this;
        }

        /**
         * Set sourceId
         * @param sourceId This parameter is used for finding stories whose source id is the specified value.  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest sourceId(List<Integer> sourceId) {
            this.sourceId = sourceId;
            return this;
        }

        /**
         * Set notSourceId
         * @param notSourceId This parameter is used for excluding stories whose source id is the specified value.  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest notSourceId(List<Integer> notSourceId) {
            this.notSourceId = notSourceId;
            return this;
        }

        /**
         * Set sourceName
         * @param sourceName This parameter is used for finding stories whose source name contains the specified value.  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest sourceName(List<String> sourceName) {
            this.sourceName = sourceName;
            return this;
        }

        /**
         * Set notSourceName
         * @param notSourceName This parameter is used for excluding stories whose source name contains the specified value.  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest notSourceName(List<String> notSourceName) {
            this.notSourceName = notSourceName;
            return this;
        }

        /**
         * Set sourceDomain
         * @param sourceDomain This parameter is used for finding stories whose source domain is the specified value.  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest sourceDomain(List<String> sourceDomain) {
            this.sourceDomain = sourceDomain;
            return this;
        }

        /**
         * Set notSourceDomain
         * @param notSourceDomain This parameter is used for excluding stories whose source domain is the specified value.  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest notSourceDomain(List<String> notSourceDomain) {
            this.notSourceDomain = notSourceDomain;
            return this;
        }

        /**
         * Set sourceLocationsCountry
         * @param sourceLocationsCountry This parameter is used for finding stories whose source country is the specified value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest sourceLocationsCountry(List<String> sourceLocationsCountry) {
            this.sourceLocationsCountry = sourceLocationsCountry;
            return this;
        }

        /**
         * Set notSourceLocationsCountry
         * @param notSourceLocationsCountry This parameter is used for excluding stories whose source country is the specified value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest notSourceLocationsCountry(List<String> notSourceLocationsCountry) {
            this.notSourceLocationsCountry = notSourceLocationsCountry;
            return this;
        }

        /**
         * Set sourceLocationsState
         * @param sourceLocationsState This parameter is used for finding stories whose source state/province is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest sourceLocationsState(List<String> sourceLocationsState) {
            this.sourceLocationsState = sourceLocationsState;
            return this;
        }

        /**
         * Set notSourceLocationsState
         * @param notSourceLocationsState This parameter is used for excluding stories whose source state/province is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest notSourceLocationsState(List<String> notSourceLocationsState) {
            this.notSourceLocationsState = notSourceLocationsState;
            return this;
        }

        /**
         * Set sourceLocationsCity
         * @param sourceLocationsCity This parameter is used for finding stories whose source city is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest sourceLocationsCity(List<String> sourceLocationsCity) {
            this.sourceLocationsCity = sourceLocationsCity;
            return this;
        }

        /**
         * Set notSourceLocationsCity
         * @param notSourceLocationsCity This parameter is used for excluding stories whose source city is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest notSourceLocationsCity(List<String> notSourceLocationsCity) {
            this.notSourceLocationsCity = notSourceLocationsCity;
            return this;
        }

        /**
         * Set sourceScopesCountry
         * @param sourceScopesCountry This parameter is used for finding stories whose source scopes is the specified country value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest sourceScopesCountry(List<String> sourceScopesCountry) {
            this.sourceScopesCountry = sourceScopesCountry;
            return this;
        }

        /**
         * Set notSourceScopesCountry
         * @param notSourceScopesCountry This parameter is used for excluding stories whose source scopes is the specified country value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest notSourceScopesCountry(List<String> notSourceScopesCountry) {
            this.notSourceScopesCountry = notSourceScopesCountry;
            return this;
        }

        /**
         * Set sourceScopesState
         * @param sourceScopesState This parameter is used for finding stories whose source scopes is the specified state/province value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest sourceScopesState(List<String> sourceScopesState) {
            this.sourceScopesState = sourceScopesState;
            return this;
        }

        /**
         * Set notSourceScopesState
         * @param notSourceScopesState This parameter is used for excluding stories whose source scopes is the specified state/province value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest notSourceScopesState(List<String> notSourceScopesState) {
            this.notSourceScopesState = notSourceScopesState;
            return this;
        }

        /**
         * Set sourceScopesCity
         * @param sourceScopesCity This parameter is used for finding stories whose source scopes is the specified city value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest sourceScopesCity(List<String> sourceScopesCity) {
            this.sourceScopesCity = sourceScopesCity;
            return this;
        }

        /**
         * Set notSourceScopesCity
         * @param notSourceScopesCity This parameter is used for excluding stories whose source scopes is the specified city value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest notSourceScopesCity(List<String> notSourceScopesCity) {
            this.notSourceScopesCity = notSourceScopesCity;
            return this;
        }

        /**
         * Set sourceScopesLevel
         * @param sourceScopesLevel This parameter is used for finding stories whose source scopes is the specified level value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest sourceScopesLevel(List<String> sourceScopesLevel) {
            this.sourceScopesLevel = sourceScopesLevel;
            return this;
        }

        /**
         * Set notSourceScopesLevel
         * @param notSourceScopesLevel This parameter is used for excluding stories whose source scopes is the specified level value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations).  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest notSourceScopesLevel(List<String> notSourceScopesLevel) {
            this.notSourceScopesLevel = notSourceScopesLevel;
            return this;
        }

        /**
         * Set sourceLinksInCountMin
         * @param sourceLinksInCountMin This parameter is used for finding stories from sources whose Links in count is greater than or equal to the specified value. You can read more about working with Links in count [here](https://newsapi.aylien.com/docs/working-with-links-in-count).  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest sourceLinksInCountMin(Integer sourceLinksInCountMin) {
            this.sourceLinksInCountMin = sourceLinksInCountMin;
            return this;
        }

        /**
         * Set sourceLinksInCountMax
         * @param sourceLinksInCountMax This parameter is used for finding stories from sources whose Links in count is less than or equal to the specified value. You can read more about working with Links in count [here](https://newsapi.aylien.com/docs/working-with-links-in-count).  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest sourceLinksInCountMax(Integer sourceLinksInCountMax) {
            this.sourceLinksInCountMax = sourceLinksInCountMax;
            return this;
        }

        /**
         * Set sourceRankingsAlexaRankMin
         * @param sourceRankingsAlexaRankMin This parameter is used for finding stories from sources whose Alexa rank is greater than or equal to the specified value. You can read more about working with Alexa ranks [here](https://newsapi.aylien.com/docs/working-with-alexa-ranks).  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest sourceRankingsAlexaRankMin(Integer sourceRankingsAlexaRankMin) {
            this.sourceRankingsAlexaRankMin = sourceRankingsAlexaRankMin;
            return this;
        }

        /**
         * Set sourceRankingsAlexaRankMax
         * @param sourceRankingsAlexaRankMax This parameter is used for finding stories from sources whose Alexa rank is less than or equal to the specified value. You can read more about working with Alexa ranks [here](https://newsapi.aylien.com/docs/working-with-alexa-ranks).  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest sourceRankingsAlexaRankMax(Integer sourceRankingsAlexaRankMax) {
            this.sourceRankingsAlexaRankMax = sourceRankingsAlexaRankMax;
            return this;
        }

        /**
         * Set sourceRankingsAlexaCountry
         * @param sourceRankingsAlexaCountry This parameter is used for finding stories from sources whose Alexa rank is in the specified country value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. You can read more about working with Alexa ranks [here](https://newsapi.aylien.com/docs/working-with-alexa-ranks).  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest sourceRankingsAlexaCountry(List<String> sourceRankingsAlexaCountry) {
            this.sourceRankingsAlexaCountry = sourceRankingsAlexaCountry;
            return this;
        }

        /**
         * Set socialSharesCountFacebookMin
         * @param socialSharesCountFacebookMin This parameter is used for finding stories whose Facebook social shares count is greater than or equal to the specified value.  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest socialSharesCountFacebookMin(Integer socialSharesCountFacebookMin) {
            this.socialSharesCountFacebookMin = socialSharesCountFacebookMin;
            return this;
        }

        /**
         * Set socialSharesCountFacebookMax
         * @param socialSharesCountFacebookMax This parameter is used for finding stories whose Facebook social shares count is less than or equal to the specified value.  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest socialSharesCountFacebookMax(Integer socialSharesCountFacebookMax) {
            this.socialSharesCountFacebookMax = socialSharesCountFacebookMax;
            return this;
        }

        /**
         * Set socialSharesCountGooglePlusMin
         * @param socialSharesCountGooglePlusMin This parameter is used for finding stories whose Google+ social shares count is greater than or equal to the specified value.  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest socialSharesCountGooglePlusMin(Integer socialSharesCountGooglePlusMin) {
            this.socialSharesCountGooglePlusMin = socialSharesCountGooglePlusMin;
            return this;
        }

        /**
         * Set socialSharesCountGooglePlusMax
         * @param socialSharesCountGooglePlusMax This parameter is used for finding stories whose Google+ social shares count is less than or equal to the specified value.  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest socialSharesCountGooglePlusMax(Integer socialSharesCountGooglePlusMax) {
            this.socialSharesCountGooglePlusMax = socialSharesCountGooglePlusMax;
            return this;
        }

        /**
         * Set socialSharesCountLinkedinMin
         * @param socialSharesCountLinkedinMin This parameter is used for finding stories whose LinkedIn social shares count is greater than or equal to the specified value.  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest socialSharesCountLinkedinMin(Integer socialSharesCountLinkedinMin) {
            this.socialSharesCountLinkedinMin = socialSharesCountLinkedinMin;
            return this;
        }

        /**
         * Set socialSharesCountLinkedinMax
         * @param socialSharesCountLinkedinMax This parameter is used for finding stories whose LinkedIn social shares count is less than or equal to the specified value.  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest socialSharesCountLinkedinMax(Integer socialSharesCountLinkedinMax) {
            this.socialSharesCountLinkedinMax = socialSharesCountLinkedinMax;
            return this;
        }

        /**
         * Set socialSharesCountRedditMin
         * @param socialSharesCountRedditMin This parameter is used for finding stories whose Reddit social shares count is greater than or equal to the specified value.  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest socialSharesCountRedditMin(Integer socialSharesCountRedditMin) {
            this.socialSharesCountRedditMin = socialSharesCountRedditMin;
            return this;
        }

        /**
         * Set socialSharesCountRedditMax
         * @param socialSharesCountRedditMax This parameter is used for finding stories whose Reddit social shares count is less than or equal to the specified value.  (optional)
         * @return APIlistTrendsRequest
         */
        public APIlistTrendsRequest socialSharesCountRedditMax(Integer socialSharesCountRedditMax) {
            this.socialSharesCountRedditMax = socialSharesCountRedditMax;
            return this;
        }

        /**
         * Build call for listTrends
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An object including an array of trends </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTrendsCall(field, id, notId, title, body, text, translationsEnTitle, translationsEnBody, translationsEnText, language, notLanguage, publishedAtStart, publishedAtEnd, categoriesTaxonomy, categoriesConfident, categoriesId, notCategoriesId, categoriesLevel, notCategoriesLevel, entitiesTitleText, notEntitiesTitleText, entitiesTitleType, notEntitiesTitleType, entitiesTitleLinksDbpedia, notEntitiesTitleLinksDbpedia, entitiesBodyText, notEntitiesBodyText, entitiesBodyType, notEntitiesBodyType, entitiesBodyLinksDbpedia, notEntitiesBodyLinksDbpedia, sentimentTitlePolarity, notSentimentTitlePolarity, sentimentBodyPolarity, notSentimentBodyPolarity, mediaImagesCountMin, mediaImagesCountMax, mediaImagesWidthMin, mediaImagesWidthMax, mediaImagesHeightMin, mediaImagesHeightMax, mediaImagesContentLengthMin, mediaImagesContentLengthMax, mediaImagesFormat, notMediaImagesFormat, mediaVideosCountMin, mediaVideosCountMax, authorId, notAuthorId, authorName, notAuthorName, sourceId, notSourceId, sourceName, notSourceName, sourceDomain, notSourceDomain, sourceLocationsCountry, notSourceLocationsCountry, sourceLocationsState, notSourceLocationsState, sourceLocationsCity, notSourceLocationsCity, sourceScopesCountry, notSourceScopesCountry, sourceScopesState, notSourceScopesState, sourceScopesCity, notSourceScopesCity, sourceScopesLevel, notSourceScopesLevel, sourceLinksInCountMin, sourceLinksInCountMax, sourceRankingsAlexaRankMin, sourceRankingsAlexaRankMax, sourceRankingsAlexaCountry, socialSharesCountFacebookMin, socialSharesCountFacebookMax, socialSharesCountGooglePlusMin, socialSharesCountGooglePlusMax, socialSharesCountLinkedinMin, socialSharesCountLinkedinMax, socialSharesCountRedditMin, socialSharesCountRedditMax, _callback);
        }

        /**
         * Execute listTrends request
         * @return Trends
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An object including an array of trends </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public Trends execute() throws ApiException {
            ApiResponse<Trends> localVarResp = listTrendsWithHttpInfo(field, id, notId, title, body, text, translationsEnTitle, translationsEnBody, translationsEnText, language, notLanguage, publishedAtStart, publishedAtEnd, categoriesTaxonomy, categoriesConfident, categoriesId, notCategoriesId, categoriesLevel, notCategoriesLevel, entitiesTitleText, notEntitiesTitleText, entitiesTitleType, notEntitiesTitleType, entitiesTitleLinksDbpedia, notEntitiesTitleLinksDbpedia, entitiesBodyText, notEntitiesBodyText, entitiesBodyType, notEntitiesBodyType, entitiesBodyLinksDbpedia, notEntitiesBodyLinksDbpedia, sentimentTitlePolarity, notSentimentTitlePolarity, sentimentBodyPolarity, notSentimentBodyPolarity, mediaImagesCountMin, mediaImagesCountMax, mediaImagesWidthMin, mediaImagesWidthMax, mediaImagesHeightMin, mediaImagesHeightMax, mediaImagesContentLengthMin, mediaImagesContentLengthMax, mediaImagesFormat, notMediaImagesFormat, mediaVideosCountMin, mediaVideosCountMax, authorId, notAuthorId, authorName, notAuthorName, sourceId, notSourceId, sourceName, notSourceName, sourceDomain, notSourceDomain, sourceLocationsCountry, notSourceLocationsCountry, sourceLocationsState, notSourceLocationsState, sourceLocationsCity, notSourceLocationsCity, sourceScopesCountry, notSourceScopesCountry, sourceScopesState, notSourceScopesState, sourceScopesCity, notSourceScopesCity, sourceScopesLevel, notSourceScopesLevel, sourceLinksInCountMin, sourceLinksInCountMax, sourceRankingsAlexaRankMin, sourceRankingsAlexaRankMax, sourceRankingsAlexaCountry, socialSharesCountFacebookMin, socialSharesCountFacebookMax, socialSharesCountGooglePlusMin, socialSharesCountGooglePlusMax, socialSharesCountLinkedinMin, socialSharesCountLinkedinMax, socialSharesCountRedditMin, socialSharesCountRedditMax);
            return localVarResp.getData();
        }

        /**
         * Execute listTrends request with HTTP info returned
         * @return ApiResponse&lt;Trends&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An object including an array of trends </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Trends> executeWithHttpInfo() throws ApiException {
            return listTrendsWithHttpInfo(field, id, notId, title, body, text, translationsEnTitle, translationsEnBody, translationsEnText, language, notLanguage, publishedAtStart, publishedAtEnd, categoriesTaxonomy, categoriesConfident, categoriesId, notCategoriesId, categoriesLevel, notCategoriesLevel, entitiesTitleText, notEntitiesTitleText, entitiesTitleType, notEntitiesTitleType, entitiesTitleLinksDbpedia, notEntitiesTitleLinksDbpedia, entitiesBodyText, notEntitiesBodyText, entitiesBodyType, notEntitiesBodyType, entitiesBodyLinksDbpedia, notEntitiesBodyLinksDbpedia, sentimentTitlePolarity, notSentimentTitlePolarity, sentimentBodyPolarity, notSentimentBodyPolarity, mediaImagesCountMin, mediaImagesCountMax, mediaImagesWidthMin, mediaImagesWidthMax, mediaImagesHeightMin, mediaImagesHeightMax, mediaImagesContentLengthMin, mediaImagesContentLengthMax, mediaImagesFormat, notMediaImagesFormat, mediaVideosCountMin, mediaVideosCountMax, authorId, notAuthorId, authorName, notAuthorName, sourceId, notSourceId, sourceName, notSourceName, sourceDomain, notSourceDomain, sourceLocationsCountry, notSourceLocationsCountry, sourceLocationsState, notSourceLocationsState, sourceLocationsCity, notSourceLocationsCity, sourceScopesCountry, notSourceScopesCountry, sourceScopesState, notSourceScopesState, sourceScopesCity, notSourceScopesCity, sourceScopesLevel, notSourceScopesLevel, sourceLinksInCountMin, sourceLinksInCountMax, sourceRankingsAlexaRankMin, sourceRankingsAlexaRankMax, sourceRankingsAlexaCountry, socialSharesCountFacebookMin, socialSharesCountFacebookMax, socialSharesCountGooglePlusMin, socialSharesCountGooglePlusMax, socialSharesCountLinkedinMin, socialSharesCountLinkedinMax, socialSharesCountRedditMin, socialSharesCountRedditMax);
        }

        /**
         * Execute listTrends request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An object including an array of trends </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Trends> _callback) throws ApiException {
            return listTrendsAsync(field, id, notId, title, body, text, translationsEnTitle, translationsEnBody, translationsEnText, language, notLanguage, publishedAtStart, publishedAtEnd, categoriesTaxonomy, categoriesConfident, categoriesId, notCategoriesId, categoriesLevel, notCategoriesLevel, entitiesTitleText, notEntitiesTitleText, entitiesTitleType, notEntitiesTitleType, entitiesTitleLinksDbpedia, notEntitiesTitleLinksDbpedia, entitiesBodyText, notEntitiesBodyText, entitiesBodyType, notEntitiesBodyType, entitiesBodyLinksDbpedia, notEntitiesBodyLinksDbpedia, sentimentTitlePolarity, notSentimentTitlePolarity, sentimentBodyPolarity, notSentimentBodyPolarity, mediaImagesCountMin, mediaImagesCountMax, mediaImagesWidthMin, mediaImagesWidthMax, mediaImagesHeightMin, mediaImagesHeightMax, mediaImagesContentLengthMin, mediaImagesContentLengthMax, mediaImagesFormat, notMediaImagesFormat, mediaVideosCountMin, mediaVideosCountMax, authorId, notAuthorId, authorName, notAuthorName, sourceId, notSourceId, sourceName, notSourceName, sourceDomain, notSourceDomain, sourceLocationsCountry, notSourceLocationsCountry, sourceLocationsState, notSourceLocationsState, sourceLocationsCity, notSourceLocationsCity, sourceScopesCountry, notSourceScopesCountry, sourceScopesState, notSourceScopesState, sourceScopesCity, notSourceScopesCity, sourceScopesLevel, notSourceScopesLevel, sourceLinksInCountMin, sourceLinksInCountMax, sourceRankingsAlexaRankMin, sourceRankingsAlexaRankMax, sourceRankingsAlexaCountry, socialSharesCountFacebookMin, socialSharesCountFacebookMax, socialSharesCountGooglePlusMin, socialSharesCountGooglePlusMax, socialSharesCountLinkedinMin, socialSharesCountLinkedinMax, socialSharesCountRedditMin, socialSharesCountRedditMax, _callback);
        }
    }

    /**
     * List trends
     * The trends endpoint allows you to identify the most-mentioned entities, concepts and keywords relevant to your query. For example, this endpoint allows you to set parameters like a time period, a subject category, or an entity, and your request will return the most mentioned entities or keywords that are mentioned in relation to your query. 
     * @param field This parameter is used to specify the trend field.  (required)
     * @return APIlistTrendsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object including an array of trends </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * X-RateLimit-Limit - The number of allowed requests in the current period. <br>  * X-RateLimit-Remaining - The number of remaining requests in the current period. <br>  * X-RateLimit-Reset - The remaining window before the rate limit resets in UTC [epoch seconds](https://en.wikipedia.org/wiki/Unix_time).  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public APIlistTrendsRequest listTrends(String field) {
        return new APIlistTrendsRequest(field);
    }
}
