/*
 * AYLIEN News API
 * The AYLIEN News API is the most powerful way of sourcing, searching and syndicating analyzed and enriched news content. It is accessed by sending HTTP requests to our server, which returns information to your client. 
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@aylien.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.aylien.newsapi.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Sentiment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2019-10-25T10:53:07.475+01:00[Europe/Dublin]")
public class Sentiment {
  /**
   * Polarity of the sentiment
   */
  @JsonAdapter(PolarityEnum.Adapter.class)
  public enum PolarityEnum {
    POSITIVE("positive"),
    
    NEUTRAL("neutral"),
    
    NEGATIVE("negative");

    private String value;

    PolarityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PolarityEnum fromValue(String value) {
      for (PolarityEnum b : PolarityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PolarityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PolarityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PolarityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PolarityEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_POLARITY = "polarity";
  @SerializedName(SERIALIZED_NAME_POLARITY)
  private PolarityEnum polarity;

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private Double score;


  public Sentiment polarity(PolarityEnum polarity) {
    
    this.polarity = polarity;
    return this;
  }

   /**
   * Polarity of the sentiment
   * @return polarity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Polarity of the sentiment")

  public PolarityEnum getPolarity() {
    return polarity;
  }



  public void setPolarity(PolarityEnum polarity) {
    this.polarity = polarity;
  }


  public Sentiment score(Double score) {
    
    this.score = score;
    return this;
  }

   /**
   * Polarity score of the sentiment
   * minimum: 0
   * maximum: 1
   * @return score
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Polarity score of the sentiment")

  public Double getScore() {
    return score;
  }



  public void setScore(Double score) {
    this.score = score;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Sentiment sentiment = (Sentiment) o;
    return Objects.equals(this.polarity, sentiment.polarity) &&
        Objects.equals(this.score, sentiment.score);
  }

  @Override
  public int hashCode() {
    return Objects.hash(polarity, score);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Sentiment {\n");
    sb.append("    polarity: ").append(toIndentedString(polarity)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

